<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>CSS详解</title>
    <link href="/2023/01/06/2.%20css/"/>
    <url>/2023/01/06/2.%20css/</url>
    
    <content type="html"><![CDATA[<h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><h2 id="1-CSS简介"><a href="#1-CSS简介" class="headerlink" title="1. CSS简介"></a>1. CSS简介</h2><ul><li><p>定义</p><ul><li>css：层叠样式表(Cascading Style Sheet)，又称为级联样式表等</li><li>css不是一门编程语言，也不是标记语言，是一门样式表语言</li></ul></li><li><p><strong>css历史</strong></p><ul><li><p>css1和css2都是整个版本一起发布，到css3因为涉及到的css太多，一起发布会导致时间线太长</p></li><li><p>从css3开始，所有的css划分成了不同的modules，每一个模块都有于css2中额外增加的功能</p></li><li><p>比如：直到2011.6.7，CSS 3 Color Module 成为W3C Recommendation（推荐版本）</p></li></ul></li><li><p><strong>CSS最大价值：</strong></p><ul><li>美化网页，布局页面（美化HTML）</li><li>由HTML专注去做结构呈现，样式交给CSS，结构（HTML）与样式（CSS）分离 </li><li>美化方式<ul><li>方式一：为HTML添加各种样式：颜色、字体、大小等</li><li>方式二：对HTML进行布局：浮动、定位、flex</li></ul></li></ul></li><li><p><strong>CSS语法规范：</strong></p><ul><li><p>CSS = 选择器（HTML的标签）+  声明（一条或多条）</p></li><li><p>选择器{样式} =&gt; 给谁改样式{改什么样式}       </p></li><li><p>声明的写法如下</p><figure class="highlight css"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*属性: 属性值;*/</span><br><span class="hljs-attribute">color</span>: red;<br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong>CSS代码风格</strong></p></li></ul><ol><li><p>样式格式书写-展开格式</p></li><li><p>样式大小写风格-小写</p></li><li><p>样式空格风格：</p></li></ol><p>  冒号后面，属性值前面保留空格</p><p>  选择器（标签）和大括号中间保留空格</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">18px</span>;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>css注释</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*我是css注释*/</span><br></code></pre></td></tr></table></figure><h2 id="2-CSS引入方式"><a href="#2-CSS引入方式" class="headerlink" title="2. CSS引入方式"></a>2. CSS引入方式</h2><ul><li>内联样式(行内样式表) inline style<ul><li>存在于HTML元素的style属性中</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: red; width: 100px;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>内部样式表(文档样式表) internal style sheet<ul><li>放在head的style元素中</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>外部样式表  external style sheet<ul><li>编写单独的.css样式文件，通过link元素引入</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;css文件路径&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>通过 @import 引入<ul><li>可在style元素或者CSS文件中通过@import引入其它CSS文件</li></ul></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*import引入*/</span><br>&lt;style&gt;<br><span class="hljs-keyword">@import</span> url(./css/style.css)<br>&lt;/style&gt;<br>    <br>/*也可以在css中引入其他的css文件(如果css文件过多时)<br>  url()是css函数 和<span class="hljs-attribute">background-image</span>: url();一样*/<br><span class="hljs-keyword">@import</span> url(./css/style.css)<br></code></pre></td></tr></table></figure><ul><li>扩展</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css">//单独的css文件最好指定一下css编码，当有中文的时候才能正确解释<br><span class="hljs-keyword">@charset</span> <span class="hljs-string">&quot;utf-8&quot;</span>;  <br><span class="hljs-selector-tag">body</span>&#123;<br>    <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&quot;微软雅黑&quot;</span>;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>css属性相关文档</p><ul><li>官方文档W3C：<a href="https://www.w3.org/TR/?tag=css">https://www.w3.org/TR/?tag=css</a></li><li>推荐文档MDN: <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Reference#%E7%B4%A2%E5%BC%95://developer.mozilla.org/zh-CN/docs/Web/CSS/Reference">https://developer.mozilla.org/zh-CN/docs/Web/CSS/Reference#%E7%B4%A2%E5%BC%95://developer.mozilla.org/zh-CN/docs/Web/CSS/Reference</a></li><li>查询css是否可用/兼容：<a href="https://caniuse.com/">https://caniuse.com/</a></li></ul></li><li><p>一些最基本的CSS属性</p><ul><li>font-size：文字大小</li><li>color：前景色（文字颜色），包括文字、装饰线、边框、外轮廓等的颜色</li><li>background-color：背景色</li><li>width：宽度</li><li>height：高度</li></ul></li></ul><h2 id="3-CSS基础选择器"><a href="#3-CSS基础选择器" class="headerlink" title="3. CSS基础选择器"></a>3. CSS基础选择器</h2><ul><li><p> 什么是CSS选择器？</p></li><li><p>按照一定的规则选出符合条件的元素，为其添加css样式</p></li><li><p>分类</p><ul><li>基础选择器：标签选择器，类选择器，id选择器，通配符(通用)选择器</li><li>其他选择器：属性选择器、组合选择器(并集/交集/兄弟/后代)、伪类、伪元素</li></ul></li></ul><p><strong>（1）标签(元素)选择器</strong></p><ul><li>使用元素名称</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span> &#123;<br>    <span class="hljs-attribute">color</span>: red;  //标签名作为选择器，同类型标签统一设置样式<br>&#125;<br></code></pre></td></tr></table></figure><p>缺点：不能差异化选择</p><p><strong>（2）类选择器（常用）</strong></p><ul><li>使用 .class类名</li></ul><p>语法： .类名{}  class=”类名”</p><p>作用：单独选择一个或几个标签</p><p>口诀：样式点定义，结构类（class）调用，一个或多个，开发最常用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box color&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> //多类名 空格隔开<br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">    <span class="hljs-selector-class">.box</span> &#123;</span><br><span class="css">    </span><br><span class="css">    &#125;</span><br><span class="css">    <span class="hljs-selector-class">.color</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">color</span>: red;</span><br><span class="css">    &#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span>  <br></code></pre></td></tr></table></figure><ul><li>类的命名规范<ul><li>尽量见名知意，多个单词连接时，以-/_方式连接</li></ul></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*中划线 - 连接（推荐）*/</span><br><span class="hljs-selector-class">.large-font</span>&#123;&#125;<br><span class="hljs-comment">/* 下划线 _ 连接*/</span><br><span class="hljs-selector-class">.large_font</span>&#123;&#125;<br><span class="hljs-comment">/* 小驼峰连接*/</span><br><span class="hljs-selector-class">.largeFont</span>&#123;&#125;<br></code></pre></td></tr></table></figure><p><strong>（3）id选择器</strong></p><ul><li><p>使用 #id</p><p>  特点：唯一性（一个HTML文档中的id是唯一的，不能重复）</p><p>  口诀：样式#定义，结构id调用，只能调用一次，别人切勿使用</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">    <span class="hljs-selector-id">#box</span> &#123;</span><br><span class="css">      <span class="hljs-attribute">background-color</span>: red;</span><br><span class="css">    &#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>（4）通配符(通用)选择器</strong></p><p>语法: *{}</p><p>作用：选取页面所有元素（标签）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*去除网页元素自带的内外边距</span><br><span class="hljs-comment">弊端：这种方式会遍历HTML所有标签，不管页面有没有，效率很低，尽量不使用*/</span><br>*&#123;  <br>      <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>      <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br> &#125;<br><span class="hljs-comment">/*更推荐的做法*/</span><br><span class="hljs-selector-tag">body</span>,<span class="hljs-selector-tag">p</span>,dic,<span class="hljs-selector-tag">span</span>,<span class="hljs-selector-tag">p</span>,<span class="hljs-selector-tag">h1</span>&#123;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>  pading: <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-CSS字体属性"><a href="#4-CSS字体属性" class="headerlink" title="4. CSS字体属性"></a>4. CSS字体属性</h2><ul><li><p>CSS Fonts（字体）属性用于定义字体系列，大小，粗细，和文字样式（如斜体）</p></li><li><p>字体基本属性</p></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*字体大小(px是像素)*/</span><br><span class="hljs-attribute">font-size</span>：<span class="hljs-number">20px</span>; <span class="hljs-comment">/*谷歌浏览器最小12px，设置比12小的没有效果*/</span><br><span class="hljs-attribute">font-size</span>: <span class="hljs-number">1em</span>; <span class="hljs-comment">/*不推荐,1em相对于父元素font-size*/</span><br><span class="hljs-attribute">font-size</span>: <span class="hljs-number">50%</span>; <span class="hljs-comment">/*父元素字体的一半,这个不用记，查文档即可*/</span><br><br><span class="hljs-comment">/*字体系列，一般只设置一次即可</span><br><span class="hljs-comment">原理：根据设置的字体来从用户电脑的操作系统中读取已有(下载好的)的字体来显示</span><br><span class="hljs-comment">为了防止设置的字体刚好操作系统中不存在，会设置多个,前面的没有会依次使用后面的</span><br><span class="hljs-comment">也可通过@font-face可以直接下载的字体*/</span><br><span class="hljs-attribute">font-family</span>: Microsoft YaHei<br>font-family:<span class="hljs-string">&#x27;Courier New&#x27;</span>, Courier, monospace ;<br><span class="hljs-comment">/*注意：当字体有多个单词或编码格式时通常加上&#x27;&#x27;  以下是淘宝的字体*/</span><br><span class="hljs-attribute">font</span>: <span class="hljs-number">12px</span>/<span class="hljs-number">1.5</span> tahoma, arial, <span class="hljs-string">&#x27;Hiragino Sans GB&#x27;</span>, <span class="hljs-string">&#x27;\5b8b\4f53&#x27;</span>, sans-serif;<br><br><span class="hljs-comment">/*字体粗细： 加粗700==bold   正常400==normal(提倡数字)</span><br><span class="hljs-comment">strong/b/h1-h6默认就是bold*/</span><br><span class="hljs-attribute">font-weight</span>：<span class="hljs-attribute">normal</span>（正常）/bold（粗）/bolder（特粗）/lighter（细体）<br><span class="hljs-attribute">font-weight</span>：<span class="hljs-number">400</span>/<span class="hljs-number">700</span><br><br><span class="hljs-comment">/*文字斜体  em/i默认是斜体*/</span><br><span class="hljs-attribute">font-style</span>：<span class="hljs-attribute">normal</span>（正常）italic（字体系列中自带的倾斜）<br>            oblique(使用italic失效时-使用的字体不支持倾斜，使用这个)<br><span class="hljs-comment">/*i较常用-做小图标*/</span><br><span class="hljs-selector-tag">i</span><span class="hljs-selector-pseudo">::after</span>&#123;&#125;<br><br><span class="hljs-comment">/*影响小写字母的显示形式：将小写字母替换为缩小过的大写字母*/</span><br><span class="hljs-attribute">font-variant</span>: normal/small-caps<br><br>/*行高：一行文本所占的高度<br>  为什么有行高：方便用户阅读理解（知道阅读顺序-左到右还是上到下）<br>  行高定义：两行文本基线<span class="hljs-built_in">baseline</span>(与小写字母x最底部对齐的线)之间的距离<br>  行高=文本高度(顶线-&gt;底线)+上间距+下间距<br>*/  <br>line-height    <br>/*height和line-height区别：height是元素整体的高度、line-height是元素中每一行文本所占高度<br>单行文本（只限文本）垂直居中(上下行距等分，所以会垂直居中)*/<br>hight=line-height <br></code></pre></td></tr></table></figure><p> <img src="/img/css_line-height.png"></p><ul><li><p>字体复合属性</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">//<span class="hljs-attribute">font-size</span>  <span class="hljs-attribute">font-family</span>必须写且顺序不能交换，其他可以省略<br><span class="hljs-attribute">font</span>: [font-style  font-variant font-weight]  font-size/[line-height]  font-family;<br></code></pre></td></tr></table></figure></li></ul><h2 id="5-CSS文本属性"><a href="#5-CSS文本属性" class="headerlink" title="5. CSS文本属性"></a>5. CSS文本属性</h2><ul><li>CSS Text（文本）属性：可定义文本外观，比如文本颜色、对其文本、修饰文本、文本缩进、行间距等。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*设置inline-level内容在块级父元素内的对其方式</span><br><span class="hljs-comment">设置div中的text-align，只对其中的行内元素起作用，对块级元素不起作用*/</span><br><span class="hljs-attribute">text-align</span>: left/right/center/justify<br>/*<br><span class="hljs-built_in">justify</span>(了解)<br>将两边的空隙平均分到每个空隙，对最后一行没有效果<br>只有一行没有效果，需要这样设置，最后一行也是justify<br>*/<br>text-align: justify;<br><span class="hljs-attribute">text-align-last</span>: justify;  <br><br><span class="hljs-comment">/*文本装饰线 decoration-装饰 (a默认加了下划线，none去掉)</span><br><span class="hljs-comment">color设置前景色的时候，也会让装饰线设置相应颜色*/</span><br><span class="hljs-attribute">text-decoration</span>: none/underline/overline/line-through  <br><br>/*首行文本缩进<br>em相当于当前元素本身的font-size大小*/<br>text-indent:  <span class="hljs-number">2em</span>  <br><br>/*设置文字大小写转换 transform-形变<br>没有影响/每个单词首字符变为大写/每个单词所有字符变为大写/每个单词所有字符变为小写*/<br>text-transform：none/capitalize/uppercase/lowercase<br><br>/*字母间距、单词间距：默认是<span class="hljs-number">0</span>，可以设置负数*/<br>letter-spacing: <span class="hljs-number">10px</span>;<br><span class="hljs-attribute">word-spacing</span>: <span class="hljs-number">10px</span>;<br></code></pre></td></tr></table></figure><h2 id="6-CSS背景属性"><a href="#6-CSS背景属性" class="headerlink" title="6. CSS背景属性"></a>6. CSS背景属性</h2><p>  作用：给页面元素添加背景样式。</p><p>  可设置： 背景颜色，背景图片，背景平铺，背景图片位置，背景图片大小, 背景图像固定</p><p>  注意：背景图片和背景颜色同时添加时，背景图片会压住背景颜色</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*背景颜色*/</span><br><span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">transparent</span>(默认透明色); <br><br><span class="hljs-comment">/*背景图片</span><br><span class="hljs-comment">常用于：装饰的小图片或超大背景图片</span><br><span class="hljs-comment">优点：非常便于控制位置（图片在盒子中的位置）</span><br><span class="hljs-comment">注意：背景图片是盖在背景颜色上面，而不是让color失效</span><br><span class="hljs-comment">可以设置多张背景图片url()[,url()...]，第一张会显示在最上面，其他依次按顺序在下面</span><br><span class="hljs-comment">*/</span><br><span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&quot;&quot;</span>)<br><br>/*背景平铺<br>平铺(默认)|不平铺|x轴平铺|y轴平铺<br>*/<br>background-repeat: repeat|no-repeat|repeat-x|repeat-y<br><br><br>/*背景大小<br>auto-以背景图本身大小显示<br>cover-拉伸背景图片，使其覆盖满整个元素,会让图片显示不完整<br>contain-对图片进行拉伸，拉伸到一个方向的宽度(高度)，不再拉伸，保持图片宽高比<br>具体值：百分比/具体大小<br>*/<br>background-size: auto/cover/contain;<br><span class="hljs-attribute">background-size</span>: auto <span class="hljs-number">100px</span>;  <span class="hljs-comment">/*宽度保持宽高比自动计算*/</span><br><br><br><span class="hljs-comment">/*背景图片位置- x,y可以是方位名词或者精确单位</span><br><span class="hljs-comment">方位名词：(顺序没关系)</span><br><span class="hljs-comment">   top|center|bottom|left|center|right  //只写一个,第二个默认center</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">  精确单位：（有顺序）</span><br><span class="hljs-comment">   background-position: 20px 50px;  //只写一个,第二个默认center</span><br><span class="hljs-comment">  混合单位：（有顺序，第一个一定是x，第二个y）</span><br><span class="hljs-comment">*/</span><br><span class="hljs-attribute">background-position</span>: x y;<br><br><span class="hljs-comment">/*背景图像固定 - 决定背景图像的位置是在视口内固定，或者随着包含它的区块滚动。</span><br><span class="hljs-comment">scroll(默认) 背景图片相对元素本身固定，不随着它内容的滚动而滚动</span><br><span class="hljs-comment">local 背景图片会随着元素内容的滚动而滚动</span><br><span class="hljs-comment">fixed 背景图片相对于浏览器视口固定，不会随着元素滚动而滚动</span><br><span class="hljs-comment">注意：如果有文本，默认背景图片滚动</span><br><span class="hljs-comment">*/</span><br><span class="hljs-attribute">background-attachment</span>: scroll/fixed/local<br><br><br>/*背景复合写法<br>size如果不省略,/size必须紧跟在position后面<br>属性都可省略，且顺序不固定（空格隔开）<br>*/<br>background: color <span class="hljs-built_in">image</span>(url) repeat attachment position/size  <br></code></pre></td></tr></table></figure><ul><li><strong>background-image和img的选择</strong></li></ul><p><img src="/img/css_background-image%E5%92%8Cimg%E5%85%83%E7%B4%A0%E7%9A%84%E6%AF%94%E8%BE%83.png"></p><p>总结：</p><p>img元素作为网页的重要组成部分，比如广告图片、LOGO图片、文章配图、产品配图</p><p>background-image，可有可无，有能够让网页更加美观，无也不影响用户获取完整的网页内容信息</p><h2 id="7-CSS其他选择器"><a href="#7-CSS其他选择器" class="headerlink" title="7. CSS其他选择器"></a>7. CSS其他选择器</h2><ul><li>分类：属性选择器、后代选择器、兄弟选择器、选择器组(并/交集)、伪类、伪元素</li></ul><h3 id="7-1-属性选择器"><a href="#7-1-属性选择器" class="headerlink" title="7.1 属性选择器"></a>7.1 属性选择器</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*[att] [att=val]</span><br><span class="hljs-comment">选择具有title属性且属性值为head的元素*/</span><br><span class="hljs-selector-attr">[title]</span><br><span class="hljs-selector-attr">[title=<span class="hljs-string">&quot;head&quot;</span>]</span><br><span class="hljs-selector-tag">h1</span><span class="hljs-selector-attr">[title=<span class="hljs-string">&quot;head&quot;</span>]</span>&#123;&#125;  <span class="hljs-comment">/*并集选择器写法*/</span><br><br><span class="hljs-comment">/*以下作为了解即可,用到再查就ok </span><br><span class="hljs-comment">选择E且val开头/结尾/包含val的元素*/</span><br>E<span class="hljs-selector-attr">[属性^=”val”]</span> E<span class="hljs-selector-attr">[属性$=”val”]</span> E<span class="hljs-selector-attr">[属性*=”val”]</span><br>E<span class="hljs-selector-attr">[属性|=”val”]</span> E<span class="hljs-selector-attr">[属性~=”val”]</span>  <br></code></pre></td></tr></table></figure><p>注：类选择器，伪类选择器，属性选择器权重都是10  ([]权重为10)  </p><h3 id="7-2-兄弟选择器"><a href="#7-2-兄弟选择器" class="headerlink" title="7.2 兄弟选择器"></a>7.2 兄弟选择器</h3><ul><li>注意只能后面的元素</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*相邻兄弟选择器</span><br><span class="hljs-comment">选择.box1后面紧挨着的h2*/</span><br><span class="hljs-selector-class">.box1</span> + <span class="hljs-selector-tag">h2</span>&#123;&#125;  <br><br><span class="hljs-comment">/*全兄弟选择器</span><br><span class="hljs-comment">选择.box1后面的所有h2*/</span><br><span class="hljs-selector-class">.box1</span> ~ <span class="hljs-selector-tag">h2</span>&#123;&#125;  <br></code></pre></td></tr></table></figure><h3 id="7-3-后代选择器"><a href="#7-3-后代选择器" class="headerlink" title="7.3 后代选择器"></a>7.3 后代选择器</h3><ul><li>后代选择器一：所有后代</li></ul><p>语法：空格 隔开</p><p>作用：选择父元素里面子元素(包括直接、间接子元素)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box</span> <span class="hljs-selector-tag">h1</span>&#123;&#125;<br></code></pre></td></tr></table></figure><ul><li>后代选择器二：直接子代选择器 </li></ul><p>语法：选择器之间以 &gt; 分割</p><p>作用：选择直接子元素(亲儿子)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box</span> &gt; <span class="hljs-selector-tag">span</span>&#123;&#125;<br></code></pre></td></tr></table></figure><h3 id="7-4-选择器组-交集-并集选择器"><a href="#7-4-选择器组-交集-并集选择器" class="headerlink" title="7.4 选择器组-交集/并集选择器"></a>7.4 选择器组-交集/并集选择器</h3><ul><li>交集选择器<ul><li>需要同时符合两个选择器条件，两个选择器需要紧密相连</li><li>为了精准的选择某一个元素</li></ul></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">h3</span><span class="hljs-selector-class">.class</span>&#123;<span class="hljs-attribute">color</span>:red&#125;<br><span class="hljs-selector-tag">h1</span><span class="hljs-selector-attr">[title=<span class="hljs-string">&quot;h&quot;</span>]</span><br></code></pre></td></tr></table></figure><ul><li>并集选择器</li></ul><p>语法：选择器1,选择器2…(最后不加逗号)</p><p>作用：为了给多个元素设置相同的样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-id">#box</span>,<br><span class="hljs-selector-tag">p</span>,<br><span class="hljs-selector-class">.box1</span> <span class="hljs-selector-tag">h1</span> &#123;<br><span class="hljs-attribute">color</span>: red;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意：任何形式的选择器都可以作为并集选择器的一部分 </p><p>​                                                                                                                                         </p><h3 id="7-5-伪类选择器"><a href="#7-5-伪类选择器" class="headerlink" title="7.5 伪类选择器"></a>7.5 伪类选择器</h3><p>分类：<strong>动态伪类、结构伪类、否定伪类</strong>、目标伪类、语言伪类、元素状态伪类</p><p>什么是伪类：选择器的一种，用于选择处于特定状态的元素</p><p>文档：<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Pseudo-classes">https://developer.mozilla.org/zh-CN/docs/Web/CSS/Pseudo-classes</a></p><ul><li>不常用的三个伪类选择器</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*目标伪类-作用于锚点链接，点击后变红*/</span><br><span class="hljs-selector-pseudo">:target</span>&#123;<span class="hljs-attribute">color</span>: red;&#125;<br><span class="hljs-comment">/*元素状态伪类 :enable :disable :checked */</span><br>:disable&#123;&#125;  //选中具有disable属性的元素<br><span class="hljs-comment">/*语言伪类 选择使用lang属性的元素，如 html中的lang */</span><br><span class="hljs-selector-pseudo">:lang</span>()<br></code></pre></td></tr></table></figure><h4 id="7-5-1-动态伪类选择器"><a href="#7-5-1-动态伪类选择器" class="headerlink" title="7.5.1 动态伪类选择器"></a>7.5.1 动态伪类选择器</h4><p>作用：向某些选择器添加特殊的效果，一般给链接添加特殊效果 </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*未点击/点击过/经过/按下未松开</span><br><span class="hljs-comment">顺序必须是：link-visited-hover-active  记忆：女朋友看到 L V 后，Ha Ha 大笑 */</span><br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:link</span>/<span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:visited</span>/<span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span>/<span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:active</span>  <br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">:focus伪类选择器（较少）焦点汇聚的元素-如input框聚焦输入</span><br><span class="hljs-comment">用于一些可以交互的元素如：input、button、a等，通过tab键或鼠标点击将光标聚焦就可触发</span><br><span class="hljs-comment">顺序：link-visited-focus-hover-active  记忆：女朋友看到 L V 后，(Feng)疯一样 Ha Ha 大笑</span><br><span class="hljs-comment">*/</span><br><span class="hljs-selector-tag">input</span><span class="hljs-selector-pseudo">:focus</span>&#123;&#125;<br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:focus</span>&#123;&#125; <br><br><span class="hljs-comment">/*去掉a的聚焦状态两种方法:  去掉聚焦时的轮廓/tabindex可调整Tab选中元素的顺序 */</span><br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:focus</span>&#123;<span class="hljs-attribute">outline</span>: none&#125;  <br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:focus</span>&#123;tabindex=&quot;-<span class="hljs-number">1</span>&quot;&#125;  <br><br><span class="hljs-comment">/*直接给a元素指定样式，相当于给a元素所有动态伪类都设置了样式</span><br><span class="hljs-comment">如下，所有状态下a的颜色都会是red*/</span><br><span class="hljs-selector-tag">a</span>&#123;<span class="hljs-attribute">color</span>: red&#125;<br></code></pre></td></tr></table></figure><p>注意：只有：hover/active可以用到其他元素上</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span>：hover&#123;<span class="hljs-attribute">color</span>: red&#125;<br></code></pre></td></tr></table></figure><h4 id="7-5-2-结构伪类选择器"><a href="#7-5-2-结构伪类选择器" class="headerlink" title="7.5.2 结构伪类选择器"></a>7.5.2 结构伪类选择器</h4><p><img src="/img/css_%E7%BB%93%E6%9E%84%E4%BC%AA%E7%B1%BB%E9%80%89%E6%8B%A9%E5%99%A8.png"></p><ul><li><strong>nth-child(n)选择器</strong></li></ul><p> n可以是数字/关键字/公式 （n只能取0和正数，负数无效）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs css">//n是数字  -选择第n个子元素<br><span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">2</span>)&#123;&#125;  //交集选择器 选择<span class="hljs-selector-tag">div</span>元素并且<span class="hljs-selector-tag">div</span>是第二个子元素<br><span class="hljs-selector-tag">div</span> <span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">2</span>)&#123;&#125; //区别：后代选择器，选择<span class="hljs-selector-tag">div</span>下的第二个子儿子<br><br>//关键字   -even偶/odd奇数<br>nth-child(even/odd)<br><br>//公式(n都是从<span class="hljs-number">0</span>开始的自然数) <br>//所有孩子、偶数、奇数、<span class="hljs-number">5</span>的倍数<br>nth-child(n/<span class="hljs-number">2</span>n/<span class="hljs-number">2</span>n+<span class="hljs-number">1</span>/<span class="hljs-number">5</span>n)  //选择所有孩子(只能写n)<br><br>nth-child(n+<span class="hljs-number">5</span>) //从第五个开始(包含五)  <br>nth-child(-n+<span class="hljs-number">5</span>)  //前五个(包含五) n必须在前<br></code></pre></td></tr></table></figure><ul><li><strong>nth-of-type(n)</strong></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:nth-of-type</span>(<span class="hljs-number">2</span>)&#123;&#125;   //选择<span class="hljs-selector-tag">div</span>，并且<span class="hljs-selector-tag">div</span>是父元素中第二个<span class="hljs-selector-tag">div</span>(不一定是第二个)<br></code></pre></td></tr></table></figure><ul><li><strong>nth-child(n)和nth-of-type(n)区别</strong><ul><li>div:nth-child(n) 是找第n个子元素-无论类型,如果是div则选中是否无法选中</li><li>div:nth-of-type(n) 是找第n个div元素(指定类型)，排除(不计数)所有非div元素</li></ul></li></ul><p><strong>:nth-child(n)权重为10</strong></p><h4 id="7-5-3-其他结构伪类和否定伪类选择器-了解"><a href="#7-5-3-其他结构伪类和否定伪类选择器-了解" class="headerlink" title="7.5.3 其他结构伪类和否定伪类选择器(了解)"></a>7.5.3 其他结构伪类和否定伪类选择器(了解)</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*nth-last-child 和 nth-last-of-type 从后往前选择，其他用法和nth-child、nth-of-type相似*/</span><br><span class="hljs-selector-tag">p</span><span class="hljs-selector-pseudo">:nth-last-child</span>(<span class="hljs-number">1</span>) &#123;<br>      <span class="hljs-attribute">color</span>: red   /*选择p元素并且是倒数第一个*/<br>&#125;  <br><br><span class="hljs-comment">/*偶尔会用</span><br><span class="hljs-comment">:root           根元素，就是HTML元素</span><br><span class="hljs-comment">:empty&#123;&#125;        empty伪类 选中内容为空的元素</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">/*以下了解</span><br><span class="hljs-comment">:first-child    &lt;=&gt; 相当于nth-child(1)</span><br><span class="hljs-comment">:last-child    &lt;=&gt; 相当于nth-last-child(1)</span><br><span class="hljs-comment">:first-of-type  &lt;=&gt; 相当于nth-of-type(1)</span><br><span class="hljs-comment">:last-of-type   &lt;=&gt; 相当于nth-last-of-type(1)</span><br><span class="hljs-comment">:only-child     父元素中唯一子元素</span><br><span class="hljs-comment">:only-of-type   父元素唯一这种类型子元素(比如唯一的div...)</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><ul><li>否定伪类(了解)</li></ul><p>语法： :not(x)   x是一个简单选择器-标签、class、id、属性、*、伪类(除否定伪类)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-pseudo">:not</span>(<span class="hljs-selector-tag">p</span>)&#123;&#125;  <span class="hljs-comment">/*除了p元素的其他元素*/</span><br></code></pre></td></tr></table></figure><h3 id="7-6-伪元素选择器"><a href="#7-6-伪元素选择器" class="headerlink" title="7.6 伪元素选择器"></a>7.6 伪元素选择器</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*</span><br><span class="hljs-comment">常用伪元素选择器（可以用:或:: 但是为了和伪类区分，建议::）</span><br><span class="hljs-comment">::first-line</span><br><span class="hljs-comment">::first-letter</span><br><span class="hljs-comment">::before</span><br><span class="hljs-comment">::after</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">/*只有部分属性可以应用，了解*/</span><br><span class="hljs-selector-tag">p</span><span class="hljs-selector-pseudo">::first-line</span>&#123;<span class="hljs-attribute">color</span>: red&#125;   //<span class="hljs-selector-tag">p</span>的第一行变为red<br><span class="hljs-selector-tag">p</span><span class="hljs-selector-pseudo">::first-letter</span>&#123;<span class="hljs-attribute">color</span>: red&#125; //<span class="hljs-selector-tag">p</span>的第一个字或字母变色<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">作用：可以利用CSS在一个元素内容之间或之后插入其他内容(图片/文字等),而不需要HTML标签，简化结构</span><br><span class="hljs-comment">::before  在元素内部的前面插入内容</span><br><span class="hljs-comment">::after  在元素内部的后面插入内容</span><br><span class="hljs-comment">注意：before/after创建的元素都属于inline行内元素-要设置宽高需：display: inline-block</span><br><span class="hljs-comment">     新创建的元素在文档树中是找不到的-称为伪元素</span><br><span class="hljs-comment">     before/after必须有content: &quot;&quot;;</span><br><span class="hljs-comment">     权重为1(和标签选择器一样)</span><br><span class="hljs-comment">语法： element::before&#123;&#125;</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-selector-class">.box1</span><span class="hljs-selector-pseudo">::before</span>&#123;<span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;&quot;</span>&#125;  <br><br> <br><span class="hljs-comment">/*</span><br><span class="hljs-comment">使用场景-伪元素清除浮动</span><br><span class="hljs-comment">方法一：额外标签法(隔墙法) -会额外增加标签</span><br><span class="hljs-comment">父盒子中最后插入一个空的块级元素并 clear:both</span><br><span class="hljs-comment">父级添加overflow: hiddle;</span><br><span class="hljs-comment">   (后面两种伪元素清除浮动算是额外标签法的升级和优化)</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">方法二：父级添加after伪元素(推荐) */</span><br><br><span class="hljs-selector-class">.clearfix</span>:after&#123;<br>content:<span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-attribute">display</span>: block;<br>    <span class="hljs-attribute">clear</span>: both;<br>&#125;<br><br><span class="hljs-comment">/*方法三-父级添加双伪元素(推荐)*/</span><br><br><span class="hljs-selector-class">.clearfix</span>:before,.clearfix:after&#123;<br>content: <span class="hljs-string">&quot;&quot;</span>;  <br>    <span class="hljs-attribute">display</span>: table; <br>&#125;<br><span class="hljs-selector-class">.clearfix</span>:after&#123;clear: both;&#125;<br></code></pre></td></tr></table></figure><h2 id="8-Emmet语法-了解"><a href="#8-Emmet语法-了解" class="headerlink" title="8. Emmet语法(了解)"></a>8. Emmet语法(了解)</h2><ul><li>使用场景：VS Code中使用缩写，来提高html/css的编写速度</li></ul><p><strong>快速生成HTML结构语法</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* ! html:5  生成h5代码结构*/</span><br><br><span class="hljs-comment">/* 多个* */</span><br><span class="hljs-selector-tag">p</span>*<span class="hljs-number">3</span>  //生成三个<span class="hljs-selector-tag">p</span><br><br><span class="hljs-comment">/*生成父子和兄弟元素*/</span><br><span class="hljs-selector-tag">div</span>&gt;<span class="hljs-selector-tag">p</span>  //  <span class="hljs-selector-tag">div</span>和<span class="hljs-selector-tag">p</span>父子<br><span class="hljs-selector-tag">div</span>+<span class="hljs-selector-tag">p</span>  //  <span class="hljs-selector-tag">div</span>和<span class="hljs-selector-tag">p</span>兄弟<br><br><span class="hljs-comment">/*上一层^和分组()</span><br><span class="hljs-comment">实现以下元素的两种Emment语法：</span><br><span class="hljs-comment">上一层：div&gt;p&gt;span^h1^div</span><br><span class="hljs-comment">分组： (div&gt;(p&gt;span)&gt;h1)+div</span><br><span class="hljs-comment">*/</span><br>&lt;<span class="hljs-selector-tag">div</span>&gt;<br>    &lt;<span class="hljs-selector-tag">p</span>&gt;<br>      &lt;<span class="hljs-selector-tag">span</span>&gt;&lt;/<span class="hljs-selector-tag">span</span>&gt;<br>    &lt;/<span class="hljs-selector-tag">p</span>&gt;<br>    &lt;<span class="hljs-selector-tag">h1</span>&gt;&lt;/<span class="hljs-selector-tag">h1</span>&gt;<br>&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;<span class="hljs-selector-tag">div</span>&gt;&lt;/<span class="hljs-selector-tag">div</span>&gt;<br><br><span class="hljs-comment">/*生成属性[]*/</span><br><span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.name</span>/<span class="hljs-selector-tag">p</span><span class="hljs-selector-id">#demo</span>(不加标签默认<span class="hljs-selector-tag">div</span>)  //类名或者id<br><span class="hljs-selector-tag">div</span><span class="hljs-selector-attr">[title=<span class="hljs-string">&quot;1&quot;</span>]</span>  //生成title=&quot;<span class="hljs-number">1</span>&quot;的<span class="hljs-selector-tag">div</span><br><span class="hljs-selector-tag">div</span><span class="hljs-selector-id">#box1</span><span class="hljs-selector-class">.box2</span><span class="hljs-selector-class">.box3</span><span class="hljs-selector-attr">[title=<span class="hljs-string">&quot;div&quot;</span>]</span>  //生成多个属性<br><br><span class="hljs-comment">/*生成内容&#123;&#125;*/</span><br><span class="hljs-selector-tag">h1</span>&#123;我是<span class="hljs-selector-tag">h1</span>&#125;  //生成内容为&quot;我是<span class="hljs-selector-tag">h1</span>&quot;的<span class="hljs-selector-tag">h1</span><br><span class="hljs-comment">/*生成带有数字$*/</span><br><span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.box</span>$*<span class="hljs-number">4</span>    //属性有数字-生成四个<span class="hljs-selector-tag">div</span> class=box1 box2... <br><span class="hljs-selector-tag">p</span>&#123;我是文字内容$&#125;*<span class="hljs-number">3</span>  //内容有数字<br><br><span class="hljs-comment">/*隐式标签*/</span><br><span class="hljs-selector-class">.box1</span>&gt;<span class="hljs-selector-id">#box2</span>   //不加标签，默认是<span class="hljs-selector-tag">div</span><br><span class="hljs-selector-tag">ul</span>&gt;<span class="hljs-selector-class">.item</span>$&#123;我是第$个<span class="hljs-selector-tag">li</span>&#125;*<span class="hljs-number">3</span>  //<span class="hljs-selector-tag">ul</span>只能放<span class="hljs-selector-tag">li</span>，所以可以省略<span class="hljs-selector-tag">li</span><br><span class="hljs-selector-tag">table</span>&gt;<span class="hljs-selector-id">#row</span>$*<span class="hljs-number">3</span>&gt;<span class="hljs-selector-attr">[colspan=2]</span>  //直接生成<span class="hljs-selector-tag">tr</span>/<span class="hljs-selector-tag">td</span><br><br></code></pre></td></tr></table></figure><p><strong>快速生成CSS样式语法</strong></p><p>(大部分都是单词缩写)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*width:100 height:200 margin:10 padding:20*/</span><br>w100+h200+m10+p20  <br><span class="hljs-comment">/*m20-30-40--50*/</span><br><span class="hljs-attribute">margin</span>: <span class="hljs-number">20</span>,<span class="hljs-number">30</span>,<span class="hljs-number">40</span>,-<span class="hljs-number">50</span><br>/*fz20*/<br>font-size: <span class="hljs-number">20</span>  <br>/*fw*/<br>font-weight: <span class="hljs-number">700</span>  <br>/*bgc*/<br>background-color  <br></code></pre></td></tr></table></figure><h2 id="9-CSS特性"><a href="#9-CSS特性" class="headerlink" title="9. CSS特性"></a>9. CSS特性</h2><ul><li><p>CSS特性：层叠性 继承性</p></li><li><p><strong>层叠性</strong> </p><ul><li>css是层叠样式表，也就是说的层叠性</li><li>同一个元素通过相同/不同选择器设置相同的样式 就会产生覆盖（层叠）</li><li>设置多个样式，最终谁会生效<ul><li>选择器的权重，权重大的生效，权重可以判断出优先级</li><li>先后顺序，权重相同时，后设置的生效</li></ul></li><li><strong>优先级</strong></li></ul></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*</span><br><span class="hljs-comment">继承或*(0,0,0,0)&lt;标签选择器,伪元素(0,0,0,1)&lt;class,伪类选择器,属性选择器(0,0,1,0)</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">&lt;id(0,1,0,0)&lt;style内联样式(1,0,0,0)&lt;!important(1,0,0,0,0)（无穷大） */</span><br><br><span class="hljs-attribute">color</span> : red <span class="hljs-meta">!important</span>;        <br></code></pre></td></tr></table></figure><p><strong>注意：</strong>继承的权重是0</p><div class="code-wrapper"><pre><code class="hljs">        a/h1-h6浏览器默认指定了样式，所有a必须单独指定样式（指定body没用）        复合选择器权重的叠加：只能叠加，没有进位</code></pre></div><ul><li><strong>继承性</strong><ul><li>css某些属性具有继承性：如果给一个元素设置了具备继承性的属性，所有后代元素都会继承该属性</li><li>继承的优先级很低：一旦元素自己设置了样式，继承的就会失效</li><li>具备继承性的元素：文本和字体属性通常都能继承</li><li>多查阅文档，文档中会有说该属性是否继承</li><li>继承过来的是计算值，而不是设置值（如2em，继承过来是计算出来的px而不是2em）</li></ul></li></ul><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">Interited <span class="hljs-keyword">from</span> body  <span class="hljs-comment">//浏览器调试时，会有这个提示继承自哪个</span><br></code></pre></td></tr></table></figure><p>强制继承</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*不能继承的属性，可以使用Interited强制继承*/</span><br><span class="hljs-attribute">width</span>: inherit;<br></code></pre></td></tr></table></figure><p>继承的用途-行高的继承</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">body</span>&#123; <span class="hljs-attribute">font</span>: <span class="hljs-number">12px</span>/<span class="hljs-number">1.5</span> ‘Microsoft yahei’;&#125; <br></code></pre></td></tr></table></figure><p>若子元素有文字大小，则子元素当前文字大小的1.5倍</p><p>若无，则是父元素的文字大小的1.5倍</p><p>优点：子元素可以根据自己的文字大小自动调整行高</p><h2 id="10-CSS的元素显示模式"><a href="#10-CSS的元素显示模式" class="headerlink" title="10. CSS的元素显示模式"></a>10. CSS的元素显示模式</h2><h3 id="10-1-元素显示模式的由来"><a href="#10-1-元素显示模式的由来" class="headerlink" title="10.1 元素显示模式的由来"></a>10.1 元素显示模式的由来</h3><ul><li><p>定义：元素（标签）以什么方式进行显示</p></li><li><p>HTML定义元素类型的思路</p><ul><li>HTML元素有很多：p div span h1 img a等，当把元素放到页面上时应该占据一行多宽的空间？<ul><li>这里的只说一行，因为垂直方向的高度一般由内容决定</li></ul></li><li>比如：h元素代表标题，我们希望它独占一行；p元素是一个整体段落，必然也需要独占一行</li><li>然而，img、a、span等元素，通常是对内容某个细节的描述，不需独占一行</li><li>为了区分哪些元素需要独占一行，哪些元素又一行多个，将元素分成两类</li></ul></li><li><p>分类</p><ul><li><p>按是否能在一行显示分</p><ul><li>块级(block-level)元素：独占父元素的一行</li><li>行内级(inline-level)元素：多个行内级元素可以在父元素同一行显示</li></ul></li><li><p>行内级元素一般又分为：替换元素和非替换元素</p></li></ul></li></ul><p><img src="/img/css_%E5%85%83%E7%B4%A0%E5%88%86%E7%B1%BB.png"></p><h3 id="10-2-不同level元素的特征"><a href="#10-2-不同level元素的特征" class="headerlink" title="10.2 不同level元素的特征"></a>10.2 不同level元素的特征</h3><ul><li><strong>块级block元素</strong></li></ul><p>特点：独占父元素的一行,可控 宽度/高度/外边距/内边距(设置完宽度依然独占一行)</p><p>​           宽度默认父级宽度,可以放行内或块元素</p><p>注意：文字类的元素不能包含块级元素(h1-h6/p)</p><ul><li><strong>行内级inline元素</strong></li></ul><p>特点：一行可以放多个,宽/高设置无效(行内非替换元素)    </p><p>​           默认宽度本身内容宽度,只能容纳文本或行内元素 </p><p>注意：a可以放块内元素，但转换块级模式最安全</p><p>如：a，strong，em，span等，span就是典型行内元素</p><ul><li><strong>替换inline-block元素(行内)</strong></li></ul><p>定义：元素本身没有内容，浏览器会根据元素的类型和属性(如img的src)，来决定元素的具体显示内容</p><p>如：img 、input 、iframe、audio</p><p>特点：一行可以多个  宽高由内容决定</p><p>​            宽高/行高/外边距/内边距可以设置</p><p>​            同时具有块级元素和行内元素的特点</p><h3 id="10-3-元素显示模式转换"><a href="#10-3-元素显示模式转换" class="headerlink" title="10.3 元素显示模式转换"></a>10.3 元素显示模式转换</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*</span><br><span class="hljs-comment">四个常用属性值</span><br><span class="hljs-comment">block-让元素显示为块级元素</span><br><span class="hljs-comment">inline-让元素显示为行内级元素</span><br><span class="hljs-comment">inline-block-让元素同时具备行内级、块级元素的特征</span><br><span class="hljs-comment">none-隐藏元素,不占据空间</span><br><span class="hljs-comment">  flex-flex布局后面学习</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">浏览器默认给p、div、h1...设置了 display: block</span><br><span class="hljs-comment">*/</span><br><span class="hljs-attribute">display</span>:block/inline/inline-block/none<br></code></pre></td></tr></table></figure><h3 id="10-4-行内级元素之间的空格"><a href="#10-4-行内级元素之间的空格" class="headerlink" title="10.4 行内级元素之间的空格"></a>10.4 行内级元素之间的空格</h3><p>行内级元素(包括inline-block) 代码之间有空格或换行，会被解析显示为空格</p><p>解决方法：</p><div class="code-wrapper"><pre><code class="hljs">代码之间不留空格注释掉空格&lt;!-- --&gt;设置父元素font-size : 0;   (此方法在Safari不适用)给元素添加float (推荐)</code></pre></div><h2 id="11-元素的显示与隐藏"><a href="#11-元素的显示与隐藏" class="headerlink" title="11. 元素的显示与隐藏"></a>11. 元素的显示与隐藏</h2><p>本质：让一个元素在页面中隐藏或显示出来</p><p>(举例：网站广告点击关闭及不见了，刷新重新出现)</p><p>分类：    display/visibility 显示隐藏</p><p>​                overflow溢出显示隐藏</p><ul><li><strong>display属性（重点）</strong></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*</span><br><span class="hljs-comment">隐藏元素后，不再占有原来位置</span><br><span class="hljs-comment">除了转换为块级元素外，同时还有显示元素的意思（不一定要用block，只要不是none都可显示）</span><br><span class="hljs-comment">*/</span><br><span class="hljs-attribute">display</span>: none;  <br><span class="hljs-attribute">display</span>: block;  <br></code></pre></td></tr></table></figure><p>后面应用及其广泛，搭配JS可以做很多网页特效</p><ul><li><strong>visibility可见性</strong></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*</span><br><span class="hljs-comment">visible/hidden-元素可视/隐藏</span><br><span class="hljs-comment">visibility隐藏元素后继续占有原来位置</span><br><span class="hljs-comment">*/</span><br><span class="hljs-attribute">visibility</span>: visible/hidden;<br></code></pre></td></tr></table></figure><ul><li><p><strong>rgba和opacity实现隐藏</strong></p><ul><li>rgba的a是设置alpha值，可以设置color/bgc的透明度，不影响子元素 0~1</li><li>opacity设置整个元素的透明度，会影响所有子元素都有透明度 0~1</li></ul></li><li><p><strong>overflow溢出</strong></p></li></ul><p>作用：对溢出的部分进行显示/隐藏</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*</span><br><span class="hljs-comment">visible 默认-将多余的显示出来</span><br><span class="hljs-comment">hidden隐藏多余的</span><br><span class="hljs-comment">scroll溢出添加滚动条</span><br><span class="hljs-comment">auto溢出时自动添加滚动条（不溢出不显示）</span><br><span class="hljs-comment">*/</span><br><span class="hljs-attribute">overflow</span>: visible/hidden/scroll/auto;    <br><br><span class="hljs-attribute">overflow-x</span>/<span class="hljs-attribute">overflow-y</span>  <span class="hljs-comment">/*有的浏览器可能不支持*/</span><br></code></pre></td></tr></table></figure><p>注：一般情况，我们都不想让溢出的部分显示出来，因为溢出部分会影响布局</p><p>但是如果有定位的盒子，请慎用overflow: hidden因为它会隐藏多余部分        </p><h2 id="12-CSS盒子模型"><a href="#12-CSS盒子模型" class="headerlink" title="12. CSS盒子模型"></a>12. CSS盒子模型</h2><p> <img src="/img/css_%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B.png"></p><p><strong>盒子模型</strong></p><ul><li><p>HTML中每一个元素都可以看成一个盒子，具备以下四个属性</p></li><li><p>组成：margin/border/padding/content</p></li><li><p>盒子大小：box size=content+(padding+border+margin)*2</p></li><li><p>盒子有四边：margin/border/padding 包括 top/right/bottom/left四个边</p></li></ul><h3 id="13-1-content"><a href="#13-1-content" class="headerlink" title="13.1 content"></a>13.1 content</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*设置内容是通过宽高设置的 宽度默认值是auto-交给浏览器来决定*/</span><br><span class="hljs-attribute">width</span> <span class="hljs-attribute">height</span><br><br><span class="hljs-comment">/*最小宽度，保证宽度&gt;=min(当宽度小于min时，会产生滚动条)</span><br><span class="hljs-comment">  最大宽度，保证宽度&lt;=max(当宽度大于max时，宽度还是按照max显示)*/</span><br><span class="hljs-attribute">min-width</span><br><span class="hljs-attribute">max-width</span><br><br><span class="hljs-comment">/*不常用：和min/max-width类似*/</span><br><span class="hljs-attribute">min-height</span><br><span class="hljs-attribute">max-height</span><br></code></pre></td></tr></table></figure><h3 id="13-2-padding"><a href="#13-2-padding" class="headerlink" title="13.2 padding"></a>13.2 padding</h3><ul><li>边框和内容之间的距离</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*top/right/bottom/left*/</span><br><span class="hljs-attribute">padding-left</span>: <span class="hljs-number">12px</span>;   <br><br><span class="hljs-comment">/*padding简写属性*/</span><br><span class="hljs-attribute">padding</span>: <span class="hljs-number">5px</span>;      //都是<span class="hljs-number">5</span>  <br><span class="hljs-attribute">padding</span>: <span class="hljs-number">5px</span> <span class="hljs-number">10px</span>; //上<span class="hljs-number">5</span> 右<span class="hljs-number">10</span> (缺左和下：左和右一样<span class="hljs-number">10</span> 下和上一样<span class="hljs-number">5</span>)<br><span class="hljs-attribute">padding</span>: <span class="hljs-number">5px</span> <span class="hljs-number">10px</span> <span class="hljs-number">20px</span>  //上<span class="hljs-number">5</span> 右<span class="hljs-number">10</span> 下<span class="hljs-number">20</span> (缺左：左和右一样<span class="hljs-number">10</span>)<br>padding: <span class="hljs-number">5px</span> <span class="hljs-number">10px</span> <span class="hljs-number">20px</span> <span class="hljs-number">30px</span>  //上<span class="hljs-number">5</span>右<span class="hljs-number">10</span>下<span class="hljs-number">20</span>左<span class="hljs-number">30</span><br></code></pre></td></tr></table></figure><p>注意：padding会影响盒子的实际大小-撑大盒子  </p><p>应用：导航栏不给盒子宽度，给盒子相同的padding撑开盒子   </p><h3 id="13-3-border"><a href="#13-3-border" class="headerlink" title="13.3 border"></a>13.3 border</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*</span><br><span class="hljs-comment">组成</span><br><span class="hljs-comment">border-width： border-top-width(right/bottom/left)的简写(color、style也一样)</span><br><span class="hljs-comment">border-style: solid/dashed/dotted  实线、虚线、点线</span><br><span class="hljs-comment">border-color</span><br><span class="hljs-comment">*/</span> <br><span class="hljs-comment">/*边框的复合写法*/</span><br><span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid red; <br><br><span class="hljs-comment">/*分开写法(top bottom left right)*/</span><br><span class="hljs-attribute">border-top</span>: <span class="hljs-number">1px</span> solid red; <br><span class="hljs-attribute">border-top-width</span>: <span class="hljs-number">1px</span>;<br><br><span class="hljs-comment">/*表格的细线边框*/</span><br><span class="hljs-attribute">border-collapse</span>: collapse;<br><span class="hljs-comment">/*相邻边框合并在一起, 如*/</span><br><span class="hljs-selector-tag">table</span>,<span class="hljs-selector-tag">td</span>,<span class="hljs-selector-tag">th</span>&#123;<span class="hljs-attribute">border-collapse</span>: collapse; &#125;<br></code></pre></td></tr></table></figure><p>注意：边框会增加盒子的实际大小</p><h3 id="13-4-margin"><a href="#13-4-margin" class="headerlink" title="13.4 margin"></a>13.4 margin</h3><ul><li>设置元素与元素之间的距离</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">margin-top</span>/<span class="hljs-attribute">right</span>/<span class="hljs-attribute">bottom</span>/<span class="hljs-attribute">left</span>：<span class="hljs-number">12px</span>;<br><br>//应用-块级盒子水平居中<br><span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto; //盒子必须有宽,上下视情况定<br>//行内元素、行内块元素水平居中-其父元素添加 <br><span class="hljs-attribute">text-align</span>: center         <br></code></pre></td></tr></table></figure><p>简写 margin: 30px  (和padding一样)     </p><h4 id="13-4-1-margin折叠和传递"><a href="#13-4-1-margin折叠和传递" class="headerlink" title="13.4.1 margin折叠和传递"></a>13.4.1 margin折叠和传递</h4><ul><li><p><strong>margin传递/折叠原因</strong></p><ul><li>传递-不应该用margin设置父子元素，应该用padding</li><li>折叠-margin-top/bottom设置一个即可 不应该设置两个</li><li>浏览器会认为设置错了，所以出现传递和折叠现象</li></ul></li><li><p><strong>上下margin折叠</strong></p><ul><li>折叠：垂直方向上相邻的2个margin(margin-top、margin-bottom)可能合并成一个margin</li><li>两种会折叠的情况<ul><li>两个兄弟块级元素之间的上下margin折叠</li><li>两个父子块级元素之间margin折叠</li></ul></li><li>只有垂直方向才会折叠，水平不会</li><li>折叠后的计算规则：取两个值中较大值</li><li>解决：尽量只给一个盒子添加margin值</li></ul></li></ul><ul><li><p><strong>上下margin传递</strong></p><ul><li><p>margin-top传递（常见）</p><ul><li><p>块级元素的顶部线和父元素的顶部线重叠，那么这个块级元素的margin-top值会传递给父元素</p></li><li><p>父子都有上外边距，此时父元素会塌陷较大的外边距值</p></li></ul></li><li><p>margin-bottom传递（少见，了解）</p><ul><li>底部线重叠，且父元素高度是auto，那么这个块级元素的margin-top值也会传递给父元素</li></ul></li></ul></li><li><p>如何防止传递问题：</p><ul><li><p>父元素设置border-top/border-bottom（不是每个盒子都需要border）</p></li><li><p>父元素设置padding-top/padding-bottom（较好）</p></li><li><p>触发父盒子BFC：设置父元素overflow: hidden/auto</p><p>   (BFC：block format context   相对于一个结界，触发BFC条件：浮动/设置元素overflow为非visible)</p></li></ul></li></ul><h4 id="13-4-2-margin和padding之间的选择"><a href="#13-4-2-margin和padding之间的选择" class="headerlink" title="13.4.2 margin和padding之间的选择"></a>13.4.2 margin和padding之间的选择</h4><ul><li>margin一般用来设置兄弟元素的间距</li><li>padding一般用来设置父子元素的间距</li></ul><h4 id="13-4-3-margin实现块级元素水平居中"><a href="#13-4-3-margin实现块级元素水平居中" class="headerlink" title="13.4.3 margin实现块级元素水平居中"></a>13.4.3 margin实现块级元素水平居中</h4><ul><li>块级盒子所占的宽度 block box width=width+padding+border+margin</li><li>默认会把剩余空间分配给margin-right</li><li>当我们把margin-left/margin-right: auto 时，就会平均分配除了width/padding/border的空间</li><li>所有设置margin: 0 auto; 可以达到块级元素居中显示</li></ul><h4 id="13-4-4-清除内外边距"><a href="#13-4-4-清除内外边距" class="headerlink" title="13.4.4 清除内外边距"></a>13.4.4 清除内外边距</h4><ul><li><p>网页元素很多都带有默认的内外边距,布局前清除内外边距</p></li><li><p>CSS的第一句话：body,p,div….{padding: 0;margin: 0;} </p></li></ul><ul><li>注意：行内元素尽量只设置左右内外边距（上下内外边距设置了没用如果需要设置，则将其转换为块级和行内块元素就可以了 ）</li></ul><h3 id="13-5-行内非替换元素的特殊性"><a href="#13-5-行内非替换元素的特殊性" class="headerlink" title="13.5 行内非替换元素的特殊性"></a>13.5 行内非替换元素的特殊性</h3><ul><li><p>以下属性对行内非替换元素不起作用</p><ul><li>width、height、margin-top、margin-bottom</li></ul></li><li><p>以下属性对行内非替换元素的效果比较特殊</p><ul><li>padding-top、padding-bottom、border-top、boder-bottom</li><li>会多出区域，但是这个区域不占空间(会被下面的元素占据)</li></ul></li></ul><h3 id="13-6-盒子模型box-sizing（重要）"><a href="#13-6-盒子模型box-sizing（重要）" class="headerlink" title="13.6 盒子模型box-sizing（重要）"></a>13.6 盒子模型box-sizing（重要）</h3><ul><li>默认情况下，设置宽高只是设置box内容的宽高，padding/border会撑大box</li><li>如果想设置宽高时，设置的是box全部的size(padding/border不会撑大)，就需要用box-sizing<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*</span><br><span class="hljs-comment">content-box(默认-指定盒子宽高时，只是内容的宽高)</span><br><span class="hljs-comment"> border-box(padding和border不会撑大盒子-设置宽高时是内容+内边距+边框的宽度)</span><br><span class="hljs-comment">*/</span><br><span class="hljs-attribute">box-sizing</span>: content-box/border-box<br></code></pre></td></tr></table></figure></li></ul><h3 id="13-7-圆角边框和外轮廓"><a href="#13-7-圆角边框和外轮廓" class="headerlink" title="13.7 圆角边框和外轮廓"></a>13.7 圆角边框和外轮廓</h3><ul><li><strong>圆角边框</strong><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*简写属性：值(数值或百分比)越大，圆角越大</span><br><span class="hljs-comment">百分比相对于boder-box: content+padding+border */</span><br><span class="hljs-attribute">border-radius</span>: px/%; <br><span class="hljs-comment">/*单独设置某个角的值(开发不常见)*/</span><br><span class="hljs-attribute">border-top-left-radius</span> <br><br><span class="hljs-comment">/*一个参数，两个参数，三个参数，四个参数*/</span><br><span class="hljs-attribute">border-radius</span>: <span class="hljs-number">10px</span>;<br><span class="hljs-attribute">border-radius</span>: <span class="hljs-number">10px</span> <span class="hljs-number">20px</span> <span class="hljs-number">30px</span> <span class="hljs-number">40px</span>; <span class="hljs-comment">/*上右下左设置不同的圆角*/</span><br><br><span class="hljs-comment">/* 圆形盒子：正方形盒子，边长的一半/50% */</span><br><span class="hljs-attribute">border-radius</span>: <span class="hljs-number">50%</span>;  <span class="hljs-comment">/*如果写px，是整个box的边长，包括border、padding*/</span><br><span class="hljs-comment">/*距形盒子：高度height的一半 */</span><br></code></pre></td></tr></table></figure></li></ul><p>写法：参数值可以为数值或百分比(参照的是整个盒子百分比)</p><ul><li><strong>outline 外轮廓</strong></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*</span><br><span class="hljs-comment">outline表示元素的外轮廓，默认显示在border的外面</span><br><span class="hljs-comment">语法和border完全一样，属性有 outline-width/style/color</span><br><span class="hljs-comment">outline: 1px solid #f00</span><br><span class="hljs-comment">outline不占据空间</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">/* 去除a元素、input元素的focus轮廓效果，直接给a设置相当于把所有的状态都设置了：如link、hover...  */</span><br><span class="hljs-selector-tag">a</span>,<span class="hljs-selector-tag">input</span>,<span class="hljs-selector-tag">textarea</span> &#123;<br>    <span class="hljs-attribute">outline</span>: none;  <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="13-8-盒子阴影和文字阴影"><a href="#13-8-盒子阴影和文字阴影" class="headerlink" title="13.8 盒子阴影和文字阴影"></a>13.8 盒子阴影和文字阴影</h3><ul><li>在线调试盒子阴影网站：<a href="https://html-css-js.com/css/generator/box-shadow/">https://html-css-js.com/css/generator/box-shadow/</a></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*</span><br><span class="hljs-comment">参数说明：</span><br><span class="hljs-comment">h-shadow/v-shadow(必须) -水平x/垂直偏移y轴</span><br><span class="hljs-comment">blur radius-模糊半径-影子的虚实  </span><br><span class="hljs-comment">spread-延伸距离         </span><br><span class="hljs-comment">color-影子颜色 rgab(0,0,0,.3)一般用透明颜色（如果没有设置就跟随color属性的颜色）</span><br><span class="hljs-comment">inset-外阴影变成内阴影，默认外阴影（内阴影inset）</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-attribute">box-shadow</span>: h-shadow v-shadow [blur spread color inset]; <br></code></pre></td></tr></table></figure><p>注：默认外阴影(outset)不写，否则导致阴影无效<br>        阴影不会占用空间      </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*设置四周阴影*/</span><br><span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">10px</span> <span class="hljs-number">5px</span>; <span class="hljs-comment">/*依靠，模糊半径和延伸距离来设置四周阴影*/</span>、<br><br><span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">5px</span> <span class="hljs-number">5px</span> <span class="hljs-number">10px</span>, -<span class="hljs-number">5px</span> <span class="hljs-number">0px</span> <span class="hljs-number">10px</span>; <span class="hljs-comment">/*设置多个阴影，x方向正负都设置*/</span><br></code></pre></td></tr></table></figure><ul><li>文字阴影（了解）<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*</span><br><span class="hljs-comment">和box-shadow类似，用于给文字添加阴影效果</span><br><span class="hljs-comment">它没有spread和inset</span><br><span class="hljs-comment">*/</span><br><span class="hljs-attribute">text-shadow</span>: h-shadow v-shadow blur color<br></code></pre></td></tr></table></figure></li></ul><h2 id="13-CSS浮动"><a href="#13-CSS浮动" class="headerlink" title="13. CSS浮动"></a>13. CSS浮动</h2><h3 id="13-1-浮动的用法"><a href="#13-1-浮动的用法" class="headerlink" title="13.1 浮动的用法"></a>13.1 浮动的用法</h3><p>传统网页布局的三种方式： 普通流(标准流) 浮动 定位</p><p>（1）浮动定义</p><div class="code-wrapper"><pre><code class="hljs">float属性用于创建浮动框，将其移动到一边，直到左边缘或右边缘触及包含块或另一个浮动框的边缘</code></pre></div><p>（2）浮动作用</p><div class="code-wrapper"><pre><code class="hljs">浮动可以让多个块级盒子一行没有缝隙排列显示经常用于横向排列盒子</code></pre></div><p>（3）语法</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">float</span>: left/right/none;  //左浮右浮不浮动(默认) <br></code></pre></td></tr></table></figure><p>（4）<strong>浮动的特性（重难点)</strong></p><p>脱标(不占有位置) 浮起来盖住其他盒子</p><p>一行内没有缝隙显示并且元素顶部对齐</p><p>父盒子装不下会再起一行显示,具有行内块元素的特征    </p><p>（5）<strong>用法</strong></p><p>浮动元素经常搭配标准流的父元素</p><p>用标准流的父元素排列上下位置,子元素采用浮动排列左右位置</p><h3 id="13-2-浮动的清除"><a href="#13-2-浮动的清除" class="headerlink" title="13.2 浮动的清除"></a>13.2 浮动的清除</h3><p>（1）浮动产生的影响</p><p>当一个盒子有很多个浮动子盒子时，不方便给父盒子高度，但子盒子浮动不占位置</p><p>最后父级盒子高度为0，就会影响下面的标准流盒子。</p><p>（2）解决方法</p>   <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">选择器&#123;<span class="hljs-attribute">clear</span><span class="hljs-selector-pseudo">:left</span>/<span class="hljs-attribute">right</span>/both;&#125;   //清除左/右/两侧浮动<br></code></pre></td></tr></table></figure><p>具体方法：</p><ol><li><p>额外标签法/隔墙法-不推荐</p><p>在浮动父元素末尾添加一个块级空标签，如div </p></li><li><p>父级添加overflow: hidden属性</p><div class="code-wrapper"><pre><code class="hljs"> 优点：代码简介 缺点：无法显示溢出部分   </code></pre></div></li><li><p>父级添加after伪元素 </p></li><li><p>父级添加双伪元素   </p><p> ​                        </p></li></ol><h2 id="14-CSS定位"><a href="#14-CSS定位" class="headerlink" title="14. CSS定位"></a>14. CSS定位</h2><h3 id="14-1-定位介绍"><a href="#14-1-定位介绍" class="headerlink" title="14.1 定位介绍"></a>14.1 定位介绍</h3><ul><li><p>normal flow标准流</p><ul><li>默认情况下，元素都是按照normal flow来排布的：从左到右，从上到下</li><li>默认情况下，元素之间不会存在层叠现象（除了设置margin负值）</li><li>margin、padding可以来调整元素位置，但是会对其后的元素照成影响</li><li>我们需要将元素放到祖先元素/视口的某个位置，又不影响normal flow中其他元素的布局，有了定位</li></ul></li><li><p>认识定位</p><ul><li><p>从标准流中取出元素，让它们具有不同的行为，如：固定在某个位置…</p></li><li><p>组成：定位=定位模式+边偏移   </p><ul><li><p>定位模式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*静态(默认)/相对/绝对/固定/黏性定位*/</span><br><span class="hljs-attribute">position</span>: static/relative/absolute/fixed/sticky<br></code></pre></td></tr></table></figure></li><li><p>边偏移</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">top</span>/<span class="hljs-attribute">bottom</span>/<span class="hljs-attribute">left</span>/<span class="hljs-attribute">right</span>: px  /*定位的盒子移动到最终位置*/<br></code></pre></td></tr></table></figure></li></ul></li></ul></li></ul><p><strong>注意：</strong>不同的定位参照点不一样</p><h3 id="14-2-各种定位用法"><a href="#14-2-各种定位用法" class="headerlink" title="14.2 各种定位用法"></a>14.2 各种定位用法</h3><p><strong>（1）relative相对定位（重要）</strong></p><ul><li><p>语法：position: relative;  </p></li><li><p>相对于它原来位置()</p></li><li><p>特点：边偏移是参照自己原来位置自恋型，不脱标（继续保留原来位置）</p></li><li><p>应用：</p><ul><li><p>用来微调某些元素</p></li><li><p>给绝对定位当爹（限制绝对定位）</p></li></ul></li></ul><p><strong>（2）absolute绝对定位（重要）</strong></p><ul><li><p>语法：position: absolute;  </p></li><li><p>特点</p><ul><li><p>绝对定位不再占有原位置（脱标）</p></li><li><p>以最近一级的有定位祖先元素为参考点移动位置((拼爹型) ，没有则以浏览器</p></li></ul></li><li><p>子绝父相</p><ul><li>父级需占有位置-相对的/子盒子不需占有位置-绝对的  </li><li>注意：不全是子绝父相，不要把结论记死了</li></ul></li></ul><p><strong>（3）Fixed固定定位（重要）</strong></p><ul><li><p>语法：position: fixed; </p></li><li><p>特点：</p><ul><li><p>元素固定于浏览器可视区的位置</p></li><li><p>以浏览器的可视窗口（视口）为参照点移动元素</p></li><li><p>不占有原先位置(脱标-可以看做特殊的绝对定位) </p></li></ul></li><li><p>画布(canvas)和视口(viewport)</p><ul><li>画布是整个网页，包含滚动的部分</li><li>视口是网页的可视区域，不包含滚动的部分</li><li>画布&gt;=视口</li></ul></li><li><p>使用场景：滚动时元素的位置不会改变。</p></li></ul><p><strong>（4）粘性定位</strong></p><ul><li>可以看做是相对定位和固定定位的结合体</li><li>它允许被定位元素表现得像相对定位一样，直到滚动到某个阈值点变成固定定位</li><li>相对于最近的滚动祖先元素的滚动视口的</li><li>粘性定位占有原先位置（相对定位特点）</li><li>例如：<ul><li>语法：position: sticky; top:10px      //—当元素距顶部10px变成固定定位</li></ul></li></ul><p>注意：必须添加top、bottom、left、right其中一个才生效</p><p>缺点：兼容性较差（一般用js实现粘性定位效果）</p><h3 id="14-3-设置absolute-fixed元素的特点"><a href="#14-3-设置absolute-fixed元素的特点" class="headerlink" title="14.3 设置absolute/fixed元素的特点"></a>14.3 设置absolute/fixed元素的特点</h3><ul><li><p>可随意设置宽高</p><ul><li>如果没有设置宽高，宽高默认由内容决定</li></ul></li><li><p>脱离标准流</p><ul><li>不再严格按照从上到下、从左到右排布</li><li>不再严格区分 block、inline、inline-block</li><li>脱标元素内部还是按照标准流排布</li></ul></li><li><p>不再向父元素汇报宽高</p></li><li><p><strong>对于绝对定位元素（重要）</strong></p><ul><li><p>定位参照对象宽度=left+right+margin-left+margin-right+定位元素实际所占宽度</p></li><li><p>定位参照对象高度=top+bottom+margin-top+margin-bottom+定位元素实际所占高度</p></li><li><p><strong>居中实现</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*应用一：居中显示</span><br><span class="hljs-comment">当我们设置left、right、top、bottom为0，给定宽高，设置margin是auto，实现居中</span><br><span class="hljs-comment">原理：根据以上公式-当我们设置偏移量为0，且给定宽高，那剩下的只有margin，将margin设置auto则居中</span><br><span class="hljs-comment">*/</span><br><span class="hljs-selector-class">.box</span>&#123;<br>      <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;<br>      <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#f00</span>;<br>      <span class="hljs-attribute">position</span>: relative;<br>    &#125;<br><span class="hljs-selector-class">.son</span>&#123;<br>      <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>      <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>      <span class="hljs-attribute">background-color</span>: pink;<br>      <span class="hljs-attribute">position</span>: absolute;<br>      <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;<br>      <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;<br>      <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;<br>      <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;<br>      <span class="hljs-attribute">margin</span>: auto;<br>&#125;<br><br><span class="hljs-comment">/*应用二：子盒子铺满父盒子显示</span><br><span class="hljs-comment">设置偏移量、margin为0，width/height默认是auto由浏览器绝定，所以会铺满整个屏幕</span><br><span class="hljs-comment">*/</span><br><span class="hljs-selector-class">.son</span>&#123;<br>      <span class="hljs-attribute">background-color</span>: pink;<br>      <span class="hljs-attribute">position</span>: absolute;<br>      <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;<br>      <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;<br>      <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;<br>      <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;<br>      <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h3 id="14-4-z-index"><a href="#14-4-z-index" class="headerlink" title="14.4 z-index"></a>14.4 z-index</h3><ul><li>设置定位叠放（层叠）顺序，仅对定位元素有效</li><li>z-index可以为：正数、负数、0（默认）</li><li>比较原则<ul><li>兄弟关系<ul><li>z-index越大，层叠在越上面</li><li>z-index相等，写在后面的元素层叠在上面</li></ul></li><li>不是兄弟关系<ul><li>各自从元素自己以及祖先元素中，找出最临近的2个定位元素进行比较</li><li>这2个定位元素必须有设置z-index的具体数值</li></ul></li></ul></li></ul><h3 id="14-5-定位的拓展"><a href="#14-5-定位的拓展" class="headerlink" title="14.5 定位的拓展"></a>14.5 定位的拓展</h3><ul><li><strong>绝对定位盒子居中算法：</strong></li></ul><p>产生原因：加了绝对定位的盒子不能通过margin: 0 auto水平居中</p><p>​                   相对定位可以（它没有脱离标准流）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css">//水平居中<br><span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>  //父级盒子宽度的一半<br>margin-left: -px  //负值，定位盒子宽度<span class="hljs-number">50%</span><br>//垂直居中<br>top：<span class="hljs-number">50%</span>;<br><span class="hljs-attribute">margin-top</span>: -px<br></code></pre></td></tr></table></figure><ul><li><p><strong>定位特殊性</strong></p><p>  绝对定位和固定定位和浮动类似</p><p>  行内元素添加绝对或者固定定位，可以直接设置高度和宽度</p><p>  块级元素添加绝对或者固定定位，宽度高度默认是内容大小</p></li><li><p><strong>脱标的盒子不会触发外边距塌陷</strong></p><p>  浮动元素、绝对定位（固定定位）元素都不会触发外边距合并问题</p></li><li><p><strong>绝对定位（固定定位）会压住盒子</strong></p><p>  浮动元素不同，只会压住它下面的标准流盒子</p><p>  但是不会压住下面标准流盒子里的文字（图片）</p><p>  但是绝对定位（固定定位）会压住下面标准流盒子的全部内容</p><p>  浮动压不住文字原因：</p><div class="code-wrapper"><pre><code class="hljs">  浮动最初目的是用来做文字环绕效果的，所以文字会围绕浮动元素。</code></pre></div></li></ul><h1 id="CSS3新特性"><a href="#CSS3新特性" class="headerlink" title="CSS3新特性"></a>CSS3新特性</h1><p>新增选择器/盒子模型以及其他特征(IE9+支持) </p><h2 id="1-CSS3盒子模型border-box"><a href="#1-CSS3盒子模型border-box" class="headerlink" title="1. CSS3盒子模型border-box"></a>1. CSS3盒子模型border-box</h2><p>box-sizing: content-box/border-box</p><p>content-box===width+padding+border(默认)</p><p> border-box ===width(padding和border不会撑大盒子)</p><p>*{ padding: 0;margin: 0;box-sizing: border-box; }</p><h2 id="2-其他特性（了解）"><a href="#2-其他特性（了解）" class="headerlink" title="2. 其他特性（了解）"></a>2. 其他特性（了解）</h2><p>  <strong>图片变模糊</strong></p><div class="code-wrapper"><pre><code class="hljs">滤镜filter -可以将图片模糊或颜色偏移-filter: 函数()  如：filter: blur(5px); //数值越大越模糊</code></pre></div><p>   <strong>计算盒子宽度width: calc函数</strong></p><div class="code-wrapper"><pre><code class="hljs">-calc()此CSS函数让你在声明CSS属性值时执行一些计算-width: calc(100% - 80px);  +-*/中间用空格隔开</code></pre></div><h2 id="3-CSS3过渡（重点）"><a href="#3-CSS3过渡（重点）" class="headerlink" title="3. CSS3过渡（重点）"></a>3. CSS3过渡（重点）</h2><p>  <strong>transition(过渡)</strong></p><p>   -从一个状态渐渐的过渡到</p><p>另一个状态(常和hover一起搭配)</p><p>   -transition: 要过渡的属性 花费时间 运动曲线 何时开始;</p><p>   -过渡属性: 宽度高度/背景颜色/内外边距都可 all(所有)</p><p>   -时间: s(必须)  运动曲线: 默认ease(可省)  何时开始: s (可省)</p><p>  口诀：谁做过渡给谁加</p><p>   -多个属性可用逗号进行分割(all) 如: transition: width 2s,height 2s;</p><p>注：使用transition必须写初始状态否则不起作用，即使是left也要写left: 0;</p><div class="code-wrapper"><pre><code class="hljs">                              -2020.9.26</code></pre></div><h2 id="4-2D转换"><a href="#4-2D转换" class="headerlink" title="4. 2D转换"></a>4. 2D转换</h2><p>转换(transform)</p><p> -移动(translate)/旋转(rotate)/缩放(scale)</p><p><strong>移动translate</strong>   </p><p>-可以改变元素位置，类似定位，移动位置还有margin</p><p>   -transform: translate(x,y);  x,y的坐标，单位px或百分比</p><div class="code-wrapper"><pre><code class="hljs">transform: translateX(n);/translateY(n);  只移动x/y    </code></pre></div><p>   -优点：不会影响到其他元素(类似相对定位)</p><p>   -注：translate中百分比单位是相对于自身元素的,行内元素不起作用</p><p>   <strong>应用-盒子水平垂直居中</strong>：</p><div class="code-wrapper"><pre><code class="hljs">position: absolute;  加定位，父元素加相对定位left: 50%; top: 50%; transform(translate(-50%,-50%))</code></pre></div><p> <strong>旋转rotate</strong></p><p>-二维平面顺时针或逆时针旋转</p><p>-语法：transform: rotate(度数) </p><div class="code-wrapper"><pre><code class="hljs">-重点：单位deg,角度正-顺时针转, 角度负-逆时针转       -旋转中心点：transform-origin: x y; 默认(50% 50%)可以设置百分比/像素px/方位名词(top bottom left right center)</code></pre></div><p>  <strong>缩放scale</strong></p><div class="code-wrapper"><pre><code class="hljs">-控制放大和缩小-语法：transform: scale(x,y);  x,y修改的宽和高-倍数  -注意：参数不跟单位-倍数,小于1就是缩放(可小数)   若只有一个参数则宽高同时修改n倍-优点：不会影响其他盒子，且可以设置缩放中心点transform-origin   (原来的直接改变宽高会影响其他盒子)</code></pre></div><p>  <strong>2D转换综合写法</strong></p><div class="code-wrapper"><pre><code class="hljs">-transform: translate() rotate() scale();  空格隔开</code></pre></div><p>   -顺序会影响转换效果，当有位移和其他属性时，必须把位移放到最前</p><h2 id="5-动画animation"><a href="#5-动画animation" class="headerlink" title="5. 动画animation"></a>5. 动画animation</h2><p>-相比于过渡，动画可以实现更多变化，控制，连续自动播放等效果</p><p>-基本使用：定义动画=&gt;使用(调用)动画</p><ol><li>定义动画-@keyframes</li></ol><p>  @keyframes 动画名称{</p><p> 0%{ width: 100px;}</p><p>  100%{ height: 100px;}}  </p><p>0%/100%叫动画序列，也可用from/to</p><p>可以改变任意多的样式和次数</p><ol start="2"><li>使用动画</li></ol><p> animation-name: 动画名称  animation-duration: 持续时间</p><div class="code-wrapper"><pre><code class="hljs"> (这两个必须同时使用才生效)</code></pre></div><p>  <strong>可以做多个状态的变化</strong></p><div class="code-wrapper"><pre><code class="hljs">有几个状态变化可分几个百分比，自动根据百分比分配时间</code></pre></div><p>如：@keyframes move{0%{…}25%{…}50%{…}75%{…}100%{…}}</p><div class="code-wrapper"><pre><code class="hljs">其中0%可写也可不写也可为空</code></pre></div><p>  <strong>动画常见属性</strong></p><div class="code-wrapper"><pre><code class="hljs">@keyframes/animation 规定动画  简写属性(除了animation-play-state)  animation-name/animation-duration/animation-timing-function</code></pre></div><p>动画名称(必须)/持续时间(必须) s或ms/运动曲线，默认ease</p><p>animation-delay/animation-iteration-count</p><p>规定动画何时开始(默认0s)  播放次数(默认1,infinite-无限次)</p><div class="code-wrapper"><pre><code class="hljs">animation-direction /animation-fill-mode/ animation-play-state</code></pre></div><p>是否逆向播放alternate逆播放，默认normal</p><div class="code-wrapper"><pre><code class="hljs">动画结束状态  保持forwards 回到初始backwards(默认)鼠标放上去是否停止-默认running ,pause(加在hover)</code></pre></div><p>  <strong>动画属性简写</strong></p><p>   animation: 名称 持续时间 运动曲线 何时开始 播放次数 是否逆向 起始结束状态  </p><p>   （前面两个一定要写）                 2020.9.27                                 </p><p>  -速度曲线细节 </p><p>animation-timing-function: 规定动画运动曲线，默认ease</p><div class="code-wrapper"><pre><code class="hljs">ease/linear  动画低速开始-然后加快-结束时变慢/匀速    </code></pre></div><p>ease-in/ease-out/ease-in-out 低速开始/低速结束/低速开始和结束  </p><div class="code-wrapper"><pre><code class="hljs">steps()  时间函数中的间隔数量步长-动画需要多少步完成</code></pre></div><p>​      </p><h2 id="6-3D"><a href="#6-3D" class="headerlink" title="6. 3D"></a>6. 3D</h2><div class="code-wrapper"><pre><code class="hljs">***\*三维坐标系\****：   x轴-右正左负/y轴-下正上负/z轴-往外正往里负       主要知识点：   3D位移：translate3d(x,y,z)  3D旋转：rotate3d(x,y,z)   3D呈现：transform-style  透视： perspective     **3D位移(移动)：**  transform: translateX(100px)/translateY()/ translateZ() 仅在x/y/z轴移动   综合：transform: translateX() translateY() translateZ();     transform: translate3d(x,y,z) 简写方式(x,y,z不能省略，没有用0表示)**透视 perspective**-透视写在被观察元素的父盒子上,单位是像素px     -透视也称为视距，是模拟眼睛到屏幕的距离，数值越小，看到的越大     -z轴是物体距屏幕的距离，z轴越大，看到的物体越大**3D旋转rotate3d** transform: rotateX(45deg)/ rotateY(45deg)/rotateZ(45deg)  </code></pre></div><p>x/y/z轴正方向旋转45</p><div class="code-wrapper"><pre><code class="hljs"> 综合: transform: rotate3d(x,y,z,45deg) 自定义轴旋转（了解） 左手定则-判断x，y，z正方向-大拇指值正方向，四指弯曲是正方向**3D呈现 transform-style(重要)** transform-style: preserve-3d 开启立体空间(默认flat不开启) -控制子元素是否开启三维立体环境(代码给父级,影响的是子盒子)  </code></pre></div><h1 id="CSS布局相关"><a href="#CSS布局相关" class="headerlink" title="CSS布局相关"></a>CSS布局相关</h1><h2 id="1-flex伸缩布局-弹性布局"><a href="#1-flex伸缩布局-弹性布局" class="headerlink" title="1. flex伸缩布局(弹性布局)"></a>1. flex伸缩布局(弹性布局)</h2><p> display: flex  给父盒子添加flex属性，来控制子盒子的位置和排列方式</p><p>伸缩容器-设置display: flex的元素  伸缩项-伸缩容器子元素</p><p>主轴-默认水平方向 伸缩容器最左端-&gt;最右    </p><p>侧轴-默认垂直方向 伸缩容器最顶部-&gt;最底部</p><p> <strong>flex-direction</strong>(主轴方向)</p><p>flex-direction: row/row-reverse/column/column-reverse</p><p>主轴左起点(默认)/右起点/顶部/底部</p><p>注意：主轴侧轴始终十字交叉(主轴改为垂直,那么侧轴变为水平)</p><p> <strong>justify-content</strong>(主轴对齐方式)</p><p>   justify-content: flex-start/flex-end/center/space-between/space-around</p><p>   与主轴起点对齐(默认)/终点对齐/中间对齐/两端对齐/环绕对齐</p><p> <strong>align-items/align-self</strong>(侧轴对齐方式)</p><p>   align-items: flex-start/flex-end/center/baseline/stretch</p><p>   与主轴起点对齐(默认)/终点对齐/中间/基线对齐/拉伸对齐(拉伸为侧轴高度)</p><p>注意: 设置拉伸对齐,伸缩项不能设置高度,否则会失效</p><p>align-self:flex-start/flex-end…  //取值一样,控制某个伸缩项,写到伸缩项中</p><p> <strong>flex-wrap/align-content</strong>(换行和换行对齐)</p><p>   默认情况伸缩容器不会换行,放不下会等比压缩伸缩项</p><p>   flex-wrap: nowrap/wrap/wrap-reverse  不换行(默认)/换行/换行反转  </p><p>  换行对齐  只有伸缩项发生换行这个属性才有效</p><p>   align-content: flex-start/end-start/center/space-between/space-around</p><p> 侧轴起点对齐/终点对齐/居中/两端对齐/环绕对齐</p><p> 注意：默认拉伸对齐-stretch</p><p><strong>order</strong>(伸缩项排序)</p><p>   添加给伸缩项,每一个伸缩项都有一个order属性-默认为0</p><p>   order: 0;  //从小到大,数字越大排在越后面,可以为负</p><p><strong>flew-grow</strong>(伸缩项扩充)</p><p>  flew-grow: 0;  //默认为0-不需扩充,值越大所占份数越多</p><p>  //用于使伸缩项宽度总和填满整个伸缩容器</p><p>  注意: 当所有伸缩项宽度总和小于伸缩容器宽度时才有效</p><p><strong>flex-shrink</strong>(伸缩项缩小)</p><p>  当伸缩项宽度和&gt;伸缩容器宽度,默认不换行,会等比缩放伸缩容器</p><p>  flex-shrink: 1;  //默认是1  0-超出伸缩容器也不缩小</p><p>   注意: 当所有伸缩项宽度总和大于伸缩容器宽度时才有效  </p><p> *伸缩项扩充缩小注意点</p><p>   没有指定/flex-grow:0;  不会被扩充</p><p>   flex-shrink: 0;  当前伸缩项不会被缩小</p><p>   扩充和缩小可以是高度或宽度,由主轴决定的,扩充缩小的是主轴上的</p><p> <strong>flex-basis</strong>(伸缩项宽度设置)</p><p>   flex-basis: px  //设置伸缩项的宽度,伸缩布局中才有用,默认auto</p><p>   通过flex-basis设置了宽度,width就无效</p><p> <strong>flex</strong>(伸缩项属性连写)</p><p>   flex: 扩充 缩小 宽度;  默认：flex: 0,1,auto  flex: 1===flex: 1,1,0</p><h2 id="2-圣杯布局和双飞翼布局"><a href="#2-圣杯布局和双飞翼布局" class="headerlink" title="2. 圣杯布局和双飞翼布局"></a>2. 圣杯布局和双飞翼布局</h2><p>  两边宽度不变,中间自适应的三栏布局</p><p> *圣杯布局</p><p>搞一个容器,里面放三个盒子</p><p>设置两侧盒子宽度(固定)</p><p>设置中间盒子宽度等于容器的宽度(100%)</p><p>设置容器的左右padding等于两侧盒子的宽度 padding: 0 px;</p><p>三个盒子都在同一方向上浮动 </p><p>设置左边盒子margin-left: -100%  通过定位调整位置使其不盖住中间区域</p><p>设置右边盒子margin-left: -px   通过定位调整位置使其不盖住中间区域</p><p>给容器设置最小宽度,防止缩小变形  min-width: px;</p><p> *双飞翼布局</p><h2 id="3-响应式布局-媒体查询"><a href="#3-响应式布局-媒体查询" class="headerlink" title="3. 响应式布局(媒体查询)"></a>3. 响应式布局(媒体查询)</h2><p> 媒体查询：</p><p>响应式网页-不同的设备上呈现出不同样式</p><p>css3新增媒体查询-获取宽度后,根据不同浏览器的宽度设置不同的样式</p><p>注意点：不适合比较复杂的网页</p><p> 基本使用：</p><p>内联格式 </p><p>@media 条件{}   //如果条件满足就执行{}代码</p><p>  条件screen and (min-width/max-width: px){}  //screen代表电脑/手机/平板屏幕</p><p>外链格式(推荐)  </p><p>link标签新增media=”条件” //只有满足条件才会执行css文件 </p><p>  注意：给电脑平板和手机设置样式,顺序是电脑&gt;平板&gt;手机</p><p> 编写响应式网站步骤: 编写pc样式=&gt;编写平板样式,通过相同选择器覆盖不同样式</p><div class="code-wrapper"><pre><code class="hljs">       =&gt;编写手机样式,通过相同选择器覆盖不同样式</code></pre></div><h1 id="CSS补充知识"><a href="#CSS补充知识" class="headerlink" title="CSS补充知识"></a>CSS补充知识</h1><h2 id="1-link元素"><a href="#1-link元素" class="headerlink" title="1. link元素"></a>1. link元素</h2><ul><li><p>link是外部资源链接元素，放在head中用来引用外部资源</p></li><li><p>常用于</p><ul><li>链接样式表css</li><li>创建站点图标icon</li></ul></li><li><p>常见属性</p><ul><li><p>href：被链接资源的URL</p></li><li><p>rel：链接类型</p><ul><li><p>文档：<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Link_types">https://developer.mozilla.org/zh-CN/docs/Web/HTML/Link_types</a></p></li><li><p>常见链接类型有：icon、stylesheet</p></li><li><p>不常用的：dns-prefetch 提前解析DNS，性能优化</p></li></ul></li></ul></li></ul><h2 id="2-计算机的进制"><a href="#2-计算机的进制" class="headerlink" title="2. 计算机的进制"></a>2. 计算机的进制</h2><ul><li>定义<ul><li>进位制是一种计数方式</li><li>通俗讲：当数字达到某个值时，进一位（比如从1位变成2位）</li></ul></li><li>常用的进制<ul><li>最常用的十进制就是满10进一位（因为人类有十根手指，所以流行十进制）</li><li>其他的还有：二进制、八进制、十六进制</li></ul></li><li>计算机中的进制<ul><li>计算机中使用二进制0、1</li><li>各个进制的表示方法<ul><li>二进制(binary)：0b开头：0、1组成</li><li>八进制(Octonary)：0o开头：0~7组成</li><li>十六进制(hexadecimal)：0x开头：0<del>9、a</del>f组成（大小都可）</li></ul></li><li>进制转换略…</li></ul></li></ul><h2 id="3-CSS颜色表示"><a href="#3-CSS颜色表示" class="headerlink" title="3. CSS颜色表示"></a>3. CSS颜色表示</h2><ul><li><strong>颜色关键字</strong>表示(只提供了上百种基本颜色的关键字)</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">color</span>: red<br></code></pre></td></tr></table></figure><ul><li><strong>RGB颜色</strong><ul><li>一种通过 R-red、G-green、B-blue三原色不同占比 来组成不同颜色的色彩空间</li><li>三种方式<ul><li>函数式：rgb()、rgba()  </li><li>十六进制：#RRGGBB[AA]</li><li>十六进制省略写法：#RGB[A]</li></ul></li><li>注意：推荐如果用透明度使用rgba()函数的写法，十六进制的写法透明度部分浏览器可能不支持</li></ul></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">color</span>: rgb[a](R,G,B[,A]);  //十进制<span class="hljs-number">0</span>~<span class="hljs-number">255</span> 或 百分数<span class="hljs-number">0%</span>~<span class="hljs-number">100%</span><br><span class="hljs-attribute">color</span>: #RRGGBB[AA]  //十六进制大小写都可 <span class="hljs-number">00</span>~ff<br>color: #RGB[A]  //十六进制 <span class="hljs-number">0</span>~f（这种写法只有RGB都要两两相同才能省略写成这样）<br><br>//尽量使用rgb代替rrggbb，可以缩小css体积，加快网页响应速度<br>//#rrggbb<br>color: <span class="hljs-number">#ff0000</span><br>//#rgb<br>color：<span class="hljs-number">#f00</span><br><br>//十六进制表示，每两位(<span class="hljs-number">00</span>-ff)代表rgb的一个参数<br>//以下三种方法表示的是一个颜色<br>color: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">0</span>,<span class="hljs-number">255</span>,<span class="hljs-number">0</span>)<br>color：<span class="hljs-number">#00ff00</span>;  //转成<span class="hljs-number">16</span>进制写法<br><span class="hljs-attribute">color</span>: <span class="hljs-number">#0f0</span>;<br></code></pre></td></tr></table></figure><p>red/green/blue：0-255(十进制)    00-ff(十六进制)  </p><ul><li><strong>RGBA颜色</strong><ul><li>上面的三种方式皆可添加透明度，以下只示范函数式的</li></ul></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">color</span>: <span class="hljs-built_in">rgba</span>(red,green,blue,alpha)  /*最后一个参数是alpha透明度，取值范围在<span class="hljs-number">0</span>-<span class="hljs-number">1</span>之间  可省略<span class="hljs-number">0</span>.*/<br></code></pre></td></tr></table></figure><p>​                                                                                                                                                    </p><h2 id="4-Chrome调试工具"><a href="#4-Chrome调试工具" class="headerlink" title="4. Chrome调试工具"></a>4. Chrome调试工具</h2><ul><li>打开浏览器开发工具<ul><li>右键检查（这种方式在某个元素上右键检查会直接定位到某个Element的代码）</li><li>F12</li></ul></li><li>其他技巧<ul><li>ctrl + 或者 ctrl 鼠标滚轮 可以调整页面或调试工具字体大小(光标得在调试工具上)</li><li>可以通过删除某些元素来查看网络结构<ul><li>选中Elements中某个html代码，删除即可</li></ul></li><li>可以通过增删改css来调试网页样式<ul><li>在调试工具的右边Styles中增删改</li></ul></li></ul></li></ul><h2 id="5-浏览器渲染流程"><a href="#5-浏览器渲染流程" class="headerlink" title="5. 浏览器渲染流程"></a>5. 浏览器渲染流程</h2><p>主线程：Load HTML =&gt; Parse HTML =&gt; 遇到head中的link元素链接的css =&gt; 线程一执行</p><p>线程一： =&gt; Load CSS =&gt; Parse CSS =&gt;如果DOM Tree完成则直接Attach否则等待</p><p>主线程：=&gt; 继续Parse HTML =&gt; <strong>Create DOM Tree</strong> =&gt;等待线程一的CSS解析完…</p><div class="code-wrapper"><pre><code class="hljs">           =&gt; Attach style to DOM nodes =&gt; **Render Tree** =&gt; Display</code></pre></div><h2 id="6-水平居中"><a href="#6-水平居中" class="headerlink" title="6. 水平居中"></a>6. 水平居中</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*</span><br><span class="hljs-comment">行内元素居中(包括行内替换和非替换元素)</span><br><span class="hljs-comment">需要加在父元素上</span><br><span class="hljs-comment">*/</span><br><span class="hljs-attribute">text-align</span>: center;  <br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">块级元素水平居中</span><br><span class="hljs-comment">谁需要居中加在谁上</span><br><span class="hljs-comment">居中原理：auto会平分剩余空间：margin-left/margin-right平分水平方向剩余空间，所以水平居中</span><br><span class="hljs-comment">注意：auto不适用于垂直居中</span><br><span class="hljs-comment">*/</span><br><span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto; <br></code></pre></td></tr></table></figure><h2 id="7-border图形"><a href="#7-border图形" class="headerlink" title="7. border图形"></a>7. border图形</h2><ul><li>用border绘制出各种图形，如：三角、梯形、矩形</li><li>三角实现原理<ul><li>让四个角的border撑起整个盒子，再设置我们需要的那个方向的盒子颜色即可</li></ul></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*方式一： 让border撑大盒子*/</span><br><span class="hljs-selector-tag">div</span>&#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">10px</span> solid transparent;<br><span class="hljs-attribute">border-left-color</span>: pink;<br>&#125;<br><span class="hljs-comment">/*方式二： 设置border-box*/</span><br><span class="hljs-selector-class">.box</span>&#123;<br>      <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>      <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>      <span class="hljs-attribute">box-sizing</span>: border-box;<br>      <span class="hljs-attribute">border</span>: <span class="hljs-number">50px</span> solid transparent;<br>      <span class="hljs-attribute">border-top-color</span>:pink;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>图形示例：<a href="https://css-tricks.com/the-shapes-of-css/#top-of-size">https://css-tricks.com/the-shapes-of-css/#top-of-size</a></li></ul><h2 id="8-Web网络字体"><a href="#8-Web网络字体" class="headerlink" title="8. Web网络字体"></a>8. Web网络字体</h2><ul><li><p>由来</p><ul><li>我们使用font-family来设置字体系列时，默认会查找操作系统中已下载的字体</li><li>但是user的操作系统中字体是有限的，不能做一些定制化的需求</li><li>所以我们可以使用网络字体 Web Fonts</li></ul></li><li><p>Web Fonts工作原理 </p><ul><li><p>开发者</p><ul><li><p>获取字体 =&gt; CSS中使用字体 </p></li><li><p>部署静态资源时，将 HTML、CSS、JS、Font一起部署在静态服务器中</p></li></ul></li><li><p>User角度</p><ul><li>浏览网页时，因为代码中有引入Font文件，文件就会被一起下载下来</li><li>浏览器会根据使用的字体，在下载的Font文件中查找、解析、使用字体，显示在页面上</li></ul></li></ul></li><li><p>使用流程</p><ul><li><p>下载字体文件：<a href="https://www.fonts.net.cn/fonts-zh-1.html">https://www.fonts.net.cn/fonts-zh-1.html</a></p><ul><li>默认下载解压后是ttf文件</li></ul></li><li><p>使用字体</p><ul><li>将字体放到对应文件夹Fonts</li><li>通过@font-face引入字体，设置字体名</li><li>通过字体名使用字体</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@font-face</span> &#123;<br>  <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&quot;web-font&quot;</span>;<br>  <span class="hljs-attribute">src</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&quot;Fonts/font1.ttf&quot;</span>);<br>  <span class="hljs-attribute">font-weight</span>:<span class="hljs-number">400</span>;<br>  <span class="hljs-attribute">font-style</span>: normal;<br>&#125;<br><span class="hljs-selector-tag">div</span>&#123;<br>  <span class="hljs-attribute">font</span>: <span class="hljs-number">20px</span> <span class="hljs-string">&quot;web-font&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>Web-fonts兼容性</p><ul><li><p>我们使用的是.ttf字体文件，有的浏览器可能会不兼容</p></li><li><p>使用网站生成其他格式的字体文件：<a href="https://font.qqe2.com/">https://font.qqe2.com/</a></p></li><li><p>兼容性写法</p><ul><li><p>引入解压后的各种字体文件</p></li><li><p>复制icon.css中兼容性写法，注意修改其中字体url路径</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*format用于帮助浏览器快速识别字体格式*/</span><br><span class="hljs-keyword">@font-face</span> &#123;<br>    <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&quot;HGGTZH_VF&quot;</span>;<br>    <span class="hljs-attribute">src</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&quot;HGGTZH_VF.eot&quot;</span>); <span class="hljs-comment">/* IE9 */</span><br>    <span class="hljs-attribute">src</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&quot;HGGTZH_VF.eot?#iefix&quot;</span>) <span class="hljs-built_in">format</span>(<span class="hljs-string">&quot;embedded-opentype&quot;</span>), /* IE6-IE8 */<br>    <span class="hljs-built_in">url</span>(<span class="hljs-string">&quot;HGGTZH_VF.woff&quot;</span>) <span class="hljs-built_in">format</span>(<span class="hljs-string">&quot;woff&quot;</span>), /* chrome、firefox */<br>    <span class="hljs-built_in">url</span>(<span class="hljs-string">&quot;HGGTZH_VF.ttf&quot;</span>) <span class="hljs-built_in">format</span>(<span class="hljs-string">&quot;truetype&quot;</span>), /* chrome、firefox、opera、Safari, Android, iOS <span class="hljs-number">4.2</span>+ */<br>    <span class="hljs-built_in">url</span>(<span class="hljs-string">&quot;HGGTZH_VF.svg#uxfonteditor&quot;</span>) <span class="hljs-built_in">format</span>(<span class="hljs-string">&quot;svg&quot;</span>); <span class="hljs-comment">/* iOS 4.1- */</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h2 id="9-Web字体图标"><a href="#9-Web字体图标" class="headerlink" title="9. Web字体图标"></a>9. Web字体图标</h2><ul><li><p>Iconfont由来</p><ul><li><p>字体可以设计成各种样式的，所以也可以把字体用来设计图标</p></li><li><p>精灵图缺点：文件大,一旦制作更换非常复杂,放大缩小会失真</p><p>字体图标解决了问题, 展示的是图标，本质属于字体</p></li></ul></li><li><p>好处</p><ul><li>放大不失真、用到多个图标时体积小、可以任意切换颜色</li></ul></li><li><p>使用场景</p><ul><li>显示网页中通用的、常用的一些小图标   </li><li>结构和样式比较简单的小图标，用字体图标</li></ul></li><li><p>使用</p><ul><li><p> 国外<a href="https://icomoon.io/">https://icomoon.io/</a>   阿里<a href="https://www.iconfont.cn/">https://www.iconfont.cn/</a></p></li><li><p>使用步骤（也可根据下载文件中的html步骤来做）</p><ul><li><p>将图标加入购物车 =&gt; 下载代码</p></li><li><p>方法一：使用Unicode字符实体</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@font-face</span> &#123;<br>      <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&quot;font1&quot;</span>;<br>      <span class="hljs-attribute">src</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&quot;Fonts/iconfont.ttf&quot;</span>);<br>    &#125;<br>    <span class="hljs-selector-class">.fonticon1</span>&#123;<br>      <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&quot;font1&quot;</span>;<br>    &#125;<br>&lt;<span class="hljs-selector-tag">i</span> class=&quot;fonticon1&quot;&gt;&amp;<span class="hljs-selector-id">#xe619</span>;&lt;/<span class="hljs-selector-tag">i</span>&gt;<br></code></pre></td></tr></table></figure></li><li><p>方法二：使用Font class（推荐）</p><ul><li><p>将所有iconfont.ttf/.css文件放到新建font文件夹下 </p></li><li><p>引入iconfont.css并且在标签添加class(iconfont和对应类名) </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;./Fonts/iconfont.css&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;iconfont icon-music&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul></li></ul></li></ul></li></ul><h2 id="10-CSS-Sprite"><a href="#10-CSS-Sprite" class="headerlink" title="10. CSS Sprite"></a>10. CSS Sprite</h2><ul><li><p>介绍</p><ul><li>别名：CSS精灵图、雪碧图</li><li>核心：将各种小图片整合到一张大图中，利用css背景position来显示不同的图，只请求一次服务器</li><li>好处：减少服务器接收和发送请求的次数-提高页面的加载速度，减小图片总大小</li></ul></li><li><p>使用</p><ul><li>设置元素宽高 =&gt; 设置精灵图作为元素的背景图片 =&gt; 设置背景图片位置来展示</li></ul></li><li><p>相关网站</p><ul><li>制作精灵图：<a href="https://www.toptal.com/developers/css/sprite-generator">https://www.toptal.com/developers/css/sprite-generator</a></li><li>获取精灵图位置：<a href="http://www.spritecow.com/">http://www.spritecow.com/</a></li></ul></li></ul><h2 id="11-CSS用户界面样式"><a href="#11-CSS用户界面样式" class="headerlink" title="11. CSS用户界面样式"></a>11. CSS用户界面样式</h2><p>更改一些用户操作，以便提高更好的用户体验</p><p>更改用户的鼠标样式/表单轮廓/防止表单域拖拽</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css">//鼠标在元素上的样式-<span class="hljs-attribute">auto</span>浏览器根据上下文决定指针显示样式 工具 箭头 小手 移动 文本 禁止 没有任何样式<br><span class="hljs-attribute">cursor</span>: auto/default/pointer/move/text/not-allowed/none<br><br>//表单轮廓outline-光标定到text中，会有蓝色轮廓线，通常情况去掉 <br>input&#123;outline: none/<span class="hljs-number">0</span>;&#125;<br><br>//防止拖拽文本域-默认文本域右下的三角可以拖动会影响布局<br><span class="hljs-attribute">resize</span>: textarea&#123;resize: none;&#125;<br></code></pre></td></tr></table></figure><p>注意：文本域尽量放到一行，不然中间有空格</p><h2 id="12-vertical-align"><a href="#12-vertical-align" class="headerlink" title="12. vertical-align"></a>12. vertical-align</h2><p>作用：设置元素垂直对齐方式(只对行内元素有效)</p><p><img src="/img/css_vertical-align.png"></p><p>text-align-设置给父元素  vertical-align-谁对齐设置给谁  </p><p>默认情况图片和文字基线(最短文字下端)对齐</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">//文字基线 盒子顶部/底部 文字顶部/底部/中线<br><span class="hljs-attribute">vertical-align</span>: baseline/top/bottom/text-top/text-bottom//middle<br></code></pre></td></tr></table></figure><p> (中线不是正中间,而是基线往上四分之一)     </p><h2 id="13-溢出的文字省略号显示"><a href="#13-溢出的文字省略号显示" class="headerlink" title="13. 溢出的文字省略号显示"></a>13. 溢出的文字省略号显示</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css">//单行文本溢出显示省略号<br><span class="hljs-attribute">white-space</span>: nowrap;  //先强制一行内显示文本(默认<span class="hljs-attribute">normal</span>自动换行)<br><span class="hljs-attribute">overflow</span>: hidden;   //超出的部分隐藏  <br><span class="hljs-attribute">text-overflow</span>: ellipsis; //文字用省略号替代超出的部分<br></code></pre></td></tr></table></figure><p>多行文本溢出显示省略号  </p><h2 id="14-常见布局技巧"><a href="#14-常见布局技巧" class="headerlink" title="14. 常见布局技巧"></a>14. 常见布局技巧</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">//<span class="hljs-attribute">margin</span>负值的运用-浮动的相邻盒子中间边框会加粗<br><span class="hljs-attribute">margin</span>: -<span class="hljs-number">1px</span><br></code></pre></td></tr></table></figure><h2 id="15-边框图片和渐变"><a href="#15-边框图片和渐变" class="headerlink" title="15. 边框图片和渐变"></a>15. 边框图片和渐变</h2><p><strong>边框图片：border-image</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">border-image-source</span>: <span class="hljs-built_in">url</span>()  //默认将图片放边框四个顶点<br></code></pre></td></tr></table></figure><p><strong>渐变</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">//线性渐变(默认从上到下) <span class="hljs-selector-tag">to</span>关键字  默认从上到下渐变<br><span class="hljs-attribute">background</span>: <span class="hljs-built_in">liner-gradient</span>([ to top/to left/to right],red,green) //red-&gt;green<br></code></pre></td></tr></table></figure><p>可以斜着渐变：to top right  也可度数: 45deg</p><p>注意：至少传递两个颜色,没有上限</p><div class="code-wrapper"><pre><code class="hljs">       默认系统自己计算纯色和渐变色范围</code></pre></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">手动:<span class="hljs-built_in">liner-gradient</span>(to right,red <span class="hljs-number">100px</span>,green <span class="hljs-number">200px</span>,...) //颜色 范围<br></code></pre></td></tr></table></figure><p>//除了第一个指定的是纯色的范围,后面都是渐变(100-200渐变)</p><p>将背景裁剪为文字的形状：-webkit-background-clip: text;</p><p> 私有属性: -ms/-moz/-webkit/-o 特定浏览器识别 ie/火狐/谷歌</p><p>镜像渐变(默认中间往四周) at关键字</p><p>   background: radial-gradient(at top left,red,green) //左上角到四周渐变</p><p>   //某个点开始镜像渐变(at 200px 100px,red,green)</p><p>   //控制扩散范围(100px,red,green) </p><p>   //同时指定扩散位置和范围 (100px at 200px 100px,red,green)</p><div class="code-wrapper"><pre><code class="hljs">                                                                                                                   2021.4.26</code></pre></div><h1 id="日常总结"><a href="#日常总结" class="headerlink" title="日常总结"></a>日常总结</h1><h2 id="1-锚点链接和书签链接"><a href="#1-锚点链接和书签链接" class="headerlink" title="1. 锚点链接和书签链接"></a>1. 锚点链接和书签链接</h2><p>  锚点链接：<a href="#名称1"></a>  <h3 id="名称1"></h3></p><p>  书签链接：<a href="#名称2"></a>  &lt;a name=名称2”&gt;</a></p><p>  跨页面跳转:<a href="xxx.html#名称1"></a> 用id/name都可</p><p> 总结：锚点链接可以链接到任何标签，书签链接只能从a到a</p><h2 id="2-背景"><a href="#2-背景" class="headerlink" title="2. 背景"></a>2. 背景</h2><p>  -新增background-size 背景图片大小(单独写在复合属性后面)</p><p>-值可以为具体值/auto cover contain           2020.9.29                          </p><h2 id="3-最大最小宽度"><a href="#3-最大最小宽度" class="headerlink" title="3. 最大最小宽度"></a>3. 最大最小宽度</h2><p>   min-width/max-width 可以给body设置  </p><div class="code-wrapper"><pre><code class="hljs">通过设置width: 100%+flex 达到移动端缩小宽度     </code></pre></div><h2 id="4-html-body标签"><a href="#4-html-body标签" class="headerlink" title="4. html/body标签"></a>4. html/body标签</h2><p>  html/body都遵循块元素特征(默认宽度浏览器宽度,高度0)</p><p>  当都不指定高度时,浏览器背景优先捕获html(html没有选择body)</p><p>  当指定了html/body高度,body背景色会覆盖html的</p><h2 id="5-对齐总结"><a href="#5-对齐总结" class="headerlink" title="5. 对齐总结"></a>5. 对齐总结</h2><p> text-align 行内元素居中-文本/图片/input(写在文本的父元素里面) </p><p> margin: 0 auto  块级元素居中(写在居中元素上/需要设置宽度才能居中)  </p><p> line==line-height  单行文本垂直居中</p><p>position: absolute; left:50% top:50%  transform: translate(-50%,-50%)/margin: -px </p><p>  //绝对定位元素垂直水平居中(父元素加相对定位) </p><p> margin-top/left: 50%  transform: translate(-50%,-50%); //和以上方法原理一样,不需定位</p><p> display: flex  justify-content: center  align-items:center  //弹性布局居中</p><p><strong>margin百分比</strong>  相对于父元素的</p><h2 id="6-实战总结"><a href="#6-实战总结" class="headerlink" title="6. 实战总结"></a>6. 实战总结</h2><p> 项目名称和子文件夹名称不用中文</p><p> 编写网页应该从外到内,从上到下的编写,先搭建好基本外形,再填东西</p><p> reset.css/normalize.css  初始化样式(reset去掉了所有默认样式,normalize部分样式)</p><p> base.css  用于存放自己一些使用频率多的样式(清除浮动,左浮,右浮)</p><p> index.css  全局样式(用于当前页面样式)</p><p>注意：别人的样式放前面,自己的放后面(方便自己覆盖别人的)    2021.4.28       </p><h2 id="7-实战问题"><a href="#7-实战问题" class="headerlink" title="7. 实战问题"></a>7. 实战问题</h2><p> 父元素使用绝对定位居中,子元素使用transform: scale() =&gt;子盒子位置下移        </p><p>   解决方法：使用margin-left: -px(不使用translate)</p><p> 图片应该作背景图片还是直接image标签/怎样让图片居中显示不失真</p><p>   除了很小的图标/超大背景图-使用背景图片</p><p>奇淫技巧：当父盒子中image宽度超出父盒子,想让图片居中显示</p><div class="code-wrapper"><pre><code class="hljs"> 图片设置margin: 0 -100%/父元素设置text-align: center (一般高度100%,宽度等比缩放) 也可给父元素设置相对定位,子元素绝对定位left50%,translatex</code></pre></div><p> 给元素设置hover并且设置transition过渡,但是不能设置鼠标离开过渡</p><p>   谁过渡给谁加-不加在hover中(否则只有鼠标放入有变化)</p><div class="code-wrapper"><pre><code class="hljs">                            2021.5.1</code></pre></div><p>object-fit: contain/cover  //用于img/video 保留原始比例的剪裁、缩放、拉伸等</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>1. HTML/CSS</category>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>邂逅前端开发</title>
    <link href="/2022/12/26/0.%20%E5%AD%A6%E4%B9%A0%E5%87%86%E5%A4%87/"/>
    <url>/2022/12/26/0.%20%E5%AD%A6%E4%B9%A0%E5%87%86%E5%A4%87/</url>
    
    <content type="html"><![CDATA[<h1 id="前端发展和思考"><a href="#前端发展和思考" class="headerlink" title="前端发展和思考"></a>前端发展和思考</h1><h2 id="1-前端行业发展怎么样？"><a href="#1-前端行业发展怎么样？" class="headerlink" title="1. 前端行业发展怎么样？"></a>1. 前端行业发展怎么样？</h2><ul><li>为什么聊这个？<ul><li>“时代的一粒灰，落在个人头上就是一座山”，比如：疫情</li><li>如果一个行业停滞不前，像一潭死水，那无论你再拼命学习也无济于事</li></ul></li><li>前端<ul><li>技术方面：技术更新迭代快，新技术层出不穷，新框架迭代快 Vue3 React18 Vite…</li><li>市场需求：人才需求大 薪资高</li></ul></li></ul><ul><li>总有人要赢的，为什么不是我呢？    -科比</li></ul><h2 id="2-前端知识体系"><a href="#2-前端知识体系" class="headerlink" title="2. 前端知识体系"></a>2. 前端知识体系</h2><p>前端知识体系的核心：html+css+js</p><img src="/img/前端知识体系.jpg" alt="知识体系图" style="zoom:50%;" /><h2 id="3-课程大纲"><a href="#3-课程大纲" class="headerlink" title="3. 课程大纲"></a>3. 课程大纲</h2><img src="/img/课程大纲.jpg" style="zoom:50%;" /><h2 id="4-学习方法-建议"><a href="#4-学习方法-建议" class="headerlink" title="4. 学习方法/建议"></a>4. 学习方法/建议</h2><ul><li>如何学习新的知识/技术<ul><li>Javascript高级程序设计的作者Nicholas，也是ESLint的作者说过：想要全面的掌握javascript，关键在于弄清楚它的历史、局限性和本质；</li><li>不仅仅局限于js，所有技术都是适用的</li></ul></li><li>技术的出现是为了解决问题的，不是为了让大家学习技术的</li><li>将知识进行分类：常用的知识（经常使用/熟能生巧/烂俗于心）不常用的（知道有它/知道哪里查）</li></ul><h2 id="5-前端学习网站"><a href="#5-前端学习网站" class="headerlink" title="5. 前端学习网站"></a>5. 前端学习网站</h2><p>MDN：<a href="https://developer.mozilla.org/zh-CN/">https://developer.mozilla.org/zh-CN/</a></p><p>W3C:   <a href="https://www.w3.org/">https://www.w3.org/</a></p><h2 id="6-优秀是一种习惯"><a href="#6-优秀是一种习惯" class="headerlink" title="6. 优秀是一种习惯"></a>6. 优秀是一种习惯</h2><p>We are what we repeatedly do.Excellence,then,is not an act, but a habit.  -Aristotle</p><p>我们每个人都是由自己一再重复的行为所锻造而成，因而优秀不是一种行为，而是一种习惯。</p><h1 id="一-邂逅前端开发"><a href="#一-邂逅前端开发" class="headerlink" title="一. 邂逅前端开发"></a>一. 邂逅前端开发</h1><ul><li>了解真相才能获得真正的自由</li><li>保持 “空杯心态”，才能持续不断的进步</li></ul><h2 id="1-1-软件开发"><a href="#1-1-软件开发" class="headerlink" title="1.1 软件开发"></a>1.1 软件开发</h2><ul><li>软件定义<ul><li>特定顺序组织的 计算机数据和指令</li></ul></li><li>软件software和应用程序Application区别<ul><li>应用程序是面向用户的，软件包括了：操作系统/虚拟机、算法、编程语言、应用程序</li></ul></li></ul><h2 id="1-2-完善的应用系统包含哪些"><a href="#1-2-完善的应用系统包含哪些" class="headerlink" title="1.2 完善的应用系统包含哪些"></a>1.2 完善的应用系统包含哪些</h2><ul><li>完善的应用系统<ul><li>服务器 （Java/NodeJS/C++/Python/Go）</li><li>手机端：Android端（Java/Kotlin）、iPhone端（OC/Swift）</li><li>Web开发：网页版（html/css/js）</li><li>PC端：Win版（C#）、Mac版（OC/Swift）</li></ul></li></ul><h2 id="1-3-前端开发的内容"><a href="#1-3-前端开发的内容" class="headerlink" title="1.3 前端开发的内容"></a>1.3 前端开发的内容</h2><ul><li><p>应用程序开发-软件开发-coder/programer/developer</p></li><li><p>Back-end/Front-end     后端/前端</p></li><li><p>前端开发工程师：</p><ul><li><p>主要负责：Web（网站/后台管理系统/手机H5）、小程序端</p></li><li><p>也可以做：移动端（Uniapp、React Native）、桌面端（Electron）-VS Code、服务器开发（Node.js）</p></li></ul></li><li><p>尤雨溪/TJ</p></li></ul><h2 id="1-4-学习方法-建议"><a href="#1-4-学习方法-建议" class="headerlink" title="1.4 学习方法/建议"></a>1.4 学习方法/建议</h2><ul><li>学习任何新东西，了解它的历史、局限性、本质；</li><li>将知识进行分类：<ul><li>常用的 - 经常使用，必须非常熟练（刻意练习、熟能生巧）</li><li>不常用的 - 知道有它，知道哪里查</li></ul></li></ul><h1 id="二-邂逅Web开发"><a href="#二-邂逅Web开发" class="headerlink" title="二. 邂逅Web开发"></a>二. 邂逅Web开发</h1><h2 id="2-1-电脑配置-推荐软件"><a href="#2-1-电脑配置-推荐软件" class="headerlink" title="2.1 电脑配置/推荐软件"></a>2.1 电脑配置/推荐软件</h2><ul><li>显示隐藏文件和文件拓展名</li><li>显示文件的时候，以列表形式显示，更清晰的看到文件类型</li></ul><ul><li>推荐软件<ul><li>Chrome</li><li>VS Code</li><li>XMind</li><li>Typora</li></ul></li></ul><h2 id="2-2-网站和网页关系"><a href="#2-2-网站和网页关系" class="headerlink" title="2.2 网站和网页关系"></a>2.2 网站和网页关系</h2><ul><li>一个网站由N个网页构成：N&gt;=1</li></ul><h2 id="2-3-网页的显示过程（重要）"><a href="#2-3-网页的显示过程（重要）" class="headerlink" title="2.3 网页的显示过程（重要）"></a>2.3 网页的显示过程（重要）</h2><ul><li><p>用户角度</p><ul><li>用户在浏览器输入URL，回车</li><li>DNS解析，DNS服务器找到服务器IP，找到服务器</li><li>服务器返回静态资源到浏览器</li><li>浏览器解析并渲染html/css/js，显示页面</li></ul></li><li><p>前端工程师的角度</p><ul><li>开发项目（html/css/js/vue/react）</li><li>打包、部署项目到服务器</li></ul></li><li><p>服务器是什么？</p><p>我们平时访问的静态资源，比如音乐资源就是存放在服务器中</p><ul><li>一台24小时运行的电脑（主机）</li><li>没有显示器</li><li>一般是Linux操作系统</li><li>目前大多数公司或者我们自己用的是云服务器</li></ul></li></ul><h2 id="2-4-第一个网页和网页组成部分"><a href="#2-4-第一个网页和网页组成部分" class="headerlink" title="2.4 第一个网页和网页组成部分"></a>2.4 第一个网页和网页组成部分</h2><ul><li><p>世界上第一个网页：上世纪90年代</p><ul><li><a href="http://info.cern.ch/hypertext/WWW/TheProject.html">http://info.cern.ch/hypertext/WWW/TheProject.html</a></li></ul></li><li><p>html/css/js</p><ul><li>html 网页的结构（骨架）</li><li>css 网页的样式（美化）</li><li>javascript 控制网页的交互（灵魂）</li></ul></li></ul><h2 id="2-5-浏览器和浏览器内核"><a href="#2-5-浏览器和浏览器内核" class="headerlink" title="2.5 浏览器和浏览器内核"></a>2.5 浏览器和浏览器内核</h2><ul><li><p>浏览器的作用</p><ul><li>将html/css/js渲染成我们看到的页面</li></ul></li><li><p>浏览器内核</p><ul><li>浏览器最核心的部分就是浏览器内核</li></ul></li><li><p>浏览器内核又叫渲染引擎</p><ul><li>不同的浏览器有不同的浏览器内核，因而同样的代码渲染效果也会略微不同</li></ul></li><li><p>常见的浏览器内核：</p><ul><li><p>Trident（三叉戟-IE/UC）、Gecko（壁虎-Firefox）、Presto（Opera）-&gt;Blink</p></li><li><p>Webkit：Safari、搜狗高速浏览器、移动端浏览器（Android、IOS）</p></li><li><p>Webkit -&gt; Blink：Google Chrome、Edge</p></li></ul></li></ul><h2 id="2-6-第一个网页"><a href="#2-6-第一个网页" class="headerlink" title="2.6 第一个网页"></a>2.6 第一个网页</h2><ul><li><p>记事本开发</p></li><li><p>网页基本结构</p><ul><li>html-&gt;head-&gt;body</li></ul></li></ul><h2 id="2-7-HTML语言"><a href="#2-7-HTML语言" class="headerlink" title="2.7 HTML语言"></a>2.7 HTML语言</h2><ul><li>超文本标记语言（HyperText Markup Language，简称HTML）</li><li>为什么叫超文本？<ul><li>因为有图片、视频、音频、超链接等，不仅仅是文本</li></ul></li><li>为什么是标记语言？<ul><li>有很多个标记-标签tag组成</li><li>对某些内容进行特殊的标记，以供浏览器进行识别处理</li><li>由标签和内容组成的叫元素</li></ul></li><li>扩展名：.html/.htm<ul><li>因历史原因，Win95、Win98系统最多显示的拓展名不超过三字符，所以当时用.htm</li><li>现在统一使用.html</li></ul></li></ul><h2 id="2-8-开发工具VS-Code配置"><a href="#2-8-开发工具VS-Code配置" class="headerlink" title="2.8 开发工具VS Code配置"></a>2.8 开发工具VS Code配置</h2><p>安装插件、配置</p><ul><li>插件安装（增加功能）<ul><li>中文插件：Chinese</li><li>颜色主题：atom one dark</li><li>文件夹图标：VSCode Great Icons</li><li>在浏览器中打开网页：open in browser、Live Sever</li><li>自动重命名标签：auto rename tag</li></ul></li><li>VSCode的配置<ul><li>Auto Save 自动保存</li><li>Font Size 修改代码字体大小</li><li>Word Wrap 代码自动换行</li><li>Render Whitespace 空格的渲染方式</li><li>Tab Size 代码缩进<ul><li>推荐2个空格</li></ul></li></ul></li></ul><h2 id="2-9-剖析元素结构"><a href="#2-9-剖析元素结构" class="headerlink" title="2.9 剖析元素结构"></a>2.9 剖析元素结构</h2><ul><li><p>HTML本质上是由一系列的元素（Element）构成的</p></li><li><p>HTML元素：<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element">https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element</a></p></li><li><p>元素的组成</p><ul><li><p>开始标签</p></li><li><p>结束标签（多一个/）</p></li><li><p>内容</p></li><li><p>属性</p><figure class="highlight html"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;p1&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;p2&quot;</span>&gt;</span>我是p<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>属性分类</p><ul><li>公共属性：class、id、title属性</li><li>特有属性：比如mate元素的charset属性、img元素的alt属性等</li></ul></li><li><p>单标签元素和双标签元素</p><ul><li>双标签：大多素元素都是双标签</li><li>单标签：br、img、hr、input、meta</li><li>单标签元素推荐不加斜杠/</li><li>注意：HTML元素不区分大小写，推荐小写</li></ul></li><li><p>元素的嵌套</p><ul><li>兄弟关系</li><li>父子关系</li></ul></li></ul><h2 id="2-10-HTML注释"><a href="#2-10-HTML注释" class="headerlink" title="2.10 HTML注释"></a>2.10 HTML注释</h2><ul><li><p>什么是注释？</p><ul><li>对代码的解释说明</li><li>注释写法： <!-- 我是注释 -->    VSCode快捷键：ctrl+/</li><li>注释是给开发者看的，浏览器不会把注释显示给用户</li></ul></li><li><p>为什么需要注释？</p><ul><li>方便以后进行查阅</li><li>协同开发，别人能看懂你的代码</li><li>临时注释掉代码，方便调试</li></ul></li></ul><h1 id="VS-code快捷键"><a href="#VS-code快捷键" class="headerlink" title="VS code快捷键"></a>VS code快捷键</h1><ul><li>多行缩进：Tab<ul><li>往后缩进 Tab</li><li>往前缩进 Shift+Tab</li></ul></li><li>光标切换到下一行：Command+回车Enter</li><li>向下/上复制：option(Alt)+shift+向上/向下</li><li>光标快速移动技巧：<ul><li>在我们通过！写出html结构后 可以通过tab键快速将光标移动到body中</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>0. 邂逅前端开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端开发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTML详解</title>
    <link href="/2022/03/24/1.%20html/"/>
    <url>/2022/03/24/1.%20html/</url>
    
    <content type="html"><![CDATA[<h1 id="一-HTML"><a href="#一-HTML" class="headerlink" title="一. HTML"></a>一. HTML</h1><h2 id="1-1-基本HTML5结构解析"><a href="#1-1-基本HTML5结构解析" class="headerlink" title="1.1 基本HTML5结构解析"></a>1.1 基本HTML5结构解析</h2><h4 id="1-1-1-完整的HTML结构"><a href="#1-1-1-完整的HTML结构" class="headerlink" title="1.1.1 完整的HTML结构"></a>1.1.1 完整的HTML结构</h4><ul><li>文档声明</li><li>html元素（head、body元素）</li></ul><figure class="highlight html"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>           <br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="1-1-2-文档声明和html元素"><a href="#1-1-2-文档声明和html元素" class="headerlink" title="1.1.2 文档声明和html元素"></a>1.1.2 文档声明和html元素</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*</span><br><span class="hljs-comment">文档类型声明：告诉浏览器当前是h5页面，要以html5的标准去解析</span><br><span class="hljs-comment">必须放在HTML文档最前面不能省略，否则会出现兼容性问题</span><br><span class="hljs-comment">*/</span><br>&lt;!DOCTYPE <span class="hljs-selector-tag">html</span>&gt;  <br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">根元素html，所有元素必须是它的后代，W3C建议为其增加一个lang（language）属性</span><br><span class="hljs-comment">lang作用是：指定网页的语言(en-英文 zh-cn-简体中文) </span><br><span class="hljs-comment">帮助翻译工具确定要使用的翻译规则</span><br><span class="hljs-comment">语音合成工具确定要使用的发音</span><br><span class="hljs-comment">*/</span><br>&lt;<span class="hljs-selector-tag">html</span> lang=&quot;en&quot;&gt; <br></code></pre></td></tr></table></figure><h4 id="1-1-3-head元素"><a href="#1-1-3-head元素" class="headerlink" title="1.1.3 head元素"></a>1.1.3 head元素</h4><ul><li><p>head中一般包含’’元数据’’-描述页面的配置信息， 如：网页标题、图标、字符编码</p></li><li><p>常见的设置（一般至少会包含以下2个设置）</p><ul><li><p>网页的标题：title元素</p></li><li><p>网页的编码：meta元素</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;meta charset=&quot;UTF-<span class="hljs-number">8</span>&quot;&gt;  &lt;!--所有网页必须都用UTF-<span class="hljs-number">8</span>,否则解码可能会出乱码问题--&gt;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>head中其他的元素：style、link、script、noscript</p><ul><li><p>link-css样式引入、网页图标</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;link rel=&quot;stylesheet&quot; href=&quot;style<span class="hljs-selector-class">.css</span>&quot;&gt;<br>&lt;link rel=&quot;shortcut <span class="hljs-attribute">icon</span>&quot; href=&quot;favicon<span class="hljs-selector-class">.ico</span>&quot; type=&quot;image/x-<span class="hljs-attribute">icon</span>&quot;&gt;//type可不加<br>&lt;!--href: hyper <span class="hljs-built_in">reference</span>(超链接) --&gt;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h4 id="1-1-4-body元素和html注释"><a href="#1-1-4-body元素和html注释" class="headerlink" title="1.1.4 body元素和html注释"></a>1.1.4 body元素和html注释</h4><ul><li><p>body：网页的具体内容和结构</p></li><li><p>注释：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--   --&gt;</span> <br></code></pre></td></tr></table></figure></li></ul><h2 id="1-2-常见的HTML元素"><a href="#1-2-常见的HTML元素" class="headerlink" title="1.2 常见的HTML元素"></a>1.2 常见的HTML元素</h2><ul><li>html元素很多，但是常用的就那么几个，掌握常用的<ul><li>不常用的查文档：<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element">https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element</a></li></ul></li></ul><h3 id="1-2-1-常用的元素"><a href="#1-2-1-常用的元素" class="headerlink" title="1.2.1 常用的元素"></a>1.2.1 常用的元素</h3><ul><li>p元素、h元素</li><li>img元素、a元素、iframe元素</li><li>div元素、span元素</li></ul><h3 id="1-2-2-元素显示原理"><a href="#1-2-2-元素显示原理" class="headerlink" title="1.2.2 元素显示原理"></a>1.2.2 元素显示原理</h3><ul><li><p>不同元素在浏览器显示不同的原因，只是浏览器加的样式不同</p></li><li><p>user agent stylesheet（用户代理样式表-浏览器默认设置的）</p><p><img src="/img/html%E5%85%83%E7%B4%A0%E6%98%BE%E7%A4%BA%E5%8E%9F%E7%90%86.png"></p></li></ul><h3 id="1-2-3-p元素和h元素"><a href="#1-2-3-p元素和h元素" class="headerlink" title="1.2.3 p元素和h元素"></a>1.2.3 p元素和h元素</h3><ul><li><strong>h元素</strong><ul><li><p>标题（Heading）元素，h1-h6：大=&gt;小</p></li><li><p>一般用于一些比较重要的文字作为标题</p></li><li><p>h元素和SEO优化有关</p></li></ul></li><li><strong>p元素</strong><ul><li>段落（paragraph）元素</li><li>p元素多个段落之间会有一定的间距</li></ul></li></ul><h3 id="1-2-4-img元素"><a href="#1-2-4-img元素" class="headerlink" title="1.2.4 img元素"></a>1.2.4 img元素</h3><ul><li>image（图片）标签</li><li>img是一个可替换元素<ul><li>可替换元素：元素的属性值会将元素在浏览器中显示的位置替换掉</li></ul></li><li>两个重要属性<ul><li>src：source（资源）表示文件路径</li><li>alt：替换文本-不是必须（图片加载不成功会显示/屏幕阅读器会将这些描述读出来给使用者）</li></ul></li><li>图片路径<ul><li><p>网络路径：一个URL地址</p></li><li><p>本地图片：本地电脑的图片，后续会和html一起部署服务</p><ul><li><p>相对路径：(图片相对于当前文件位置)  / ./ ../</p></li><li><p>绝对路径：完整路径-电脑/网络路径(不推荐)</p></li></ul></li></ul></li></ul><div class="code-wrapper"><pre><code class="hljs">- 图片格式（了解）  png、jpg、gif 、webp 静态支持透明/静态不支持透明/动态支持透明</code></pre></div><p>​      </p><h3 id="1-2-5-a元素"><a href="#1-2-5-a元素" class="headerlink" title="1.2.5 a元素"></a>1.2.5 a元素</h3><ul><li>anchor（锚）元素，用于打开新的URL</li><li>两个属性<ul><li>href：Hypertext Reference</li><li>target：指定在何处显示链接的资源</li></ul></li></ul>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- _self(当前,默认)  _blank新窗口 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_self/_blank&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>    <br></code></pre></td></tr></table></figure><ul><li><strong>链接分类、锚点链接</strong></li></ul>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--外部链接/内部链接-html跳转--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;index.html&quot;</span>&gt;</span>  <br><span class="hljs-comment">&lt;!--空链接/伪链接--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:void(0);&quot;</span>&gt;</span> <br><span class="hljs-comment">&lt;!--下载/email链接-地址链接的是文件（本地或网络） 发送email--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;html.txt&quot;</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;mailto:1712373370@qq.com&quot;</span>&gt;</span>发送email<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-comment">&lt;!--锚点链接：快速定位/跳转到文本中某个位置--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#cth&quot;</span>&gt;</span>锚点链接<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;cth&quot;</span>&gt;</span>标题1<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>  <br><span class="hljs-comment">&lt;!--图片链接：整个图片是一个链接--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;图片&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p>  <strong>注意：</strong>两种空链接方法 区别：跳到顶部/死链接</p><ul><li><strong>base元素</strong>（了解）</li></ul>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--base元素可以指定a链接的基本前缀-会在没有前缀时自动加上--&gt;</span>    <br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">base</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://baidu.com&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span>&gt;</span> <span class="hljs-comment">&lt;!--可以指定基地址和target--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/img/PCtm_d9c8750bed0b3c7d089fa7d55720d6cf.png&quot;</span>&gt;</span>百度Logo<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span> <span class="hljs-comment">&lt;!--自动拼接--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://www.baidu.com&quot;</span>&gt;</span>百度<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>   <span class="hljs-comment">&lt;!--当有协议头时就不会拼接--&gt;</span><br></code></pre></td></tr></table></figure><p>  ​      </p><h3 id="1-2-6-iframe元素"><a href="#1-2-6-iframe元素" class="headerlink" title="1.2.6 iframe元素"></a>1.2.6 iframe元素</h3><ul><li><p>可以在一个html文档中嵌入另一个HTML</p></li><li><p>属性：</p><ul><li>src：要嵌入的HTML页面url</li><li>frameborder：边框 1-显示 0-不显示</li></ul></li><li><p>iframe和a元素结合使用</p><ul><li>结合情况：当我们iframe嵌入的网页中有a元素时，且多层嵌套时 </li><li>target=_top 在顶层窗口打开链接</li><li>target=_parent 在父层窗口打开链接</li></ul></li><li><p>禁止其他网站使用iframe嵌入自己网站方法（淘宝可以嵌入到iframe，而京东小米等不能的原因）</p><ul><li>在Response Headers中设置：X-Frame-Options: SAMEORIGIN</li><li>原理：sameorigin是同源的意思，如果其他网站使用iframe嵌入就是异源，所以禁止其他网站嵌入</li><li>可以在浏览器Network中，查看第一个文件如：<a href="http://www.mi.com/">www.mi.com</a> 中的Response Headers中是否有X-Frame-Options</li></ul></li></ul><h3 id="1-2-7-div和span元素"><a href="#1-2-7-div和span元素" class="headerlink" title="1.2.7 div和span元素"></a>1.2.7 div和span元素</h3><ul><li><p>历史</p><ul><li><p>div元素：division，分开分配的意思</p></li><li><p>span元素：跨域、涵盖的意思</p></li><li><p>html基本元素=&gt;添加各种包含样式的html元素（strong、i、del）=&gt;css样式结构分离</p><p>=&gt;div/span+css 代替了所有html元素 =&gt; 元素语义化（目前）</p></li></ul></li><li><p> div/span都是纯粹的容器，可以理解成盒子    - 每个div独占一行，通常用于包裹其他元素，布局    - 多个span在一行显示，通常用来包裹（添加css）显示一些关键字</p></li></ul><h3 id="1-2-8-不常用元素"><a href="#1-2-8-不常用元素" class="headerlink" title="1.2.8 不常用元素"></a>1.2.8 不常用元素</h3><ul><li>strong元素：加粗强调</li><li>i元素：字体倾斜-现在用于字体图标</li><li>code元素：显示代码-等宽字体    font-family:monospace(一般用span然后加上这个样式)</li><li>br元素：换行，开发已经不用</li><li>其他<ul><li> script/noscript link style meta hr iframe     - hr：分割线（不常用，一般用div代替）    - pre：对文字按照原来的格式显示，比如空格、换行</li></ul></li></ul><h3 id="1-2-9-HTML全局属性"><a href="#1-2-9-HTML全局属性" class="headerlink" title="1.2.9 HTML全局属性"></a>1.2.9 HTML全局属性</h3><ul><li><p>Global Attributes：有的属性是所有元素都可以设置的叫全局属性</p></li><li><p>文档：<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Global_attributes">https://developer.mozilla.org/zh-CN/docs/Web/HTML/Global_attributes</a></p></li><li><p>常见四个全局属性：</p><ul><li>class、id、title、style</li></ul></li></ul><p>​             </p><h2 id="1-2-高级元素"><a href="#1-2-高级元素" class="headerlink" title="1.2 高级元素"></a>1.2 高级元素</h2><h3 id="1-2-1-列表元素"><a href="#1-2-1-列表元素" class="headerlink" title="1.2.1 列表元素"></a>1.2.1 列表元素</h3><p>分类：无序/有序/自定义列表</p><ul><li><strong>无序列表（重点）</strong></li></ul><p>ul(unordered list)     li(list item)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">没有顺序,每一项前面小黑点(list-style: none  去掉小黑点)</span><br><span class="hljs-comment">ul中只能放li标签,li里面可以任何标签</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>   <br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>   <br>    ...<br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><strong>有序列表（理解）</strong></li></ul><p>ol(ordered list)     li(list item)</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--有顺序，每一项前序号123,ol只能放li--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>   <br><span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><strong>自定义列表（重点）</strong>   </li></ul><p>上面一个小标题-下面多个列表解释说明（大哥和多个弟弟）</p><p>dl(definition list)   dt(definition term)   dd(definition description)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">dl</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>名词1<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>名词1解释1<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span>...  <span class="hljs-comment">&lt;!--dl只能有dt和dd--&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>名词2<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>名词2解释1<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span>...<span class="hljs-comment">&lt;!--可以有多组，一组都多个兄弟dd解释一个大哥dt--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dl</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>注意：</strong>ul和ol直接子元素只能是li</p><p>​            dl直接子元素只能是dt/dd</p><ul><li><strong>列表常用属性</strong><ul><li>其实列表和普通元素没什么不同，只是浏览器给它加了不同的样式，比如list-style-type</li></ul></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* </span><br><span class="hljs-comment">list-style-type  设置li前面标记的样式(基本不用)</span><br><span class="hljs-comment">list-style-image 设置某张图片为li前面的标志，会覆盖list-style-type</span><br><span class="hljs-comment">list-style-position设置li前面标记的位置，outsize/inside</span><br><span class="hljs-comment">list-style缩写属性</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-attribute">list-style</span>: none;  //去掉前面标记，一般只会这样用<br></code></pre></td></tr></table></figure><h3 id="1-2-2-表格元素"><a href="#1-2-2-表格元素" class="headerlink" title="1.2.2 表格元素"></a>1.2.2 表格元素</h3><ul><li><strong>作用和基本用法</strong></li></ul><p>作用：展示数据基本</p><p>语法：(以下为table完整结构)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--table-表格  tr-行(table row)  td-单元格内容(table data)--&gt;</span><br><span class="hljs-comment">&lt;!--th-表头(table head) caption-表格标题 这些可有可无，因为可以用css实现--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">caption</span>&gt;</span>标题<span class="hljs-tag">&lt;/<span class="hljs-name">caption</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>          <span class="hljs-comment">&lt;!--th-表头单元格标签(table head居中和加粗显示，一般位于第一行或第一列)--&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>表格表头1<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span>  <br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>表格表头2<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>    <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span>    <br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>单元格内文字1<span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>单元格内文字2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><p>表格属性：（了解）以下属性都加在table里面</p><p> align-表格位置（left-默认/center/right） border-边框(默认无, 1-有)  hidth/height</p><p> cellpadding-单元格与内容（默认1像素）cellspacing-单元格之间（默认2像素）</p><ul><li><strong>表格结构标签（将tr 包含起来）</strong></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span><span class="hljs-comment">&lt;!--标签-表格头部--&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><span class="hljs-comment">&lt;!--标签-表格主体--&gt;</span><br></code></pre></td></tr></table></figure><ul><li><strong>表格边框的合并-css控制</strong></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">table</span>&#123;<br><span class="hljs-attribute">border-collapse</span>: collapse;  <span class="hljs-comment">/*将边框合并，默认分开separate*/</span><br>  <span class="hljs-comment">/*border-spacing: 10px 20px  td之间的间距*/</span><br>&#125;<br><span class="hljs-selector-tag">th</span>,<span class="hljs-selector-tag">td</span> &#123;<br><span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#666</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">20px</span>; <span class="hljs-comment">/*也可设置宽高*/</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li><strong>合并单元格</strong><ul><li>确定跨行还是跨列</li><li>找到目标单元格写合并方式和数量<ul><li>跨行：rowspan=”合并个数”  跨列：colspan=”合并个数”</li><li> 跨行：最上侧单元格（写合并代码）跨列：最左侧单元格（写合并代码）</li></ul></li><li>删除多余单元格</li></ul></li></ul><h3 id="1-2-3-表单元素"><a href="#1-2-3-表单元素" class="headerlink" title="1.2.3 表单元素"></a>1.2.3 表单元素</h3><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><ul><li>使用表单标签目的：收集用户信息（一般用于登录注册页面）</li><li>组成：由表单域、表单控件-元素、提示信息组成</li><li>常见表单元素<ul><li>form    表单域，一般情况下表单元素都是它的后代</li><li>input    单行文本输入框、单选框、复选框、按钮等元素</li><li>textarea    多行文本框</li><li>select/option    下拉选择框</li><li>button    按钮</li><li>label    表单元素的标题，可以和表单元素搭配使用，增加用户体验</li><li>以下了解<ul><li>fieldset    表单元素组</li><li>legend    fieldset的标题</li></ul></li></ul></li></ul><h4 id="表单域（了解）"><a href="#表单域（了解）" class="headerlink" title="表单域（了解）"></a>表单域（了解）</h4><ul><li>作用：将表单域范围内的表单元素信息送到服务器</li><li>对整个表单作reset或submit</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">action：用于接收的服务器url地址</span><br><span class="hljs-comment">method：表单数据提交方式-get/post</span><br><span class="hljs-comment">  target：在什么地方打开，和a一样</span><br><span class="hljs-comment">name：用于指定表单名称，以区分同一页面多个表单域</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">”url”</span> <span class="hljs-attr">method</span>=<span class="hljs-string">”get/post”</span> <span class="hljs-attr">name</span>=<span class="hljs-string">””</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注意：表单控件都要包含在表单域里面</p><h4 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h4><p>输入表单元素（单标签）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- type属性值：text/password/radio/checkbox/file/button/submit/reset --&gt;</span><br><span class="hljs-comment">&lt;!-- 文本框/密码框/单选按钮/复选框/上传文件/普通按钮/提交按钮/重置按钮  --&gt;</span><br><span class="hljs-comment">&lt;!-- type必须属性 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/password/radio/checkbox/file/button/submit/reset/date/time...&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>   <br></code></pre></td></tr></table></figure><p>注意：按钮通过value设置按钮提示文字</p><p>​            同一组radio/checkbox name属性必须一致(否则会导致radio可以多选)</p><h4 id="select下拉表单元素"><a href="#select下拉表单元素" class="headerlink" title="select下拉表单元素"></a>select下拉表单元素</h4><p>selected=”selected” 默认选中某个</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">  select常用属性：</span><br><span class="hljs-comment">multiple-可以多选</span><br><span class="hljs-comment">size-显示多少项(大于这个显示滚动条)</span><br><span class="hljs-comment">  option常用属性：</span><br><span class="hljs-comment">selected-默认选中</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;edu&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">selected</span>&gt;</span>小学<span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>初中<span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span><br>    ...<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span>  <br></code></pre></td></tr></table></figure><h4 id="textarea文本域元素"><a href="#textarea文本域元素" class="headerlink" title="textarea文本域元素"></a>textarea文本域元素</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">cols-列数   rows-行数</span><br><span class="hljs-comment">resize: both  禁止缩放的css样式</span><br><span class="hljs-comment">css中直接设置宽和长,不使用rows/cols</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">rows</span>=<span class="hljs-string">”3”</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">”20”</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span>  <br></code></pre></td></tr></table></figure><p><strong>fieldset和legend</strong>(不常用)</p><p>作用：将一组表单元素用框包含起来</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">fieldset</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">legend</span>&gt;</span>我是表单元素组标题<span class="hljs-tag">&lt;/<span class="hljs-name">legend</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">fieldset</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="label标签（和表单元素搭配使用）"><a href="#label标签（和表单元素搭配使用）" class="headerlink" title="label标签（和表单元素搭配使用）"></a>label标签（和表单元素搭配使用）</h4><ul><li>作用：点击label标签内的文字,选择对应表单元素(增加用户体验)</li><li>尽量用label把表单元素包起来，这样看起来较明了</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--for的值必须和id值必须相等--&gt;</span><br>性别:<br><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;male&quot;</span>&gt;</span><br>    男<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;male&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">input</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;female&quot;</span>&gt;</span><br>    女<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;female&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">input</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br><span class="hljs-comment">&lt;!--input元素也可以实现--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;userid&quot;</span>&gt;</span>账号: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userid&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="实现按钮的两种方式"><a href="#实现按钮的两种方式" class="headerlink" title="实现按钮的两种方式"></a>实现按钮的两种方式</h4><p>区别：button标签内容可以是图片和文本,而input需通过value设置</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--input--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button/submit/reset&quot;</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--button 需加上type-不同浏览器默认值不同--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>提交<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>   <span class="hljs-comment">&lt;!--type属性默认值submit--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button/submit/reset&quot;</span>&gt;</span>按钮/重置<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><p>去除input的outline(tab键选中效果)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">input</span>&#123;<span class="hljs-attribute">outline</span>: none;&#125;<br><br><span class="hljs-comment">/*input添加tabindex属性也可去除*/</span><br>tabindex=-<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h4 id="input常用属性"><a href="#input常用属性" class="headerlink" title="input常用属性"></a>input常用属性</h4><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">type</span><br>用于<span class="hljs-keyword">input</span>元素(<span class="hljs-type">text</span>/<span class="hljs-keyword">password</span>/radio/checkbox/file/button/submit/<span class="hljs-keyword">reset</span>)<br>maxlength<br>输入字符的最大长度(正整数) <br>readonly只读<br>disabled禁用<br>checked 默认选中(<span class="hljs-keyword">type</span>=radio/checkbox时可用，radio默认选中一个，checkbox可多个)<br>autofocus页面加载自动聚焦<span class="hljs-keyword">input</span><br><span class="hljs-type">name</span>/<span class="hljs-keyword">value</span><br>给服务器提交数据时，数据名称和值<br>如：https:www.baidu.com/?<span class="hljs-type">name</span>=cth&amp;age=<span class="hljs-number">22</span><br>form<br>设置所属的form元素(填写form元素的id)<br>使用了此属性，<span class="hljs-keyword">input</span>元素即使不写在form内，它的数据也能提交到服务器<br><br>布尔属性：<br>布尔属性可以没有属性值，写上属性名就代表使用这个属性<br>常见的布尔属性有：disabled、checked、selected、readonly、multiple、autofocus<br>如果要给布尔属性设置值，值就是属性名本身(建议直接写属性名)<br></code></pre></td></tr></table></figure><h4 id="form的常用属性"><a href="#form的常用属性" class="headerlink" title="form的常用属性"></a>form的常用属性</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">action-用于提交表单数据的请求URL</span><br><span class="hljs-comment">method-请求方法 get/post 默认是get</span><br><span class="hljs-comment">target-在什么地方打开URL(和a元素的target一样)</span><br><span class="hljs-comment">enctype-规定了在向服务器发送表单数据之前如何对数据进行编码</span><br><span class="hljs-comment">application/x-www-form-urlencoded 默认的编码方式</span><br><span class="hljs-comment">multipart/from-data 文件上传时必须为这个值，并且method必须是post</span><br><span class="hljs-comment">text/plain  普通文本传输</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>注意：</strong>文件上传时，enctype 必须为 multipart/from-data</p><h3 id="1-2-4-表单提交"><a href="#1-2-4-表单提交" class="headerlink" title="1.2.4 表单提交"></a>1.2.4 表单提交</h3><ul><li><strong>表单提交的两种方式</strong></li></ul><p>简介：用户在form中填写的信息提交给服务器</p><p><strong>传统的表单提交：</strong></p><p>​    将所有的表单元素放到一个form中</p><p>​    form设置action(服务器地址)</p><p>​    input/button类型是submit，点击提交自动将所有数据提交到服务器</p><p>​    弊端一：会进行页面的跳转(以为者服务器必须提前写好一个页面并返回给前端，前端直接展示这个界面)</p><p>​    服务器提前将页面写好-服务端渲染</p><p>​    弊端二：不方便进行表单数据的验证</p><p><strong>前后端分离</strong></p><p>​    通过JS获取到所有表单的内容</p><p>​    通过正则表达式进行表单的验证</p><p>​    发送ajax请求，将数据传递给服务器</p><p>​    验证成功后，服务器会返回结果，需要前端解析这个数据，并且决定显示声明内容</p><p>​        -前端渲染和前端路由</p><ul><li><strong>get和post</strong></li></ul><p>提交表单数据时，浏览器发送的是http请求，有2种请求方法可以选择</p><p><strong>get</strong></p><p>​    请求URL后以 “?” 的形式跟上发给服务器的参数，多个参数之间用&amp;隔开</p><p>​        如：<a href="http://www.baidu.com/login?username=111password=222&amp;sex=1">http://www.baidu.com/login?username=111password=222&amp;sex=1</a></p><p>​    由于浏览器和服务器对URL长度有限制，因此在URL后面附带的参数是有限制的，通常不能超过1KB</p><p><strong>post</strong></p><p>​    发送服务器的参数全部放在请求体中</p><p>​    理论上，post传递的数据量没有限制(具体还得看服务器的处理能力)</p><h1 id="二-HTML5"><a href="#二-HTML5" class="headerlink" title="二. HTML5"></a>二. HTML5</h1><p><strong>新增标签</strong>（IE9+以上浏览器支持）</p><h2 id="1-新增的语义化标签"><a href="#1-新增的语义化标签" class="headerlink" title="1. 新增的语义化标签"></a>1. 新增的语义化标签</h2><p>header头部  nav 导航  article 内容</p><p>section 定义文档某个区域  aside侧边栏   footer尾部</p><p> <img src="/img/html_html5%E6%96%B0%E5%A2%9E.png" alt="img"></p><p>注：主要针对搜索引擎/可以多次使用/IE9中需要转化为块级元素</p><h2 id="2-新增的多媒体标签"><a href="#2-新增的多媒体标签" class="headerlink" title="2. 新增的多媒体标签"></a>2. 新增的多媒体标签</h2><p>(谷歌把音频和视频自动播放静止了)</p><p>音频标签：audio  视频标签：video</p><p><strong>视频 video</strong></p><p>-支持MP4 WebM Ogg（尽量使用mp4）</p><p>-语法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">controls</span>=<span class="hljs-string">&quot;controls&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">video</span>&gt;</span><br></code></pre></td></tr></table></figure><p>src 路径  autoplay自动播放（谷歌需要添加muted=”muted”解决）       controls播放控件  loop循环播放(loop=”loop”)以上都是</p><p>width/height 宽高  preload:auto/none预先加载(有autoplay忽略) </p><p>poster  等待的画面图片(视频播放前)</p><p>兼容写法: </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">video</span> &gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">source</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;.mp4&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">source</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">source</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;.0gg&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">source</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">video</span>&gt;</span><br></code></pre></td></tr></table></figure><p>   <strong>音频 audio</strong></p><p> -所有浏览器都支持MP3（部分Wav Ogg）</p><p> -语法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">audio</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">controls</span>=<span class="hljs-string">&quot;controls&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">audio</span>&gt;</span><br></code></pre></td></tr></table></figure><p> -属性：src  autoplay  controls  loop</p><h2 id="3-新增input表单"><a href="#3-新增input表单" class="headerlink" title="3. 新增input表单"></a>3. 新增input表单</h2><p>type=”email/url/date/time/month/week/number/tel/search/color”</p><p>(以下属性加入from表单后，加入submit提交按钮，点击会验证输入是否正确)</p><h2 id="4-新增表单属性"><a href="#4-新增表单属性" class="headerlink" title="4. 新增表单属性"></a>4. 新增表单属性</h2><p>required 不为空(required=”required”)</p><p><strong>placeholder</strong> 提示信息(placeholder=”文字内容”)</p><p>autofocus 自动聚焦(autofocus=”autofocus”)</p><p>autocomplete 默认on打开/关闭用”off”(有name属性并成功提交才生效)</p><p>​    -当用户输入时显示用户之前输入的记录</p><p><strong>multiple</strong> 多选文件(multiple=”multiple”)</p><p>  PS: 可通过input::placeholder{color:pink;}修改里面文字颜色</p><h1 id="三-知识补充"><a href="#三-知识补充" class="headerlink" title="三. 知识补充"></a>三. 知识补充</h1><h2 id="3-1-字符实体"><a href="#3-1-字符实体" class="headerlink" title="3.1 字符实体"></a>3.1 字符实体</h2><ul><li>通常用于显示保留字符（会被解析成html代码，如&lt; &gt;）和不可见字符（空格）</li><li>格式：&amp;开头   ;号结尾</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">&amp;nbsp;    <span class="hljs-comment">//空格   text-index: 2em;  //段前缩进</span><br>&amp;lt; &amp;gt; <span class="hljs-comment">//&lt; &gt;符号 less than/great than</span><br></code></pre></td></tr></table></figure><h2 id="3-2-URL地址"><a href="#3-2-URL地址" class="headerlink" title="3.2 URL地址"></a>3.2 URL地址</h2><ul><li><p><strong>URL</strong></p><ul><li>URL-Uniform Resource Locator（统一资源定位符）</li><li>URL是资源的地址，网络上每个资源都有唯一的一个URL</li></ul></li><li><p>格式</p><ul><li><p>协议类型://服务器地址:端口号/文件路径/文件名?查询#片断ID</p></li><li><p>scheme://host:port/path?query#[fragment]</p></li><li><p>protocol://hostname[:port]/path/[;parameters][?query]#fragment</p></li><li><p>举例：<a href="https://www.baidu.com:80/image/test?name=kygo&amp;age=18#top">https://www.baidu.com:80/image/test?name=kygo&amp;age=18#top</a></p><p>注意：query中可以传递多个参数用&amp;连接、片断ID指的是a元素锚点链接</p></li></ul></li><li><p>URL和URI的区别</p><ul><li>URI：URL-Uniform Resource Identifier 统一资源标志符(标识Web技术使用的逻辑或物理资源)</li><li>URL：统一资源定位符（网络地址，相当于网络中的门牌号）</li><li>URI在某个规则下能把一个资源独一无二的识别出来，所以URL属于URI，但URI不一定都是URL</li></ul></li></ul><h2 id="3-3-元素语义化"><a href="#3-3-元素语义化" class="headerlink" title="3.3 元素语义化"></a>3.3 元素语义化</h2><ul><li><p>用正确的元素做正确的事：比如实现标题就用h元素而不是div等</p></li><li><p>好处：</p><ul><li><p>方便代码维护</p></li><li><p>减少开发者之间的沟通成本</p></li><li><p>有利于SEO</p></li><li><p>让语音合成工具正确识别网页元素的用途，以便做出正确的反应</p></li></ul></li></ul><h2 id="3-4-SEO优化"><a href="#3-4-SEO优化" class="headerlink" title="3.4 SEO优化"></a>3.4 SEO优化</h2><ul><li><p>SEO：搜索引擎优化(Search Engine Optimization)</p></li><li><p>是通过了解搜索引擎的运作规则来调整网站，以及提高网站在搜索引擎内排名的方式</p></li><li><p>h元素有助于网站的SEO优化，可以促进关键词排名</p><p>建议：在一个网页中最多只有一个h1元素（否则会被搜索引擎认为作弊）</p></li></ul><h2 id="3-5-字符编码"><a href="#3-5-字符编码" class="headerlink" title="3.5 字符编码"></a>3.5 字符编码</h2><ul><li>为什么需要字符编码<ul><li>计算机底层只能识别0、1组成的二进制数（底层硬件实现就是电路的开和闭）</li><li>所以为了能在计算机上表示、存储、处理像文字、图像、符号等，就需要转换成二进制</li><li>所以就出现了编码（encode）和解码（decode）</li></ul></li><li>字符的编码和解码<ul><li>编码encode：文本、符号、图像等通过一定的编码格式=&gt;二进制存储在计算机内</li><li>解码decode：计算机内部存储的二进制 =&gt; 我们看到的文本、图像、符号等</li></ul></li><li>编码类型<ul><li>编码/解码过程中需要选择用哪种编码/解码的方式来实现</li><li>常见的方式：ASCLL、GBK、UTF-8</li><li>其中最常用的就是UTF-8</li></ul></li><li>乱码出现的情况<ul><li>必须保证编码和解码用的是同一种方式 否则就会出现乱码</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>1. HTML/CSS</category>
      
      <category>HTML</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Javascript详解</title>
    <link href="/2022/03/24/3.%20js/"/>
    <url>/2022/03/24/3.%20js/</url>
    
    <content type="html"><![CDATA[<h1 id="JS基础"><a href="#JS基础" class="headerlink" title="JS基础"></a>JS基础</h1><h2 id="1-JS基本概念"><a href="#1-JS基本概念" class="headerlink" title="1. JS基本概念"></a>1. JS基本概念</h2><ul><li><strong>JS简介</strong></li></ul><p>脚本语言、解释型语言(不需编译，边解析边执行)</p><p>作用：html-结构  css-美化  js-交互/控制网页行为</p><p>组成：ECMAScript DOM BOM</p><p>注意：严格区分大小写、每条语句必须加;</p><ul><li><strong>JS引入位置</strong></li></ul><p>位置：行内/内部/外部引入  (外部src引入的script标签中不能写js代码，不然无效)</p><figure class="highlight html"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 行内引入 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;alert(&#x27;我是js代码&#x27;)&quot;</span>&gt;</span>点一下<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 内部引入 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  alert(<span class="hljs-string">&quot;内部引入js&quot;</span>)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 外部引入 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./out.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注意点：js代码放到head，并需要通过js操作页面元素时就会失效(浏览器从上至下执行)</p><p>解决：加上window.onload=function(){ js代码 }  (内部外部都可以加)</p><p>​            将script或script-src放到body结束标签之前</p><ul><li><strong>常见输出方式</strong></li></ul><p>弹窗：alert()-确定按钮  confirm()-确定取消  prompt()-确定取消输入框    </p><p>网页内容区域：document.write()  </p><p>控制台：普通console.log(a,b)  警告console.warn()  错误console.error()</p><h2 id="2-ECMAScript"><a href="#2-ECMAScript" class="headerlink" title="2. ECMAScript"></a>2. ECMAScript</h2><h3 id="2-1-常量和变量"><a href="#2-1-常量和变量" class="headerlink" title="2.1 常量和变量"></a>2.1 常量和变量</h3><p>常量：整形、实型、字符串、布尔、自定义常量(ES6: const关键字/不能改变)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-number">1</span> <span class="hljs-number">1.2</span> <span class="hljs-string">&quot;2&quot;</span> <span class="hljs-literal">true</span> <br><span class="hljs-keyword">const</span> name=<span class="hljs-string">&quot;cth&quot;</span>;<br></code></pre></td></tr></table></figure><p>变量：var 变量名称;  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//可同时变量初始化、赋值,没有初始化值为undefined</span><br><span class="hljs-keyword">var</span> a,b;  a=b=<span class="hljs-number">213</span>;  <br><span class="hljs-keyword">var</span> c=<span class="hljs-number">213</span>,d=<span class="hljs-number">318</span>;<br></code></pre></td></tr></table></figure><p>预处理(解析)：将所有变量和函数的定义放到所有代码最前面，所以可以先使用再定义变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(a);  <span class="hljs-comment">//undefined</span><br><span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><p>ES6变量定义：let 变量名称;</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> a=<span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><p>注：let定义过的变量重新定义报错(方便查找)，而老版本的var不会</p><p>​        let定义的变量不会预解析，必须先定义再使用，否则会报错</p><p>补：字面量是具体的值，存储在常量或变量中</p><p><strong>标识符、注释</strong></p><p>关键字(以及保留字)：如 var、if一系列js中定义好的</p><p>标识符：凡是可以自己命名的都叫标识符</p><p>(字母数字下划线美元符号组成，不能数字开头,汉字(utf-8)可以，不能以关键字命名)</p><p>注释：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//我是单行注释</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">我是多行注释</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h3 id="2-2-数据类型及转换"><a href="#2-2-数据类型及转换" class="headerlink" title="2.2 数据类型及转换"></a>2.2 数据类型及转换</h3><p>数据类型 number string boolean null undefined object(引用类型)</p><ul><li>number</li></ul><p>number:  JS所有数值(整数和浮点数)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//number、NaN、MAX、MIN、Infinity、-Infinity</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Number</span>.MAX_VALUE); <span class="hljs-comment">//最大值</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Number</span>.MIN_VALUE); <span class="hljs-comment">//最小值</span><br><span class="hljs-comment">//Infinity/-Infinity（无穷大和无穷小，全局对象的属性 window.Infinity）</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span> / <span class="hljs-number">0</span>);   <span class="hljs-comment">//Infinity  0/0=NaN</span><br><span class="hljs-built_in">console</span>.log(-<span class="hljs-number">1</span> / <span class="hljs-number">0</span>);  <span class="hljs-comment">//-Infinity</span><br><span class="hljs-comment">//NAN(not a number)非数值  </span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Number</span>(<span class="hljs-string">&quot;123cth&quot;</span>));<br></code></pre></td></tr></table></figure><p>注意：不要使用js进行精度要求较高的计算</p><ul><li>string</li></ul><p>“ ”/ ’ ’  引号不能嵌套-可作为转译字符 \” \’ \n \ 等</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a=<span class="hljs-string">&quot;1&quot;</span>; <span class="hljs-keyword">var</span> a=<span class="hljs-string">&#x27;1&#x27;</span><br></code></pre></td></tr></table></figure><ul><li>boolean</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-literal">true</span>/<span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><ul><li>null/undefined</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//都只有一个值就是本身</span><br><span class="hljs-literal">null</span> <span class="hljs-comment">//空对象</span><br><span class="hljs-literal">undefined</span> <span class="hljs-comment">//没有初始化变量</span><br></code></pre></td></tr></table></figure><p>  (typeof检查类型)</p><ul><li><strong>转换</strong></li></ul><p><strong>转string</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//三种方法：toString()  String()  +&quot;&quot;</span><br><span class="hljs-keyword">var</span> num = <span class="hljs-number">2</span>;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">String</span>(num) + <span class="hljs-string">&quot; 类型：&quot;</span> + <span class="hljs-keyword">typeof</span> <span class="hljs-built_in">String</span>(num));<br><span class="hljs-built_in">console</span>.log(num.toString() + <span class="hljs-string">&quot; 类型：&quot;</span> + <span class="hljs-keyword">typeof</span> num.toString());<br><span class="hljs-built_in">console</span>.log(num + <span class="hljs-string">&quot;&quot;</span> + <span class="hljs-string">&quot; 类型：&quot;</span> + <span class="hljs-keyword">typeof</span>(num + <span class="hljs-string">&quot;&quot;</span>));<br><span class="hljs-comment">/*Result</span><br><span class="hljs-comment">2 类型：string</span><br><span class="hljs-comment">2 类型：string</span><br><span class="hljs-comment">2 类型：string */</span><br><br><span class="hljs-comment">//toString()转换undefined与null类型会报错,toString()可以转换数字进制，在()指定</span><br><span class="hljs-keyword">var</span> num = <span class="hljs-number">7</span><br><span class="hljs-built_in">console</span>.log(num.toString(<span class="hljs-number">2</span>));<span class="hljs-comment">//进制转换 111</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-literal">undefined</span>.toString()); <span class="hljs-comment">//报错</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-literal">null</span>.toString());<span class="hljs-comment">//报错</span><br></code></pre></td></tr></table></figure><p><strong>转number</strong>  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//Number()  +  parseInt()/parseFloat()-字符串转数字专用</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-literal">true</span> + <span class="hljs-number">0</span>);  <span class="hljs-comment">//+不能转换字符串为数字</span><br><br><span class="hljs-comment">//string转number 如果不是纯数字-&gt; NaN</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;value=&quot;</span> + <span class="hljs-built_in">Number</span>(<span class="hljs-string">&quot;123a&quot;</span>) + <span class="hljs-string">&quot; type=&quot;</span> + <span class="hljs-keyword">typeof</span> <span class="hljs-built_in">Number</span>(<span class="hljs-string">&quot;123a&quot;</span>));<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">parseInt() 和 parseFloat()专门用于转换非纯数字</span><br><span class="hljs-comment">解析到第一个非数值为止  如parseInt(c3px) -&gt;NaN */</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;value=&quot;</span> + <span class="hljs-built_in">parseInt</span>(<span class="hljs-string">&quot;123a&quot;</span>) + <span class="hljs-string">&quot; type=&quot;</span> + <span class="hljs-keyword">typeof</span> <span class="hljs-built_in">parseInt</span>(<span class="hljs-string">&quot;123a&quot;</span>));<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;value=&quot;</span> + <span class="hljs-built_in">parseFloat</span>(<span class="hljs-string">&quot;123.123a&quot;</span>) + <span class="hljs-string">&quot; type=&quot;</span> + <span class="hljs-keyword">typeof</span> <span class="hljs-built_in">parseInt</span>(<span class="hljs-string">&quot;123a&quot;</span>));<br><br><span class="hljs-comment">//空、空格字符串/null/false都是0  undefined/非纯数字-&gt;NaN</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;false:&quot;</span> + <span class="hljs-built_in">Number</span>(<span class="hljs-literal">false</span>) + <span class="hljs-string">&quot; 空:&quot;</span> + <span class="hljs-built_in">Number</span>(<span class="hljs-string">&quot; &quot;</span>) + <span class="hljs-string">&quot; null:&quot;</span> + <span class="hljs-built_in">Number</span>(<span class="hljs-literal">null</span>) <br>            + <span class="hljs-string">&quot; undefined:&quot;</span> + <span class="hljs-built_in">Number</span>(<span class="hljs-literal">undefined</span>));<br><span class="hljs-comment">//Result</span><br><span class="hljs-number">1</span><br>value=<span class="hljs-literal">NaN</span> type=number<br>value=<span class="hljs-number">123</span> type=number<br>value=<span class="hljs-number">123.123</span> type=number<br><span class="hljs-attr">false</span>:<span class="hljs-number">0</span> 空:<span class="hljs-number">0</span> <span class="hljs-literal">null</span>:<span class="hljs-number">0</span> <span class="hljs-literal">undefined</span>:<span class="hljs-literal">NaN</span><br></code></pre></td></tr></table></figure><p><strong>转boolean</strong>  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//Boolean()  !!</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;Res: &quot;</span> + <span class="hljs-string">&quot;1-&gt;&quot;</span> + <span class="hljs-built_in">Boolean</span>(<span class="hljs-number">1</span>) + <span class="hljs-string">&quot; 0-&gt;&quot;</span> + <span class="hljs-built_in">Boolean</span>(<span class="hljs-number">0</span>) + <span class="hljs-string">&quot; NaN-&gt;&quot;</span> + <span class="hljs-built_in">Boolean</span>(<span class="hljs-literal">NaN</span>));<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;Res: &quot;</span> + <span class="hljs-string">&quot;空str-&gt;&quot;</span> + <span class="hljs-built_in">Boolean</span>(<span class="hljs-string">&quot;&quot;</span>) + <span class="hljs-string">&quot; str-&gt;&quot;</span> + <span class="hljs-built_in">Boolean</span>(<span class="hljs-string">&quot;cth&quot;</span>));<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;Res: &quot;</span> + <span class="hljs-string">&quot;null-&gt;&quot;</span> + <span class="hljs-built_in">Boolean</span>(<span class="hljs-literal">null</span>) + <span class="hljs-string">&quot; undefined-&gt;&quot;</span> + <br>            <span class="hljs-built_in">Boolean</span>(<span class="hljs-literal">undefined</span>) + <span class="hljs-string">&quot; Object-&gt;&quot;</span> + <span class="hljs-built_in">Boolean</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>()));<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;Res: &quot;</span> + !!<span class="hljs-string">&quot;cth&quot;</span>);<br><br><span class="hljs-comment">//Res</span><br>Res: <span class="hljs-number">1</span>-&gt;<span class="hljs-literal">true</span> <span class="hljs-number">0</span>-&gt;<span class="hljs-literal">false</span> <span class="hljs-literal">NaN</span>-&gt;<span class="hljs-literal">false</span><br><span class="hljs-attr">Res</span>: 空str-&gt;<span class="hljs-literal">false</span> str-&gt;<span class="hljs-literal">true</span><br><span class="hljs-attr">Res</span>: <span class="hljs-literal">null</span>-&gt;<span class="hljs-literal">false</span> <span class="hljs-literal">undefined</span>-&gt;<span class="hljs-literal">false</span> <span class="hljs-built_in">Object</span>-&gt;<span class="hljs-literal">true</span><br><span class="hljs-attr">Res</span>: <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>注意：空字符串/0/NaN/null/undefined  -&gt;false</p><p>​    </p><h3 id="2-3-运算符"><a href="#2-3-运算符" class="headerlink" title="2.3 运算符"></a>2.3 运算符</h3><ul><li>分类</li></ul><p>功能分：算数运算符/位运算符/关系运算符/逻辑运算符</p><p>操作数分：单目/双目/三目运算符</p><ul><li><strong>算数运算符</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/*左结合性(从左到右计算)</span><br><span class="hljs-comment">NaN和任何运算都是NaN，都会先转换为number再计算(+&quot;&quot;除外)</span><br><span class="hljs-comment">m%n=余数  m&gt;n余数  m&lt;n m  n=0 NaN  结果正负性取决于m</span><br><span class="hljs-comment">*/</span><br>+ - * / %<br></code></pre></td></tr></table></figure><ul><li><strong>赋值运算符</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//优先级低于算数运算符、右结合性</span><br>=  +=  -=  *=  /=  %=  <br></code></pre></td></tr></table></figure><ul><li><strong>自增自减运算符</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//n++和++n区别：n++表达式值为n, ++n为n+1</span><br>++  --  <br></code></pre></td></tr></table></figure><p>尽量单独出现，不推荐在表达式中写</p><ul><li><strong>关系运算符</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//左结合性,前四个优先级高后四</span><br>&gt;  &lt;  &gt;=  &lt;=  ==  !=  ===  !==  <br> <br><span class="hljs-comment">//三种种特殊比较 </span><br><span class="hljs-literal">null</span>==<span class="hljs-number">0</span> <span class="hljs-literal">false</span>  <br><span class="hljs-literal">undefined</span>==<span class="hljs-number">0</span> <span class="hljs-literal">false</span>  <br><span class="hljs-literal">null</span>==<span class="hljs-literal">undefined</span> <span class="hljs-literal">true</span> <span class="hljs-comment">//null衍生的</span><br><br><span class="hljs-comment">//判断是否是NaN，NaN==NaN(不能这样判断)  </span><br><span class="hljs-built_in">isNaN</span>()  <br><br><span class="hljs-comment">//== 和 ===区别：===只有取值和数据类型完全相同才会返回true</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;1&quot;</span> == <span class="hljs-literal">true</span>);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;1&quot;</span> === <span class="hljs-literal">true</span>);<br></code></pre></td></tr></table></figure><p>注意：</p><p>关系成立就返回true，不成立就返回false</p><p>任何非数值类型，先转换为数值类型再判断(字符串和字符串比较除外)</p><p>参与比较的都是字符串，比较对应的Unicode编码(一位一位比较Unicode)</p><p>任何数据和NaN比较，返回值都是false</p><ul><li><strong>逻辑运算符</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/*左结合性  </span><br><span class="hljs-comment">&amp;&amp;优先级高于||  </span><br><span class="hljs-comment">不是boolean先转换为boolean再计算*/</span><br><br>&amp;&amp;  <span class="hljs-comment">//逻辑与 一假则假  </span><br>||  <span class="hljs-comment">//逻辑或 一真则真  </span><br>!   <span class="hljs-comment">//逻辑非 </span><br></code></pre></td></tr></table></figure><p>短路现象：&amp;&amp;只要前面是假，后面的语句不会执行(检查)，||相反</p><p><strong>非布尔值的与或运算</strong></p><p>A &amp;&amp; B  A不成立返回A，否则返回B</p><p>A ||B    A成立返回A，否则返回B</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//先转换布尔值，返回原值</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">0</span> &amp;&amp; <span class="hljs-number">1</span>); <span class="hljs-comment">//0不成立，直接返回</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span> &amp;&amp; <span class="hljs-number">0</span>); <span class="hljs-comment">//1成立，所以返回0</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span> || <span class="hljs-number">0</span>); <span class="hljs-comment">//1成立，所以返回1</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">0</span> || <span class="hljs-number">1</span>); <span class="hljs-comment">//0不成立，所以返回1</span><br></code></pre></td></tr></table></figure><p>总结：如果第一个参数能决定整个表达式的真假，那么返回第一个参数，否则返回第二个</p><ul><li> 其他运算符</li></ul><p>逗号运算符：简化代码/优先级最低/左结合性/运算结果是最后一个表达式结果</p><p>单目运算符：typeof/+/ -  +可用于隐式类型转换为number</p><p>三目运算符(条件运算符)：  条件表达式 ? 结果A : 结果B  true-返回A</p><h3 id="2-4-流程控制"><a href="#2-4-流程控制" class="headerlink" title="2.4 流程控制"></a>2.4 流程控制</h3><p>顺序结构、选择结构、循环结构  只有一条语句可省略{}        </p><ul><li>选择结构</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//只有一个会执行非布尔先转布尔再判断 </span><br><span class="hljs-keyword">if</span> / <span class="hljs-keyword">if</span> <span class="hljs-keyword">else</span> / <span class="hljs-keyword">if</span>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ...  <span class="hljs-keyword">else</span> <br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">break作用是结束整个switch语句</span><br><span class="hljs-comment">一旦case或default被匹配，其他case和default都会失效</span><br><span class="hljs-comment">case判断的是===  ()和case的表达式可以是常量/变量/表达式</span><br><span class="hljs-comment">default可以省略且不一定在最后</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">switch</span>(表达式)&#123;<span class="hljs-keyword">case</span> 表达式: ...break; ... <span class="hljs-keyword">default</span>: ... <span class="hljs-keyword">break</span>;&#125;  <br></code></pre></td></tr></table></figure><p>if/switch如何选择：对区间判断用if  对固定值判断用switch（能用if就用if）</p><ul><li>循环结构</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">while</span>/<span class="hljs-keyword">do</span>-<span class="hljs-keyword">while</span>/<span class="hljs-keyword">for</span><br><br><span class="hljs-comment">//这样写i只能在for中使用,变量作用域-let定义的变量在&#123;&#125;中有局部作用域</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;&#125; <br></code></pre></td></tr></table></figure><p>break/continue关键字</p><p>在不知道具体循环次数的时候用while（for循环更加灵活，能用for就用for）</p><h3 id="2-5-数组"><a href="#2-5-数组" class="headerlink" title="2.5 数组"></a>2.5 数组</h3><ul><li>数组的创建方式</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//对象创建</span><br><span class="hljs-keyword">let</span> arr=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(size);<br><span class="hljs-comment">//构造函数创建</span><br><span class="hljs-keyword">let</span> arr=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(data1,data2...);  <span class="hljs-comment">//空/data/size</span><br><span class="hljs-comment">//字面量创建(一般使用)</span><br><span class="hljs-keyword">let</span> arr=[data1,data2...];  <span class="hljs-comment">//可为空数组</span><br></code></pre></td></tr></table></figure><ul><li><p>数组的注意点</p><ul><li><p>数组对应索引没有存储数据时默认为undefined</p></li><li><p>访问数组不存在的索引不会报错，返回undefined</p></li><li><p>数组存储空间不足时会自动扩容</p></li><li><p>数组可以存储不同的数据类型</p></li><li><p>数组分配的存储空间不一定是连续的(因为存储的数据类型不同)</p></li></ul></li></ul><ul><li>数组的遍历</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">arr.length /arr.forEach()<br></code></pre></td></tr></table></figure><ul><li>数组解构赋值 </li></ul><p>ES6新增赋值方法，左边右边格式必须相同，才能完全解构</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//左右边个数可以不一样，会赋值undefined或者多余值丢弃</span><br><span class="hljs-keyword">let</span> [a,b,c]=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br><span class="hljs-keyword">let</span> [a,b=<span class="hljs-number">666</span>,c=<span class="hljs-number">1</span>]=[<span class="hljs-number">1</span>] <span class="hljs-comment">//可以给左边的值指定默认值 </span><br><br><span class="hljs-comment">//ES6扩展运算符：在最后一个字母前加... 可以将多余数据打包</span><br><span class="hljs-keyword">let</span> [a,...b]=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>] <br></code></pre></td></tr></table></figure><p>​    </p><ul><li>数组增删改查</li></ul><p>改：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//参数1:开始索引 2:删除元素个数 3:增添元素</span><br>arr.splice(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-string">&quot;c&quot;</span>,<span class="hljs-string">&quot;t&quot;</span>...) <br></code></pre></td></tr></table></figure><p> 增：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//数组后添加 一个或多个参数 返回新增后长度 </span><br>arr.push(<span class="hljs-string">&quot;cth&quot;</span>,<span class="hljs-string">&quot;wcr&quot;</span>...)<br><span class="hljs-comment">//数组前添加 一个或多个参数 返回长度</span><br>arr.unshift(<span class="hljs-string">&quot;cth&quot;</span>) <br></code></pre></td></tr></table></figure><p>删</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript">arr.pop() <span class="hljs-comment">//数组最后元素删除 返回删除数据</span><br><br>arr.shift()  <span class="hljs-comment">//数组最前元素删除 返回删除数据</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">splice方法:</span><br><span class="hljs-comment">可用于：替换元素，增加元素，删除元素</span><br><span class="hljs-comment">参数：索引位置、删除个数(可为0)，其他参数(增加的元素)</span><br><span class="hljs-comment">前两个参数必须</span><br><span class="hljs-comment">*/</span><br>arr.splice(m,n) <span class="hljs-comment">//从索引为m的元素删除n个元素</span><br></code></pre></td></tr></table></figure><ul><li>数组常用方法</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//清空数组</span><br>arr=[];  arr.length=<span class="hljs-number">0</span>;  arr.splice(<span class="hljs-number">0</span>,arr.length);<br><br><span class="hljs-comment">//数组转换为字符串</span><br>arr.toString();  <br><span class="hljs-comment">//转换成指定格式字符串,将+(参数)作为元素连接符</span><br>arr.join(<span class="hljs-string">&quot;+&quot;</span>)  <br><br><span class="hljs-comment">//数组拼接</span><br>arr1.concat(arr2);<br><span class="hljs-comment">/*arr2拼接到arr1后面，返回新数组，原数组不影响</span><br><span class="hljs-comment">扩展运算符在等号右边：表示将数组所有元素解开，放到所在位置*/</span><br><span class="hljs-keyword">let</span> arr=[...arr1,...arr2];<span class="hljs-comment">//推荐使用</span><br><br><span class="hljs-comment">//数组反转,会修改原有数组</span><br>arr.reverse()  <br><br><span class="hljs-comment">//截取指定范围内容,包头不包尾(m,n为头和尾的索引) </span><br>arr.slice(m,n)  <br><br><span class="hljs-comment">/*查找元素位置,m-查找的元素 n-什么位置开始查找</span><br><span class="hljs-comment">左到右找，返回第一个出现的索引(找不到返回-1)*/</span><br>arr.indexOf(m,n);  <br><span class="hljs-comment">//从右到左找,其他一样</span><br>lastIndexOf(m,n)  <br><br><br><span class="hljs-comment">//是否包含某个元素,返回-1</span><br>indexOf/lastIndexOf  <br><span class="hljs-comment">//ES6,参数是要查找的元素(返回true/false，用这个更好)</span><br>arr.includes();<br><br><span class="hljs-comment">//设置数组所有元素值为指定数据(这里是0)</span><br>arr.fill(<span class="hljs-number">0</span>)  <br></code></pre></td></tr></table></figure><ul><li>二维数组</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr=[ [],[]... ];<br></code></pre></td></tr></table></figure><h3 id="2-6-函数"><a href="#2-6-函数" class="headerlink" title="2.6 函数"></a>2.6 函数</h3><p>作用：用于封装一段可以随时反复执行的代码块</p><ul><li><strong>函数定义</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fun</span>(<span class="hljs-params">形参列表</span>)</span>&#123;... <span class="hljs-keyword">return</span>;&#125;  <br>fun();<br></code></pre></td></tr></table></figure><p>注意：形参和返回值可有可无，无返回值默认返回undefined</p><p>​            return语句和break语句一样后面不要跟代码，永远不会执行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//函数和数组一样也是引用数据类型(对象)，可以保存到一个变量中</span><br><span class="hljs-comment">//另外一种定义函数的格式-函数表达式创建</span><br><span class="hljs-keyword">let</span> fun=<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;&#125;;  <br></code></pre></td></tr></table></figure><ul><li><strong>函数的arguments</strong></li></ul><p>arguments作用：保存所有传递给函数的实参</p><p>每个函数里面都有一个arguments 伪数组，可直接调用</p><p>举例：console.log()  log()就是一个函数，可以接收一个或多个参数（内部实现就用到了arguments）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fun</span>(<span class="hljs-params">a, b</span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">arguments</span>);<br>&#125;<br>fun(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">Result:</span><br><span class="hljs-comment">Arguments(2) [1, 2, callee: ƒ, Symbol(Symbol.iterator): ƒ]</span><br><span class="hljs-comment">0: 1</span><br><span class="hljs-comment">1: 2</span><br><span class="hljs-comment">length: 2 ... */</span><br></code></pre></td></tr></table></figure><ul><li><strong>扩展运算符</strong></li></ul><p>扩展运算符在函数形参列表中的作用</p><p>将传递给函数的所有实参打包到一个数组中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fun</span>(<span class="hljs-params">...arr</span>) </span>&#123;   <span class="hljs-comment">//将参数打包到arr数组</span><br>  <span class="hljs-built_in">console</span>.log(arr); <br>&#125;<br>fun(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><p>注意：和在等号左边一样，也只能写在形参列表最后 </p><ul><li><strong>形参默认值</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//ES6: 直接在形参指定默认值</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fun</span>(<span class="hljs-params">a = <span class="hljs-number">6</span>, b = <span class="hljs-number">6</span></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(a, b);  <span class="hljs-comment">//Result: 6 6</span><br>&#125;<br>fun()<br></code></pre></td></tr></table></figure><p>可以将函数作为其他函数的参数和返回值</p><p>JS中函数可以嵌套定义(函数中可以定义函数)</p><ul><li><strong>匿名函数和立即执行函数</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//匿名函数不能只定义不使用</span><br><span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;...&#125;  <br><span class="hljs-comment">//立即执行函数,立即执行(一次)</span><br>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;...&#125;)(参数);  <br></code></pre></td></tr></table></figure><p>应用场景：作为其他函数的参数/返回值</p><p>​                   作为一个立即执行函数</p><p>​          </p><ul><li><strong>箭头函数</strong></li></ul><p>ES6新增定义函数的格式，为了简化定义函数代码 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//let 函数名称=(形参列表)=&gt;&#123;...&#125;</span><br><span class="hljs-keyword">let</span> fun=<span class="hljs-function">(<span class="hljs-params">a</span>)=&gt;</span>&#123;<br>  <span class="hljs-built_in">console</span>.log(a);<br>&#125;<br></code></pre></td></tr></table></figure><p>注意点：</p><p>​    如果()只有一个形参，括号可以省略 </p><p>​    如果大括号中只有一句代码，那么{}也可以省略</p><p>箭头函数和普通函数的区别</p><p>​    普通函数/方法，谁调用this就是谁</p><p>​    箭头函数的this，是父作用域的this，不是调用者  </p><p>​    注意：箭头函数中的this永远都只看它所属的作用域的this,不能通过bind/call/apply来修改   </p><ul><li><strong>递归函数</strong></li></ul><p>函数中自己调用自己，一定程度上可以实现循环的功能                                                                                                                                     -2021.4.2写/2022.2.27整理</p><ul><li><strong>变量作用域</strong></li></ul><p>JS的三种作用域：全局作用域、局部作用域、块级作用域</p><p>函数{} -局部作用域   if/while/for…{} -块级作用域(除了函数)</p><p>注意：</p><p>​        局部作用域中无论用什么定义都是局部变量(let定义的外界也不能访问)</p><p>​        块级作用域和局部作用域区别：</p><p>​            块级作用域var定义是全局变量，局部作用域是局部变量</p><p>​            无论是块级还是局部作用域，省略let或var就会变全局变量</p><ul><li><strong>作用域链</strong></li></ul><p>ES6之前作用域链：</p><p>​    全局作用域是0级作用域</p><p>​    定义函数开启的作用域是1/2/3…级</p><p>​    JS会将这些作用域连接起来形成作用域链</p><p>​    0-&gt;1-&gt;2-&gt;3-&gt;4… (0级作用域里定义的函数就是1级)</p><p>变量在作用域链查找规则：</p><p>​    先在当前找，找到就使用当前作用域的</p><p>​    当前没有就去上一级作用域查找</p><p>​    以此类推直到0级为止，0级没有找到就报错</p><p>ES6作用域链：</p><p>​    除了定义函数会开启作用域外，代码块也会开启作用域</p><p>​    注意点：要用ES6就全部用ES6如：let、箭头函数(不然容易混淆)</p><p>​    函数预解析：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//ES6之前这种定义函数方式，可以提前调用(会将函数的声明提升到当前作用域最前面)</span><br>say()  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">say</span>(<span class="hljs-params"></span>)</span>&#123;&#125;  <br><span class="hljs-comment">//报错，这样只有变量才会预解析</span><br>say()  <span class="hljs-keyword">var</span> say=<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;&#125;  <br><span class="hljs-comment">//不会被预解析,let定义的</span><br>say()  <span class="hljs-keyword">let</span> say = <span class="hljs-function">() =&gt;</span> &#123;&#125;  <br></code></pre></td></tr></table></figure><p>​       </p><h3 id="2-7-对象"><a href="#2-7-对象" class="headerlink" title="2.7 对象"></a>2.7 对象</h3><p>类 =&gt; 对象 （默认类Object，所有类都是obj的子类）</p><ul><li>创建对象的三种方法</li></ul><p>Way 1</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//通过默认类创建对象</span><br><span class="hljs-keyword">let</span> obj=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>()<br><span class="hljs-comment">//给对象添加属性和行为</span><br>obj.name=”cth”;  obj.say=<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;...&#125;;<br><span class="hljs-comment">//调用  </span><br>obj.name;  obj.say();<br></code></pre></td></tr></table></figure><p>Way 2</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> obj=&#123;&#125;;  obj.name=<span class="hljs-string">&quot;cth&quot;</span> ...<br></code></pre></td></tr></table></figure><p>Way 3</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//属性与属性值:隔开  属性间,隔开</span><br><span class="hljs-keyword">let</span> obj=&#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&quot;cth&quot;</span>,<span class="hljs-attr">age</span>: <span class="hljs-number">33</span>, say():<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;&#125;&#125;; <br></code></pre></td></tr></table></figure><ul><li>属性的操作</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//删除对象属性: delete 对象名.属性名;</span><br><span class="hljs-keyword">delete</span> obj.name;<br><br><span class="hljs-comment">//操作对象属性另一种方式:对象[“属性名”]=属性值 (属性名可不遵守规则)</span><br><span class="hljs-comment">//赋值和读取均要使用这种方式</span><br>obj[<span class="hljs-string">&quot;name&quot;</span>]=<span class="hljs-string">&quot;cth&quot;</span>  <br></code></pre></td></tr></table></figure><ul><li>函数和方法</li></ul><p>没有和类显示绑定在一起就是函数，直接调用</p><p>方法是显示地和其他类绑定在一起，通过对象.方法();调用</p><p>函数内部this是window，方法内部this是当前调用的那个对象</p><p> 工厂函数：专门用于创建对象的函数</p><ul><li>对象的属性方法分类</li></ul><p>实例属性/实例方法:</p><p>​    通过构造函数创建的对象 - 实例对象</p><p>​    通过实例对象访问的属性 - 实例属性</p><p>​    通过实例对象调用的方法 - 实例方法</p><p>静态属性/静态方法:</p><p>​    通过构造函数访问/调用的属性/方法就是静态属性和静态方法</p><p>​    构造函数也是对象：构造函数.属性=…</p><ul><li>构造函数(类)</li></ul><p>作用：专门用于创建对象，是工厂函数简写</p><p>注意：首字母必须大写 只能通过new调用</p><p>​            构造函数中的this就是构造函数创建的对象</p><p>​            将一个构造函数称为一个类(创建的对象-&gt;该类的实例)</p><p><strong>prototype对象</strong> </p><p>可以将构造函数中公共的方法存储到prototype对象中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">Person.prototype=&#123;<span class="hljs-attr">say</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;&#125;&#125;  <span class="hljs-comment">//里面放构造函数公共方法 </span><br></code></pre></td></tr></table></figure><p>prototype对象特点：</p><p>​    存储在prototype中的方法可以被对应构造函数创建的所有对象共享(也可存储属性)</p><p>​    prototype中出现和构造函数重名属性或方法，访问到的是构造函数中的</p><p>应用场景：</p><p>​    prototype中一般用于存储所有对象都相同的属性及方法 </p><ul><li>对象三角恋关系</li></ul><p>每个构造函数都有一个默认属性-prototype</p><p>prototype中保存着一个对象-原型对象</p><p>每个原型对象都有一个默认属性-constructor</p><p>constructor指向当前原型对象对应的那个构造函数</p><p>通过构造函数创建的对象-实例对象</p><p>每个实例对象都有一个默认属性 <strong>proto</strong> (两下划线)</p><p><strong>proto</strong> 指向创建它的那个构造函数的原型对象</p><ul><li>Function构造函数</li></ul><p>​    函数是引用类型(对象)，所有函数都是通过Function构造函数创建的对象</p><p>​    构造函数的__proto__比较特殊，指向它自己的原型对象(和prototype一样)</p><p>​    Object构造函数  Object原型对象的__proto__为null</p><p>​      </p><ul><li>函数关系完整关系</li></ul><p>​      Function函数是所有函数的祖先函数</p><p>​      所有构造函数都有一个prototype属性</p><p>​      所有原型对象都有一个constructor属性</p><p>​      所有函数都是对象</p><p>​      所有对象都有一个__proto__属性                 </p><p> <img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\ksohtml2868\wps1.png" alt="img"><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\ksohtml2868\wps2.png" alt="img"></p><p>​     <img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\ksohtml2868\wps3.png" alt="img"></p><p>​                            -2021.4.3</p><ul><li><p><strong>原型链</strong></p><p>当给构造函数的(.prototype={})赋值时，为了不破坏原有关系</p><p>需要在自定义的对象中手动添加constructor属性，手动指定指向谁(构造函数)</p><p>通过 __proto__ 连接在一起的链叫做原型链</p><p>当使用对象的属性和方法时，自己有用自己的，自己没有去原型中找</p><p>原型没有，就去原型的原型找，一直找到Object的__proto__为NULL为止</p><p>注意：给对象不存在的属性设置值时，不会去原型中查找，会给当前对象新增</p></li><li><p><strong>封装/继承/多态</strong></p></li></ul><p>JS面向对象的三大特性：封装、继承、多态</p><p><strong>封装性</strong></p><p>默认情况对象属性和方法都是公开的，拿到对象就可以操作对象的属性方法</p><p>构造函数中let/var设置私有属性，通过this.设置公有方法修改和访问私有属性</p><p><strong>继承</strong></p><p>bind-call-apply三个方法</p><p>作用：都是用于修改函数或方法中的this的</p><p>obj是新this的指向对象</p><p>bind方法：函数.bind(obj ,参数…);  会返回一个修改后的新函数</p><p>​     也可以函数传参，只不过参数要写在this对象后面</p><p>call方法： 函数.call(obj ,参数…);  会立即调用新函数  可传参</p><p>apply方法：也是立即调用，但传递参数格式不一样，通过数组传参</p><p>​      函数.apply(obj ,[参数…]);  </p><p>修改方法的this：方法.bind() 一样的做法…</p><p>JS继承的终极方法：</p><p>  在子类的构造函数中通过call借助父类的构造函数</p><p>  将子类的原型对象修改为父类的实例对象\</p><p><strong>多态</strong></p><p>强类型语言-变量使用严格符合定义：int就存储整型</p><p>弱类型-不要求变量使用严格符合-JS就是弱类型</p><p>弱类型语言不关注多态</p><h3 id="2-8-ES6类和对象"><a href="#2-8-ES6类和对象" class="headerlink" title="2.8 ES6类和对象"></a>2.8 ES6类和对象</h3><p>ES6开始，提供class关键字定义类</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span></span>&#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;cth&quot;</span>;age=<span class="hljs-number">21</span>;<span class="hljs-function"><span class="hljs-title">say</span>(<span class="hljs-params"></span>)</span>&#123;...&#125;;  <span class="hljs-comment">//直接添加实例属性和方法即可，不用加this</span><br>    <span class="hljs-keyword">static</span> num=<span class="hljs-number">666</span>;  <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-title">run</span>(<span class="hljs-params"></span>)</span>&#123;...&#125;; <span class="hljs-comment">//静态属性和方法, 通过类名调用</span><br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">myname,myage</span>)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name=myname....     <br>&#125;<br>&#125;<br><span class="hljs-comment">//当创建对象时,自动调用constructor()&#123;&#125;构造方法</span><br><span class="hljs-keyword">let</span> per=<span class="hljs-keyword">new</span> Person(“cth”,<span class="hljs-number">21</span>)  <br></code></pre></td></tr></table></figure><p>注意点：直接添加实例属性，大部分浏览器不支持</p><p>​                在ES6标准中添加实例属性需要在constructor中添加</p><p>​                静态属性大部分浏览器不支持static定义(类名.属性定义)</p><p>​                支持static定义静态方法</p><p>在class中直接添加的方法会添加到对象的原型中</p><p>如果想在class上添加方法，必须也写到constructor中</p><p>总结：class写在constructor中的方法都会保存在当前对象中</p><p>写在constructor外面的方法都会保存在原型对象</p><p>(ES6之前有两种给原型添加属性/方法-动态添加或自定义对象添加)</p><p>通过class定义类，当往原型中添加属性和方法时</p><p>不能自定义原型对象添加，只能动态的给原型添加属性和方法</p><p><strong>ES6继承</strong></p><p>​    extends 关键字  super(参数) 通过super调用父类构造函数并传递参数</p><p><strong>获取对象类型</strong></p><p>​    想知道对象通过什么构造函数创建的，一个对象的真实类型</p><p>​    通过 对象.constructor.name  获取构造函数名称</p><ul><li><strong>instanceof</strong> 关键字</li></ul><p>​    用于判断”对象”是否是指定构造函数(类)的“实例”</p><p>​     per instanceof person  //判断per是否是person实例</p><p>​     注意：只要构造函数的原型对象出现在实例对象的原型链中都会返回true</p><p>​     (所有对象都是Object的实例)</p><ul><li>isPrototypeOf属性</li></ul><p>​    用于判断一个对象是否是另一个对象的原型</p><p>​     Person.prototype.isPrototypeOf(p);  //返回true，是p的原型对象</p><p>​     注意点：只要原型对象是在实例对象的原型链中的，都会返回true</p><ul><li><p>in 判断对象属性</p><p> “name” in per  //判断per对象类中或其原型中是否有name属性</p></li></ul><p>​           只要有就会返回true</p><p>   per.hasOwnProperty(“name”);  //只会在对象中查找，不会去查找原型</p><p>-2021.4.4  </p><ul><li>对象增删改查</li></ul><p>​    可以通过[“”]来操作属性和方法</p><p>增：p.name=”cth” p[“name”]=”cth”</p><p>​      p.say=function(){…}  p[“say”]=function(){…}</p><p>​    删：delete p.name;  delete p[“name”];  delete p.say;  delete p[“say”];</p><p>​    改：p.name / p[“name”]=”wcr”  p.say/p[“say”]=function(){} </p><p>​    查：就是调用属性和方法 p.name/p[“name”]  p.say()/p<a href="">“say”</a></p><ul><li>对象的遍历</li></ul><p>就是依次取出对象中所有的属性和方法</p><p>​    for(let key in obj){}  //将对象所有属性方法取出赋值给key这个变量</p><p>​    通过obj[key]取出 不能通过obj.key</p><ul><li>对象解构赋值</li></ul><p>对象结构赋值- {}</p><p>​     obj={name: “cth” , age=21};</p><p>​     let {name,age}=obj;  //除了{}和数组[]不一样,也可使用…</p><p>​     不同：左边的变量名称必须和对象属性名称一致才能解构出来</p><p>​     应用场景：可以直接将对象和数组通过实参传给函数</p><p>​          在形参处用结构赋值接收</p><p>​     let obj={name: “cth”,age=21}  </p><p>​     function say({name,age}){console.log(name,age)}  say(obj);</p><ul><li>深拷贝和浅拷贝</li></ul><p>深拷贝-修改新变量的值不会影响原变量值-基本数据类型都是(栈内存)</p><p>浅拷贝-修改新变量值会影响原来值-引用类型都是浅拷贝(堆内存)</p><p>对象的深拷贝：</p><p>Object.assign(p2,p1);  //将p1对象的属性和方法拷贝到对象p2中</p><p>当p1对象中有引用类型时，以上方法将不能实现深拷贝</p><p>自定义深拷贝函数实现</p><ul><li>this总结</li></ul><p>*以函数形式调用时，this永远都是window</p><p>*以方法的形式调用时，this是调用方法的对象</p><p>*以构造函数的形式调用时，this是新创建的对象</p><p>*使用call和apply调用时，this是指定的那个对象</p><h3 id="2-9-其他"><a href="#2-9-其他" class="headerlink" title="2.9 其他"></a>2.9 其他</h3><h4 id="2-9-1-数组高级API"><a href="#2-9-1-数组高级API" class="headerlink" title="2.9.1 数组高级API"></a>2.9.1 数组高级API</h4><p>​    ****遍历数组****：传统方法、for-in循环(数组也是对象)</p><p>​          for(let key in arr){arr[key];}</p><p>​    不推荐for-in遍历数组，因为其是专门遍历对象的(对象属性无序)</p><p>​    推荐利用ES6中的 for-of 循环来遍历数组</p><p>​       for(let value of arr){console.log(value)};</p><p>​    还可以使用Array对象的forEach方法来遍历数组</p><p>​       arr.forEach(function(currentValue,currentIndex,currentArray){…})</p><p>​       传入一个函数，自动传入参数：数组值，索引，当前数组</p><p>​    <em><strong>*数组查找*</strong></em></p><p>​      findIndex方法：定制版的indexOf，找到返回索引，找不到返回-1</p><p>​             arr.findIndex(function(,,){}) //传入一个函数，三个参数</p><p>​      find方法：find方法返回找到的元素(也接收三个参数)</p><p>​      (注意：判断特定筛选条件时/return true;)</p><p>​    <em><strong>*数组过滤和数组映射*</strong></em></p><p>​      filter方法：将满足条件的元素添加到一个新数组中</p><p>​           (例: if(value%2){return true} 返回数组-所有偶数封装的)</p><p>​      map方法：</p><p>​           将满足条件的元素映射到一个新的数组中</p><p>​           (映射：创建一个相同大小的数组,将所有元素值设置undefined</p><p>​           满足条件的元素将undefined覆盖,不满足的还是undefined)</p><p>​      注意:方法都是传递一个函数为参数，且这个函数传递三个参数value/index/arr</p><p>​                                   -2021.4.5</p><p>​    <em><strong>*数组排序*</strong></em></p><p>​    arr.sort();  //接收一个函数，函数又可以接收两个参数</p><p>​        arr.sort(function(a,b){  //默认升序</p><p>  if(a&gt;b){return 1}  //return -1 就是降序</p><p>  else if(a&lt;b){return -1;}  //return 1就是降序</p><p>  else{return 0;}  //这个不用变</p><p>})</p><p>​        规律：如果数组是字母可以以上方法</p><p>​           如果是数值类型，那么升序返回a-b,降序返回b-a</p><p>​           arr.sort(function(a,b){return a-b})  //升序，b-a降序</p><p>​           对字符串长短进行排序：如 [“qwe”,”a”,”qwer”…]</p><p>​           arr.sort(function(str1,str2){return str1.length-str2.length})</p><p>​           //以上是升序，降序相反  (字符串相当于一个数组可以length) </p><h4 id="2-9-2-字符串常用方法"><a href="#2-9-2-字符串常用方法" class="headerlink" title="2.9.2 字符串常用方法"></a>2.9.2 字符串常用方法</h4><p>在底层字符串是以字符数组的形式保存的  如 [‘h’,’e’,’l’,’l’,’o’]</p><p>可以像操作数组一样str[index]，也可以使用数组的大部分方法</p><p>​    *获取字符串长度  str.length</p><p>​    *获取某个字符   str[index]  str.charAt(index) </p><p>​       区别：str[] 只有高级浏览器才支持，而charAt()没有兼容性问题</p><p>​    *字符串查找  indexOf / lastIndexOf / includes</p><p>​       和数组一样，但要加” ”  如：str.indexOf(“c”) //检查字符”c”</p><p>​    *字符串的拼接 concat / +</p><p>​       str1 + str2  str1.concat(str2)  //推荐使用+</p><p>​    *获取子串  slice / substring / substr</p><p>​       substring(a,b)和slice()功能一样，包前不包后，推荐substring()</p><p>​       substr(a,b)  //从索引为a开始，截取b个字符</p><p>   Other</p><p>​     *字符串切割</p><p>​       str.split(“-”)  //利用-来切割字符串，和arr.join(“-”);相反</p><p>​     *判断是否以指定字符串开头ES6</p><p>​       str.startsWith(“www”); //判断是否以”www”开头</p><p>​     *判断是否以指定字符串结尾ES6  str.endsWith(“”);</p><p>​     *字符串模板ES6</p><p>​       let str=<code>;  //除了”” ‘’ 定义字符串，还可以</code></p><p>​       作用：当html代码需要保存在字符串中，用``不用+拼接</p><p>​          console.log(“我的名字”+cth+”,年龄”+age);</p><p>​         =&gt;console.log(<code>我的名字$&#123;cth&#125;,年龄$&#123;age&#125;</code>);  </p><p>​            2021.4.6</p><h4 id="2-9-3-基本包装类型"><a href="#2-9-3-基本包装类型" class="headerlink" title="2.9.3 基本包装类型"></a>2.9.3 基本包装类型</h4><p>​    基本数据类型变量 没有属性和方法</p><p>​    对象类型 有属性和方法</p><p>​       能访问基本数据类型的属性和方法，因为运行时系统将其包装为对象类型</p><p>​       String() Number() Boolean()</p><h4 id="2-9-4-三大对象"><a href="#2-9-4-三大对象" class="headerlink" title="2.9.4 三大对象"></a>2.9.4 三大对象</h4><p>​    JS提供的三种自带对象：本地对象/内置对象/宿主对象</p><p>​    宿主：JS运行环境</p><p>​       本地对象：与宿主无关，ES标准定义的类(构造函数)</p><p>​            使用时需手动new创建</p><p>​            如：Boolean Number String Array Function Object Date RegExp等</p><p>​       内置对象：与宿主无关，ES已经帮我们创建好的对象</p><p>​            无需手动new  如：Global(全局对象不用关注) Math JSON</p><p>​       宿主对象：浏览器提供的对象</p><p>​            Window Document等</p><p>​            所有BOM和DOM都属于宿主对象</p><h4 id="2-9-5-Math"><a href="#2-9-5-Math" class="headerlink" title="2.9.5 Math"></a>2.9.5 Math</h4><p>​     属于一个工具类，不用创建对象  Math.E  Math.PI</p><p>​    Math.floor() 向下取整  Math.ceil() 向上取整(小数部分有值进1)</p><div class="code-wrapper"><pre><code class="hljs"> Math.round() 四舍五入  Math.abs() 绝对值</code></pre></div><p>​    Math.random随机数  产生 [0,1)随机数</p><p>-2021.4.7</p><h2 id="3-DOM"><a href="#3-DOM" class="headerlink" title="3. DOM"></a>3. DOM</h2><h3 id="3-1-简介"><a href="#3-1-简介" class="headerlink" title="3.1 简介"></a>3.1 简介</h3><p>​    属于宿主对象,包含了window和document  (浏览器提供)</p><p>​      window: 全局对象，代表浏览器打开的一个窗口</p><p>每个窗口都是一个window对象 </p><p>​      document: window的一个属性，这个属性是一个对象</p><p>​           代表当前窗口的整个网页，可以操作整个网页的所有内容</p><p>​      DOM：一套操作HTML标签的API(接口/方法/属性)</p><p>​         文档模型对象(document Object Model)</p><p>​         学习DOM就是学习通过document对象操作网页内容</p><h3 id="3-2-Dom元素获取"><a href="#3-2-Dom元素获取" class="headerlink" title="3.2 Dom元素获取"></a>3.2 Dom元素获取</h3><p>​    HTML标签也称DOM元素/使用document不用加window</p><p>​      通过id获取    document.getElementById(“box”)</p><p>​               (id只有一个，会将其包装为对象返回)</p><p>​      通过class获取   document.getElementsByCalssName(“”)</p><p>​               (返回伪数组)</p><p>​      通过name获取  document.getElementsByName(“test”)</p><p>​               (表单中的name,返回伪数组)</p><p>​      通过标签名获取  document.getElementsByTagName(“div”) 多个</p><p>​      <em><strong>*重点：*</strong></em></p><p>​      通过选择器获取  document.querySelector(“#box”) //所有选择器都可</p><p>​               (只会返回根据指定选择器找到的第一个元素)</p><p>​      通过选择器获取  document.querySelectorAll(“”)  //返回数组(多个)</p><p>​      ****其他方式****：(以下皆是属性)</p><p>​          *获取所有子元素：对象.children  (返回伪数组)</p><p>​                   对象.childNodes </p><p>​           区别：children获取所有子元素/childNodes获取所有节点</p><p>​              节点中包含了文本结点和元素(标签)  </p><p>​          *获取第一个子节点/子元素：.firstChild/.firstElementChild</p><p>​            最后一个子节点/子元素：.lastChild/.lastElementChild</p><p>​          *通过子元素获取父元素/父节点</p><p>​            子元素.parentElement  子元素.parentNode</p><p>​          *获取相邻上一个节点/元素 .previousSibling/.previousElementSibling  </p><p>​           获取相邻下一个节点/元素 .nextSibling/.nextElementSibling</p><p>​          *获取html根标签、body标签、所有标签</p><p>​           document.body  document.documentElement</p><p>​           document.all</p><h3 id="3-3-节点增删改查"><a href="#3-3-节点增删改查" class="headerlink" title="3.3 节点增删改查"></a>3.3 节点增删改查</h3><p>​      创建节点  document.createElement(“span”) 创建并返回节点对象</p><p>​           createTextNode(“text”) //创建文本结点并返回</p><p>​      添加节点  父元素.appendChild(obj)  将元素obj添加到父元素最后</p><p>​      插入节点  父元素.insertBefore(obj1,obj2) 将obj1添加到父元素中obj2前面</p><p>​      替换结点  父元素.replaceChild()(obj1,obj2)  obj1替换obj2</p><p>​      删除节点  节点.parentNode.removeChild(节点) //通过父元素删除指定子元素</p><p>​           //只能通过父元素删除，不能自己删除自己</p><p>​      克隆节点  obj.cloneNode()  //克隆节点obj,默认不会克隆子元素</p><p>克隆其包含所有子元素(指定参数true)</p><h3 id="3-4-属性增删改查"><a href="#3-4-属性增删改查" class="headerlink" title="3.4 属性增删改查"></a>3.4 属性增删改查</h3><p>​     无论通过document创建还是查询的标签，系统都会将元素包装成一个对象返回给我们，系统包装这个对象时，会自动将元素的属性都包装到这个对象中</p><p>​      所以只要拿到对象就可以拿到标签属性，操作标签属性。</p><p>​      获取元素属性  obj.属性名  obj.getAttribute(“属性名”)-可以获取自定义属性</p><p>​             //区别：通过obj.属性名无法获取到自定义属性的取值</p><p>​      修改元素属性  obj.属性名= ”新值” obj.setAttribute(“属性名”,”新值”) </p><p>//区别和获取元素属性一样</p><p>​      新增元素属性  obj.setAttribute(“属性名”,”新值”) </p><p>​             //只有一个方法新增，属性不存在就新增，存在就修改</p><p>​      删除元素属性  obj.属性名=”” (空)  obj.removeArribute(“属性名”) </p><p>​             //removeArribute不仅可以清空自带属性，还可以清空自定义</p><h3 id="3-5-操作元素内容和样式"><a href="#3-5-操作元素内容和样式" class="headerlink" title="3.5 操作元素内容和样式"></a>3.5 操作元素内容和样式</h3><ul><li><strong>操作元素内容</strong></li></ul><p>​    获取元素内容：.innerHTML  .innerText  .textContent (三个属性都可获取)</p><p>​            区别：innerHTML包含标签，其他两个不包含标签</p><p>​               innerHTML和textContent不会去除两端空格(innerText会)</p><p>​      设置元素内容：通过上面三个属性设置 如：obj.innerHTML=””…</p><p>​             通过三种方式设置新的内容都会覆盖原有内容</p><p>​            区别：通过innerHTML设置，如果包含标签，会转换为标签添加</p><p>​               另外两种方式不会转换，会当成字符串直接设置</p><ul><li><strong>操作元素样式</strong></li></ul><p>​    设置元素样式  obj.className=”” //动态设置class属性内容，从而修改样式</p><p>​             通过style属性：obj.style.backgroundColor=”pink”</p><p>​             //注意：css中通过-连接的都改为驼峰命名</p><p>​                 通过style添加的样式都是行内样式</p><p>​    获取元素样式  obj.style //只能获取行内样式值，css设置的值获取不到</p><p>​             let obj1= window.getComputedStyle(obj);  obj1.width</p><p>​             //返回一个对象，保存了css设置的样式和属性值</p><h3 id="3-6-事件和事件绑定"><a href="#3-6-事件和事件绑定" class="headerlink" title="3.6 事件和事件绑定"></a>3.6 事件和事件绑定</h3><p>用户和浏览器的交互行为-事件  如：点击 移入/移出</p><p>所有HTML标签都可以添加事件</p><p>​      元素.事件名称=function(){};  //事件触发时自动执行函数</p><p>​      单击事件：btn.onclick=function(){alert(…);}</p><p>​      注意：如果给元素添加了和系统同名事件，不会覆盖系统添加的事件</p><p>​         如果想覆盖，在function(){return false;}</p><p> <em><strong>*事件*</strong></em></p><p>​      *添加事件的三种方式   </p><p>​       Way1：oBtn.onclick=function(){…}  </p><p>//注意点：给同一元素多次添加相同事件后面的会覆盖前面的</p><p>​       Way2：oBtn.addEventListener(“click”,function(){…})  </p><p> //事件名称不加on,事件不会覆盖,IE9以上</p><p>​       Way3：oBtn.attachEvent(“onclick”,function(){…});</p><p>//事件名称加on,不会覆盖,只支持低级浏览器</p><p>​      *事件对象event</p><p>​       当注册事件被触发时，系统就会自动创建事件对象</p><p>​       oBtn.onclick=function(event){…}  //回调函数里传递的形参就是事件对象</p><p>​       注意点：低级浏览器不支持 兼容：event=event||window.event;</p><p>​       event.preventDefault()  //阻止默认行为(以前的return false 企业开发推荐)</p><p>​      *事件冒泡和捕获</p><p>​       事件执行的三个阶段：</p><p>​       First：捕获阶段(从外向内的传递事件)</p><p>​          父元素捕获到事件-&gt;子元素捕获到事件</p><p>​       Second：当前目标阶段(执行回调函数)  -&gt;触发回调函数</p><p>​       Third：冒泡的阶段(从内向外的传递事件)</p><p>​          子元素抛出事件-&gt;父元素抛出事件</p><p>​       注意：三个阶段只有两个会被同时执行</p><p>​          要么捕获和当前,要么当前和冒泡</p><p>​       Why: JS处理事件的历史问题,W3C将两种方式都纳入标准</p><p>​      How设置事件到底是捕获还是冒泡?</p><p>​         只能通过addEventlistener方法,接收三个参数</p><p>​         (事件名称,回调函数,false冒泡/true捕获)</p><p>​         注意：通过onXXX和attachEvent 方式添加的事件都是冒泡</p><p>​      事件冒泡的阻止：event.stopPropagation() //只支持高级浏览器IE9以上</p><p>​              event.cancelBubble=true;  //支持低浏览器</p><p>  <em><strong>*移入移出事件*</strong></em></p><p>​      移入：onmouseover/onmouseenter  例:odiv.onmouseover=function(){…}</p><p>​         (初学者为了避免位置的bug，建议使用onmouseenter)</p><p>​      移出：onmouseout/onmouseleave  (建议leave)</p><p>​      移动：onmousemove</p><p>​      两种移入移除事件的区别：</p><p>​        onmouseover和onmouseenter</p><p>​          over移入到子元素,父元素移入事件也会被触发/enter不会</p><p>​        onmouseout和onmouseleave</p><p>​          out移出子元素,父元素移出事件也会被触发/leave不会</p><p>​      </p><p>​      事件对象的属性：</p><p>​        event.offsetX/offsetY clientX/clientY pageX/pageY screenX/screenY</p><p>​        offsetX/offsetY  事件触发相对于当前元素自身的位置</p><p>​        clientX/clientY  事件触发相对于浏览器可视区域的位置</p><p>​               (可视区域是不包括滚动条滚动出去的范围)</p><p>​        pageX/pageY  事件触发相对于整个网页的位置(包括滚动出去的范围)</p><p>​        (注意: 没有滚动条时,client和page一样,但page不兼容IE9以下)</p><p>​        screenX/screenY 事件触发相对于显示器的位置(用不上,了解即可)</p><p>表单事件</p><p>​     表单验证-value属性拿到input值</p><p>​     如果想要不触发默认事件，如a链接/表单提交,那么return false即可</p><p>​     表单事件：</p><p>​         监听input获取焦点  oInput.onfocus()=function(){}</p><p>​         监听input失去焦点  onblur</p><p>​         监听input内容改变  onchange  //只有表单失去焦点才会监听改变</p><p>​                   oninput  //实时获取数据,IE9及以上才能使用</p><p>(通过代码oText.value=””给input数据，不会触发oninput事件)</p><p>​     补充：默认不可用-添加disabled属性</p><p>​        在JS中如果HTML标签的属性名和取值一样,那么JS会返回false/true</p><p>​        例：oSubmit.disable=true  //使按钮不可用</p><h3 id="3-7-定时器"><a href="#3-7-定时器" class="headerlink" title="3.7 定时器"></a>3.7 定时器</h3><p>​    *重复执行的定时器(window可省略)</p><p>​      创建：window.setInterval(function(){…},1000); </p><p>//参数：一个函数，一个毫秒值</p><p>​              每隔一段时间(第二个参数)，执行函数(第一个参数)</p><p>​      销毁：let id=window.setInterval(…);  clearInterval(id);</p><p>​         //创建定时器时会返回一个标识，用于销毁使用</p><p>​      *只执行一次的定时器  </p><p>​       创建：window.setTimeout(function(){…},1000) </p><p>//1000毫秒执行一次函数</p><p>​       销毁：let id=window.setTimeout(…);  clearTimeout(id);</p><p>​                              2021.4.10  </p><p>注意：谷歌浏览器默认情况下不允许自动播放音乐，</p><p>只有用户和网页交互后才可以播放音乐。</p><p>​    解决方案：让用户和网页交互后再播放  调用audio的play方法</p><p>​                              2021.4.13</p><h3 id="3-8-闭包"><a href="#3-8-闭包" class="headerlink" title="3.8 闭包"></a>3.8 闭包</h3><p>​      *什么是闭包：闭包是一种特殊的函数</p><p>​      *如何生成一个闭包：</p><p>​        当一个内部函数引用了外部函数的数据(变量/函数)时,内部函数就是闭包</p><p>​        所以只要满足”是函数嵌套”、”内部函数引用外部函数数据”</p><p>​      *闭包特点：</p><p>​        只要闭包还在使用外部函数的数据, 那么外部的数据就一直不会被释放</p><p>​        也就是说可以延长外部函数数据的生命周期</p><p>​      *闭包注意点</p><p>​    当不需要使用闭包时,要手动将闭包设置为null,否则会出现内存泄漏                         </p><p>​    <em><strong>*循环索引同步*</strong></em></p><p>​      默认情况下,代码从上至下执行,var定义的变量(除函数中)都是全局变量</p><p>​      循环索引同步和闭包的结合使用：利用立即执行函数+闭包</p><p>for( var i=0;i&lt;bun.length;i++){</p><p> let btn=btn[i]; </p><p> (function(index){  //立即执行函数和闭包实现循环索引同步</p><p> btn.onclick()=function(){ console.log(index);}</p><p>})(i);</p><p>}  //正常直接绑定事件，每个按钮输出的都是最后一个i</p><p>循环()里面var是全局变量，let定义是局部变量</p><p>let定义时每次执行完循环体都会重新定义一个i</p><p>​      ES6中由于{}是块级作用域(let),在块级作用域中定义了函数</p><p>​      且在函数中使用了块级作用域let定义的变量(数据)，那么这个函数就是闭包</p><p>​                                                                  2021.4.19</p><h3 id="3-9-日期对象Date"><a href="#3-9-日期对象Date" class="headerlink" title="3.9 日期对象Date"></a>3.9 日期对象Date</h3><p>​      *获取当前时间</p><p>​      let date = new Date();  //封装代码执行的当前时间</p><p>​      *获取当前时间距1970.1.1(世界标准时间)起的毫秒</p><p>​      Date.now()  date.valueOf()  //静态方法和对象方法,其他都一样</p><p>​      *创建指定时间</p><p>​      new Date(“月/日/年(或)年-月-日  时:分:秒”);</p><p>new Date(2000,2,18,1,1,1) //这种方式月份从0开始</p><p>​      *获取指定时间的年月日时分秒</p><p>​      getFullYear()  getMonth()  getDate()  getDay()    </p><p>年    月(0-11)   日(1-31)  周(0-6)     </p><p>​      getHours()  getMinutes()  getSeconds()  getMilliseconds()</p><p>​       时(0-23)   分(0-59)    秒(0-59)   毫秒(0-999)</p><p>​      (注意：除了月份现在仍然是0-11,其他都不是)</p><p>​      *时间格式化</p><p>​      <code>$&#123;time.getFullYear()&#125;-$&#123;time.getMonth()+1&#125;-$&#123;...&#125; $&#123;...&#125;:$&#123;...&#125;:$&#123;...&#125;</code></p><p>​      *时间差的计算   </p><p>​      let time=new Date(“– ::”);  let time1=new Date(“– ::”);</p><p>​      let difftime=time1-time  //可以直接将时间对象作计算</p><p>​      (相当于 time1.valueOf()-time.valueOf()  ****毫秒****值相减)</p><p>​      总秒数/每一天秒数  day=parseInt(difftime/1000/(24<em>60</em>60)); </p><p>总秒数/小时秒数%24  hour=parseInt(difftime/1000/(60*60)%24);  </p><p>​      总秒数/分钟秒数%60  minutes=parseInt(difftime/1000/60%60);</p><p>​      总秒数%60      second=difftime/1000%60;</p><h3 id="3-10-正则表达式"><a href="#3-10-正则表达式" class="headerlink" title="3.10 正则表达式"></a>3.10 正则表达式</h3><p>​      *正则表达式是对字符串操作的一种逻辑公式</p><p>​      *作用：在字符串”查找”是否包含指定子串</p><p>​         从字符串中”提取”指定子串</p><p>​         对字符串中指定的内容进行”替换”</p><p>​      字符串查找: indexOf/lastIndexOf/includes </p><p>​      提取: substr/substring  替换: replace</p><p>​      *first 利用正则表达式匹配(查找)</p><p>​       创建正则表达式对象-&gt;指定匹配规则(构造函数中指定规则)</p><p>​        let reg=new RegExp(“a”);  //RegExp(“a”,”i”);不区分大小写</p><p>​       -&gt;利用test方法进行匹配</p><p>​        reg.test(str)  //包含a返回true,发展false</p><p>​        注意：正则表达式严格区分大小写(不区分大小写传递参数”i”)</p><p>​      通过字面量创建正则：let reg=/规则/</p><p>​         </p><p>​      *second 通过正则表达式提取符合规则的字符串</p><p>​       let res=str.match(reg);  //默认情况一旦匹配就停止查找</p><p>​       通过修饰符g-全局查找  let reg=/规则/g</p><p>​      *third  通过正则表达式替换符合规则的字符串</p><p>​       let newstr=str.replace(reg,”替换内容”);</p><p>//第一个参数除了字符串还可以接收正则对象</p><h2 id="4-BOM"><a href="#4-BOM" class="headerlink" title="4. BOM"></a>4. BOM</h2><p>BOM就是提供了一套操作浏览器的API(接口/方法/属性)</p><h3 id="4-1-BOM常见对象"><a href="#4-1-BOM常见对象" class="headerlink" title="4.1 BOM常见对象"></a>4.1 BOM常见对象</h3><p>​     window 代表整个浏览器窗口(BOM中的一个顶级对象(全局))</p><p>​     Navigator 浏览器信息-判断是什么浏览器</p><p>​     Location  浏览器地址栏信息-设置/获取地址信息</p><p>​     History  浏览器历史信息-实现刷新/上一步/下一步</p><p>​         (由于隐私,只能拿到用户当前历史记录,不能拿到所有历史记录)</p><p>​     Screen  用户的屏幕信息(了解即可)-显示器宽高</p><p>*Navigator对象</p><p>  userAgent属性：包含了浏览器信息的字符串</p><p>  应用：if(/chrome/i.test(Navigator.userAgent)){alert(“谷歌浏览器”)}</p><p>*Location对象</p><p>​    获取/设置当前地址栏url  location.href/location.href=””</p><p>​    重新加载网页(刷新)  location.reload();  </p><p>​    强制刷新(更新缓存)  location.reload(true);</p><p>*History对象</p><p>  前进(下一步)  history.forward()  history.go()//go可以传入一个整数-前进几步</p><p>  后退   history.back()   history.go()//go可以接受一个负数,代表后退几步</p><p>  刷新   history.go(0)  //传入0代表刷新</p><h3 id="4-2-JS三大家族"><a href="#4-2-JS三大家族" class="headerlink" title="4.2 JS三大家族"></a>4.2 JS三大家族</h3><p>(offset/client/scroll)</p><p><em><strong>*获取元素宽高方式：*</strong></em></p><p>   (以下方法都是将元素属性封装到对象中返回)</p><p>​    getComputedStyle(oDiv)  </p><p>获取的宽高不包括边框和内边距</p><p>​      不仅能获取css属性也可以获取style(行内)</p><p>​      只读方法(不能设置),只支持IE9及以上</p><p>​     oDiv.currentStyle属性   </p><p>​      只支持IE9以下,其他和computed一样</p><p>​     oDiv.style属性</p><p>​       只能获取行内样式,可以设置行内样式</p><p>​       不包括边框和内边距,支持IE9以下</p><p>​    <em><strong>*offset家族*</strong></em>    (三大家族-不带单位-只读)</p><p>​     oDiv.offsetWidth/offsetHeight</p><p>​       包括边框和内边距,支持IE9以下</p><p>​       只读,行内/css都能获取</p><p>​     oDiv.offsetLeft/offsetTop</p><p>​      获取元素到第一个定位祖先元素的偏移位(没有定位,就是距离body)</p><p>​     oDiv.offsetparent</p><p>​      获取元素第一个定位的祖先元素(没有定位就是body)</p><p>​    <em><strong>*client家族*</strong></em></p><p>​     oDiv.clientWidth/Height  元素自身+内边距</p><p>​     oDiv.clientLeft/Top  左边框,顶部边框</p><p>​    <em><strong>*scroll家族*</strong></em></p><p>​     oDiv.scrollWidth/Height  </p><p>​      内容没有超出元素范围时=元素+内边距=clientWidth/Height</p><p>​      超出元素范围时=元素+内边距+超出宽度</p><p>​     oDiv.scrollLeft/Top</p><p>​      滚动时(onscroll事件),内容移出去的距离(从内边距外部开始计算)</p><p>​      </p><h3 id="4-3-获取网页宽高"><a href="#4-3-获取网页宽高" class="headerlink" title="4.3 获取网页宽高"></a>4.3 获取网页宽高</h3><p>​    获取网页可视区域宽高    </p><p>window.innerWidth/innerHeight  //只能在IE9及以上</p><p>document.documentElement.clientWidth/clientHeight  标准模式</p><p>注意：可用于IE9以下浏览器的标准模式中获取</p><p>浏览器渲染网页模式：标准(默认)/混杂/怪异模式</p><p>如果网页没有书写文档声明<!DOCTYPE html>-混杂/怪异模式渲染</p><p>可通过document.compatMode获取是什么模式</p><p>​       混杂模式通过: document.body.clientWidth/clientHeight 获取</p><p>​    兼容性写法自己封装…略</p><h3 id="4-4-网页滚动距离"><a href="#4-4-网页滚动距离" class="headerlink" title="4.4 网页滚动距离"></a>4.4 网页滚动距离</h3><p>​    IE9及以上浏览器</p><p>​     window.pageXOffset/pageYOffset</p><p>​    标准模式下浏览器</p><p>​     document.documentElement.scrollTop/scrollLeft</p><p>​    混杂(怪异)模式下浏览器</p><p>​     document.body.scrollTop/scrollLeft</p><h3 id="4-5-函数防抖和函数节流"><a href="#4-5-函数防抖和函数节流" class="headerlink" title="4.5 函数防抖和函数节流"></a>4.5 函数防抖和函数节流</h3><ul><li><strong>函数防抖</strong></li></ul><p>函数防抖是优化高频率执行js代码的一种手段</p><p>​    可以让被调用的函数在一次连续的高频操作过程中只被调用一次</p><p>​    作用：减少代码执行次数,提升网页性能</p><p>​    应用场景：oninput/onmousemove/onscroll/onresize等事件</p><ul><li><strong>函数节流</strong></li></ul><p>​    作用和函数防抖一样</p><p>​     区别：函数节流是减少连续的高频操作函数执行次数</p><p>(例如连续调用10次,可能只执行3-4次)</p><p>​        函数防抖是让连续的高频操作时函数只执行一次</p><p>(例如连续调用10次,但只会执行1次)</p><p>​                                                                                                                2021/4/22</p><h2 id="5-JSON"><a href="#5-JSON" class="headerlink" title="5. JSON"></a>5. JSON</h2><p>JSON是一种轻量级的数据交换格式(本质上是字符串)</p><p>​    采用完全独立于编程语言的文本格式来存储和表示数据</p><p>​    JSON其实就是字符串版本的JS对象  ‘{“name”: “cth”}’</p><p>​    注意点：JSON的key只能是字符串,value可以是任意数据类型</p><p>​    转换：json=JSON.stringify(obj);  obj=JSON.parse(json);</p><h1 id="JS高级"><a href="#JS高级" class="headerlink" title="JS高级"></a>JS高级</h1><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h2><ul><li>js的重要性</li></ul><p>​        所有框架都是在js的基础上编写的</p><ul><li>js应用场景</li></ul><p>​        web端 移动端 小程序 桌面应用(如vs code) 后端Node</p><ul><li><p>js让人疑惑的地方</p><p>函数、闭包 、作用域、面向对象(继承、原型链等)、ES新特征(ES6-12) </p><p>其他一系列知识(事件循环、宏任务、微任务、内存管理、Promise、await、asnyc、防抖节流等)</p></li><li><p>TypeScript会取代JavaScript吗</p></li></ul><p>​        TS致力于为JS提供类型检查，而不是取代JS(TS官方文档：源于JS，归于JS)</p><p>​        TS只是JS的一个超集，在它的基础上进行了扩展</p><p>​        并且最终TS还是需要转换为JS代码才能真正的运行        </p><ul><li><p>js是一门编程语言(高级的编程语言)</p><div class="code-wrapper"><pre><code class="hljs">机器语言(01) -&gt; 汇编语言(汇编指令) -&gt; 高级语言(c、c++、java、js、python)-编译型/解释型</code></pre></div></li></ul><p>​        (计算机不认识高级语言，代码最终需要转换成机器指令)</p><h2 id="2-浏览器工作原理和V8引擎"><a href="#2-浏览器工作原理和V8引擎" class="headerlink" title="2. 浏览器工作原理和V8引擎"></a>2. 浏览器工作原理和V8引擎</h2><ul><li><strong>浏览器工作原理</strong></li></ul><p>​        域名 (DNS解析)-&gt; ip地址 -&gt;服务器地址-&gt; 返回index.html(解析)</p><p>​        解析过程中有link标签和script标签 -&gt; 到服务器再次下载对应css和js文件 </p><ul><li><p>浏览器内核</p><p>不同浏览器有不同内核组成</p><p>Gecko-早期Netscape和Firefox浏览器使用</p><p>Trident-IE4-11浏览器，Edge浏览器已转向Blik</p><p>Webkit-苹果开发的，基于Safari，Google之前也在使用</p><p>Blik-Webkit的一个分支，Google开发，目前应用于Google、Edge、Opera</p><p>浏览器内核-浏览器排版引擎/页面渲染引擎</p></li><li><p>浏览器渲染过程</p><p>html遇到js标签-&gt;停止解析html-&gt;加载执行js代码(js执行是在DOM-&gt;DOM Tree过程改变dom)</p><p>html、css解析(Parser) -&gt; DOM Tree+Style Rules -&gt; Render Tree(渲染树) -&gt; Display</p><p>如图：</p><p> <img src="C:\Users\Administrator\Desktop\2022\img\js高级_浏览器渲染过程.png"></p><p>js代码是如何执行呢？</p></li><li><p>js引擎</p><p>定义：JavaScript引擎是一个专门处理JavaScript脚本的虚拟机，一般会附带在网页浏览器之中</p><p>浏览器/Node执行js代码  -&gt; 需要js引擎将js代码转换成CPU指令(机器代码)</p><p>引擎举例：</p><p>SpiderMonkey：第一款js引擎，由Brendan Eich开发(js作者)</p><p>Chakra：微软开发</p><p>JavaScriptCore：WebKit中的js引擎，Apple开发(小程序开发常用)</p><p>V8：Google开发的js引擎</p></li></ul><ul><li><p>浏览器内核和JS引擎的关系</p><ul><li><p>以Webkit为例，Webkit由两部分组成</p></li><li><p>WebCore ：负责HTML解析、布局、渲染等工作</p></li><li><p>JavaScriptCore：解析、执行js代码(小程序中编写的js就是被JSCore执行的)</p></li></ul></li><li><p>V8引擎的原理</p><p>V8是用c++编写的Goole开源高性能JavaScript和WebAssembly引擎，它用于Chrome和Node.js等  </p><p>V8可以独立运行，也可以嵌入到任何C++应用程序中</p><p>解析过程：</p><p>源码 -&gt; parse(词法分析、语法分析) -&gt;AST抽象语法树-&gt;由Ignition库转换为字节码bytecode</p><p>-&gt;V8将字节码转换成机器指令-CPU代码(不同平台CPU不一样所以需要先转换字节码)运行</p><p>TurboFan库/模块 将多次执行的代码变成优化的机器指令，下次可直接执行</p><p>如图：    </p><p><img src="C:\Users\Administrator\Desktop\2022\img\js高级_V8引擎的原理.png">        </p></li><li><p>代码执行流程分析</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> 1. 代码解析，V8引擎内部会给我们创建一个对象(GlobalObject -&gt; go)</span><br><span class="hljs-comment"> 2. 运行代码</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>2. JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo博客搭建和部署</title>
    <link href="/2022/03/24/0.%20%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    <url>/2022/03/24/0.%20%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="博客搭建和部署-Hexo"><a href="#博客搭建和部署-Hexo" class="headerlink" title="博客搭建和部署-Hexo"></a>博客搭建和部署-Hexo</h1><h2 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1. 环境准备"></a>1. 环境准备</h2><p>前提条件：Nodejs  Git 安装</p><h2 id="2-开始搭建"><a href="#2-开始搭建" class="headerlink" title="2. 开始搭建"></a>2. 开始搭建</h2><h3 id="2-1-安装Hexo"><a href="#2-1-安装Hexo" class="headerlink" title="2.1 安装Hexo"></a>2.1 安装Hexo</h3><p>建立MyBlog文件夹，管理员身份运行cmd</p><figure class="highlight awk"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>Win系统：安装cnpm，利用cnpm安装hexo-cli  (npm install hexo-cli -g)<br>npm install cnpm<br>cnpm install hexo-cli -g<br><br><span class="hljs-regexp">//</span>Mac系统：可以直接安装Hexo<br>npm install hexo-cli -g<br>(安装时报错解决：sudo npm install -g hexo --unsafe-perm=true --allow-root)<br><br><span class="hljs-regexp">//</span>进入MyBlog，并初始化文件夹<br>-&gt; hexo init<br>(以上步骤有问题可以使用 git config --global --unset http.proxy)<br>出现 INFO Start blogging with Hexo! 说明成功<br><span class="hljs-regexp">//</span>安装 hexo 依赖包<br>-&gt; npm install<br><br></code></pre></td></tr></table></figure><h3 id="2-2-启动本地博客"><a href="#2-2-启动本地博客" class="headerlink" title="2.2 启动本地博客"></a>2.2 启动本地博客</h3><p>本地博客效果(以下三个命令每次都会用到)</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>清除页面相关东西<br>hexo clear <br><span class="hljs-regexp">//</span>生成静态网站<br>-&gt; hexo g<br><span class="hljs-regexp">//</span>启动服务器<br>-&gt; hexo s<br></code></pre></td></tr></table></figure><p>Ctrl+C 停止运行</p><h2 id="3-使用主题-fluid"><a href="#3-使用主题-fluid" class="headerlink" title="3. 使用主题-fluid"></a>3. 使用主题-fluid</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>进入themes文件夹下载主题<br>cd themes<br>git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/fluid-dev/</span>hexo-theme-fluid.git<br></code></pre></td></tr></table></figure><p>修改默认主题(进入MyBlog/_config.yml)</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk">theme: hexo-theme-fluid   <span class="hljs-regexp">//</span>这里的名字是themes文件夹中下载主题的文件夹名<br>language: zh-CN           <span class="hljs-regexp">//</span>指定语言，会影响主题显示的语言，按需修改<br><br><span class="hljs-regexp">//</span>刷新重启服务<br>hexo clear<br>hexo g<br>hexo s<br></code></pre></td></tr></table></figure><p>生成About页面 - 首次使用主题的「关于页」需要手动创建：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">hexo</span> <span class="hljs-string">new</span> <span class="hljs-string">page</span> <span class="hljs-string">about</span><br><span class="hljs-string">//创建成功后，编辑博客目录下</span> <span class="hljs-string">/source/about/index.md，添加</span> <span class="hljs-string">layout</span> <span class="hljs-string">属性</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">about</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2020-02-23 19:20:33</span><br><span class="hljs-attr">layout:</span> <span class="hljs-string">about</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><h2 id="4-配置修改"><a href="#4-配置修改" class="headerlink" title="4. 配置修改"></a>4. 配置修改</h2><p><strong>参见fluid文档：</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>hexo.fluid-dev.com/docs<br></code></pre></td></tr></table></figure><h3 id="4-1-修改页面标题和小Icon"><a href="#4-1-修改页面标题和小Icon" class="headerlink" title="4.1 修改页面标题和小Icon"></a>4.1 修改页面标题和小Icon</h3><p>除了页面的Title和language在Blog下的_config.yml设置</p><p>其他的大多配置在主题下的_config.yml设置(包括所有图片)</p><h3 id="4-2-友链添加"><a href="#4-2-友链添加" class="headerlink" title="4.2 友链添加"></a>4.2 友链添加</h3><h3 id="4-3-添加2d宠物和点击效果"><a href="#4-3-添加2d宠物和点击效果" class="headerlink" title="4.3 添加2d宠物和点击效果"></a>4.3 添加2d宠物和点击效果</h3><p>(这两个百度即可有很多方案)</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>首先进入Hexo博客根目录安装live2d插件<br>npm install --save hexo-helper-live2d<br></code></pre></td></tr></table></figure><p>接着，修改根目录下的 <em>_config.yml</em> 文件</p><p>添加自定义配置(下面提供我的配置做参考)：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">## live2d</span><br><span class="hljs-attr">live2d:</span><br>   <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>   <span class="hljs-attr">scriptFrom:</span> <span class="hljs-string">local</span><br>   <span class="hljs-attr">pluginRootPath:</span> <span class="hljs-string">live2dw/</span><br>   <span class="hljs-attr">pluginJsPath:</span> <span class="hljs-string">lib/</span><br>   <span class="hljs-attr">pluginModelPath:</span> <span class="hljs-string">assets/</span><br>   <span class="hljs-attr">tagMode:</span> <span class="hljs-literal">false</span><br>   <span class="hljs-attr">debug:</span> <span class="hljs-literal">false</span><br>   <span class="hljs-attr">model:</span><br>       <span class="hljs-attr">use:</span> <span class="hljs-string">live2d-widget-model-z16</span><br>       <span class="hljs-attr">scale:</span> <span class="hljs-number">1</span><br>       <span class="hljs-attr">hHeadPos:</span> <span class="hljs-number">0.5</span><br>       <span class="hljs-attr">vHeadPos:</span> <span class="hljs-number">0.618</span><br>   <span class="hljs-attr">display:</span><br>       <span class="hljs-attr">superSample:</span> <span class="hljs-number">2</span><br>       <span class="hljs-attr">width:</span> <span class="hljs-number">150</span><br>       <span class="hljs-attr">height:</span> <span class="hljs-number">300</span><br>       <span class="hljs-attr">position:</span> <span class="hljs-string">right</span><br>       <span class="hljs-attr">hOffset:</span> <span class="hljs-number">0</span><br>       <span class="hljs-attr">vOffset:</span> <span class="hljs-number">-20</span><br>   <span class="hljs-attr">mobile:</span><br>       <span class="hljs-attr">show:</span> <span class="hljs-literal">true</span><br>       <span class="hljs-attr">scale:</span> <span class="hljs-number">0.5</span><br>  <span class="hljs-attr">react:</span><br>      <span class="hljs-attr">opacityDefault:</span> <span class="hljs-number">0.7</span><br>      <span class="hljs-attr">opacityOnHover:</span> <span class="hljs-number">0.2</span><br></code></pre></td></tr></table></figure><p>注意：model.use 后的字符串就是看板娘模型的名字</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>进入博客根目录输入以下命令-让宠物住进你的博客-后面跟板娘模型的名字<br>npm install live2d-widget-model-z16<br></code></pre></td></tr></table></figure><p>模型的GitHub地址：<a href="https://github.com/xiazeyu/live2d-widget-models">https://github.com/xiazeyu/live2d-widget-models</a></p><p>效果参考博客：<a href="https://blog.csdn.net/wang_123_zy/article/details/87181892">https://blog.csdn.net/wang_123_zy/article/details/87181892</a></p><h2 id="5-博客上传到本地"><a href="#5-博客上传到本地" class="headerlink" title="5. 博客上传到本地"></a>5. 博客上传到本地</h2><p>直接移动md文件到Myblog\source_posts，重新启动即可</p><h3 id="5-1-博客标题-标签-分类的添加"><a href="#5-1-博客标题-标签-分类的添加" class="headerlink" title="5.1 博客标题/标签/分类的添加"></a>5.1 博客标题/标签/分类的添加</h3><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs subunit">title: 前端学习路线<br><span class="hljs-keyword">tags:</span> [学习路线]<br>categories:<br>- [前端, 路线]<br></code></pre></td></tr></table></figure><p>注意：标签和分类不一样，标签没有层级和顺序性，而分类有</p><h2 id="6-Gitee-GitHub上部署博客"><a href="#6-Gitee-GitHub上部署博客" class="headerlink" title="6. Gitee/GitHub上部署博客"></a>6. Gitee/GitHub上部署博客</h2><p>参考链接：<a href="https://blog.csdn.net/yushuaigee/article/details/111825925">https://blog.csdn.net/yushuaigee/article/details/111825925</a></p><p>在Gitee、Github上建立仓库(仓库名必须和用户名一致) 用户名.gitee/github.io</p><p>配置git参数-用户名和邮箱</p><p>生成并配置SSH公钥</p><p>安装Hexo发布插件</p><p>修改MyBlog\_config.yml的配置文件</p><p>执行命令</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo g</span><br><span class="hljs-attribute">hexo d</span><br></code></pre></td></tr></table></figure><p>注意：Gitee需要手动点击更新部署</p><h2 id="7-自定义域名和CDN加速"><a href="#7-自定义域名和CDN加速" class="headerlink" title="7. 自定义域名和CDN加速"></a>7. 自定义域名和CDN加速</h2><p>域名：在namesilo上面购买（国外无需备案）</p><ul><li>在腾讯云进行域名解析（因为在namesilo解析生效非常慢…）<ul><li>需要在namesilo设置NameServer Manager为腾讯云的两个值，这样才能在腾讯云解析DNS</li></ul></li><li>配置CDN加速<ul><li>参考：<a href="https://blog.csdn.net/m0_47520749/article/details/124768311">https://blog.csdn.net/m0_47520749/article/details/124768311</a></li></ul></li><li>注意：需要手动在Myblog/Source根目录下手动增加一个无后缀的CNAME文件，内容是域名：kygo.top<ul><li>否则下次重新上新版本，github上的自定义域名配置就会被覆盖掉</li></ul></li></ul><h2 id="8-常用配置"><a href="#8-常用配置" class="headerlink" title="8. 常用配置"></a>8. 常用配置</h2><h3 id="8-1-博客上传-更新时间配置"><a href="#8-1-博客上传-更新时间配置" class="headerlink" title="8.1 博客上传/更新时间配置"></a>8.1 博客上传/更新时间配置</h3><ul><li>更改 themes/hexo-theme-fluid/_config.yml</li></ul><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment">#博客上传时间date配置</span><br><span class="hljs-attribute">date</span>:<br>      <span class="hljs-attribute">enable</span>: true<br>      <span class="hljs-attribute">format</span>: <span class="hljs-string">&quot;YYYY-MM-DD HH:mm:ss&quot;</span><br><span class="hljs-comment">#博客更新updated配置</span><br><span class="hljs-attribute">updated</span>:<br>    <span class="hljs-attribute">enable</span>: true<br>    <span class="hljs-attribute">format</span>: <span class="hljs-string">&quot;YYYY-MM-DD HH:mm:ss&quot;</span><br>    <br><span class="hljs-comment">#在博客开头即可</span><br><span class="hljs-attribute">Date</span>: <span class="hljs-number">2022</span>-<span class="hljs-number">12</span>-<span class="hljs-number">23</span>T<span class="hljs-number">14</span>:<span class="hljs-number">05</span>:<span class="hljs-number">00</span><br><span class="hljs-attribute">Updated</span>: <span class="hljs-number">2022</span>-<span class="hljs-number">12</span>-<span class="hljs-number">26</span>T<span class="hljs-number">13</span>:<span class="hljs-number">45</span>:<span class="hljs-number">00</span><br></code></pre></td></tr></table></figure><h3 id="8-2-博客图片设置"><a href="#8-2-博客图片设置" class="headerlink" title="8.2 博客图片设置"></a>8.2 博客图片设置</h3><ul><li>博客中使用到的图片都放在public/img即可 </li><li>使用的时候路径：/img/图片名称</li></ul>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客搭建</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
