<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>CSS详解</title>
    <link href="/2023/01/06/2.%20css/"/>
    <url>/2023/01/06/2.%20css/</url>
    
    <content type="html"><![CDATA[<h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><h2 id="1-CSS简介"><a href="#1-CSS简介" class="headerlink" title="1. CSS简介"></a>1. CSS简介</h2><ul><li><p>定义</p><ul><li>css：层叠样式表(Cascading Style Sheet)，又称为级联样式表等</li><li>css不是一门编程语言，也不是标记语言，是一门样式表语言</li></ul></li><li><p><strong>css历史</strong></p><ul><li><p>css1和css2都是整个版本一起发布，到css3因为涉及到的css太多，一起发布会导致时间线太长</p></li><li><p>从css3开始，所有的css划分成了不同的modules，每一个模块都有于css2中额外增加的功能</p></li><li><p>比如：直到2011.6.7，CSS 3 Color Module 成为W3C Recommendation（推荐版本）</p></li></ul></li><li><p><strong>CSS最大价值：</strong></p><ul><li>美化网页，布局页面（美化HTML）</li><li>由HTML专注去做结构呈现，样式交给CSS，结构（HTML）与样式（CSS）分离 </li><li>美化方式<ul><li>方式一：为HTML添加各种样式：颜色、字体、大小等</li><li>方式二：对HTML进行布局：浮动、定位、flex</li></ul></li></ul></li><li><p><strong>CSS语法规范：</strong></p><ul><li><p>CSS = 选择器（HTML的标签）+  声明（一条或多条）</p></li><li><p>选择器{样式} =&gt; 给谁改样式{改什么样式}       </p></li><li><p>声明的写法如下</p><figure class="highlight css"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*属性: 属性值;*/</span><br><span class="hljs-attribute">color</span>: red;<br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong>CSS代码风格</strong></p></li></ul><ol><li><p>样式格式书写-展开格式</p></li><li><p>样式大小写风格-小写</p></li><li><p>样式空格风格：</p></li></ol><p>  冒号后面，属性值前面保留空格</p><p>  选择器（标签）和大括号中间保留空格</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">18px</span>;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>css注释</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*我是css注释*/</span><br></code></pre></td></tr></table></figure><h2 id="2-CSS引入方式"><a href="#2-CSS引入方式" class="headerlink" title="2. CSS引入方式"></a>2. CSS引入方式</h2><ul><li>内联样式(行内样式表) inline style<ul><li>存在于HTML元素的style属性中</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: red; width: 100px;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>内部样式表(文档样式表) internal style sheet<ul><li>放在head的style元素中</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>外部样式表  external style sheet<ul><li>编写单独的.css样式文件，通过link元素引入</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;css文件路径&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>通过 @import 引入<ul><li>可在style元素或者CSS文件中通过@import引入其它CSS文件</li></ul></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*import引入*/</span><br>&lt;style&gt;<br><span class="hljs-keyword">@import</span> url(./css/style.css)<br>&lt;/style&gt;<br>    <br>/*也可以在css中引入其他的css文件(如果css文件过多时)<br>  url()是css函数 和<span class="hljs-attribute">background-image</span>: url();一样*/<br><span class="hljs-keyword">@import</span> url(./css/style.css)<br></code></pre></td></tr></table></figure><ul><li>扩展</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css">//单独的css文件最好指定一下css编码，当有中文的时候才能正确解释<br><span class="hljs-keyword">@charset</span> <span class="hljs-string">&quot;utf-8&quot;</span>;  <br><span class="hljs-selector-tag">body</span>&#123;<br>    <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&quot;微软雅黑&quot;</span>;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>css属性相关文档</p><ul><li>官方文档W3C：<a href="https://www.w3.org/TR/?tag=css">https://www.w3.org/TR/?tag=css</a></li><li>推荐文档MDN: <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Reference#%E7%B4%A2%E5%BC%95://developer.mozilla.org/zh-CN/docs/Web/CSS/Reference">https://developer.mozilla.org/zh-CN/docs/Web/CSS/Reference#%E7%B4%A2%E5%BC%95://developer.mozilla.org/zh-CN/docs/Web/CSS/Reference</a></li><li>查询css是否可用/兼容：<a href="https://caniuse.com/">https://caniuse.com/</a></li></ul></li><li><p>一些最基本的CSS属性</p><ul><li>font-size：文字大小</li><li>color：前景色（文字颜色），包括文字、装饰线、边框、外轮廓等的颜色</li><li>background-color：背景色</li><li>width：宽度</li><li>height：高度</li></ul></li></ul><h2 id="3-CSS基础选择器"><a href="#3-CSS基础选择器" class="headerlink" title="3. CSS基础选择器"></a>3. CSS基础选择器</h2><ul><li><p> 什么是CSS选择器？</p></li><li><p>按照一定的规则选出符合条件的元素，为其添加css样式</p></li><li><p>分类</p><ul><li>基础选择器：标签选择器，类选择器，id选择器，通配符(通用)选择器</li><li>其他选择器：属性选择器、组合选择器(并集/交集/兄弟/后代)、伪类、伪元素</li></ul></li></ul><p><strong>（1）标签(元素)选择器</strong></p><ul><li>使用元素名称</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span> &#123;<br>    <span class="hljs-attribute">color</span>: red;  //标签名作为选择器，同类型标签统一设置样式<br>&#125;<br></code></pre></td></tr></table></figure><p>缺点：不能差异化选择</p><p><strong>（2）类选择器（常用）</strong></p><ul><li>使用 .class类名</li></ul><p>语法： .类名{}  class=”类名”</p><p>作用：单独选择一个或几个标签</p><p>口诀：样式点定义，结构类（class）调用，一个或多个，开发最常用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box color&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> //多类名 空格隔开<br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">    <span class="hljs-selector-class">.box</span> &#123;</span><br><span class="css">    </span><br><span class="css">    &#125;</span><br><span class="css">    <span class="hljs-selector-class">.color</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">color</span>: red;</span><br><span class="css">    &#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span>  <br></code></pre></td></tr></table></figure><ul><li>类的命名规范<ul><li>尽量见名知意，多个单词连接时，以-/_方式连接</li></ul></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*中划线 - 连接（推荐）*/</span><br><span class="hljs-selector-class">.large-font</span>&#123;&#125;<br><span class="hljs-comment">/* 下划线 _ 连接*/</span><br><span class="hljs-selector-class">.large_font</span>&#123;&#125;<br><span class="hljs-comment">/* 小驼峰连接*/</span><br><span class="hljs-selector-class">.largeFont</span>&#123;&#125;<br></code></pre></td></tr></table></figure><p><strong>（3）id选择器</strong></p><ul><li><p>使用 #id</p><p>  特点：唯一性（一个HTML文档中的id是唯一的，不能重复）</p><p>  口诀：样式#定义，结构id调用，只能调用一次，别人切勿使用</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">    <span class="hljs-selector-id">#box</span> &#123;</span><br><span class="css">      <span class="hljs-attribute">background-color</span>: red;</span><br><span class="css">    &#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>（4）通配符(通用)选择器</strong></p><p>语法: *{}</p><p>作用：选取页面所有元素（标签）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*去除网页元素自带的内外边距</span><br><span class="hljs-comment">弊端：这种方式会遍历HTML所有标签，不管页面有没有，效率很低，尽量不使用*/</span><br>*&#123;  <br>      <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>      <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br> &#125;<br><span class="hljs-comment">/*更推荐的做法*/</span><br><span class="hljs-selector-tag">body</span>,<span class="hljs-selector-tag">p</span>,dic,<span class="hljs-selector-tag">span</span>,<span class="hljs-selector-tag">p</span>,<span class="hljs-selector-tag">h1</span>&#123;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>  pading: <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-CSS字体属性"><a href="#4-CSS字体属性" class="headerlink" title="4. CSS字体属性"></a>4. CSS字体属性</h2><ul><li><p>CSS Fonts（字体）属性用于定义字体系列，大小，粗细，和文字样式（如斜体）</p></li><li><p>字体基本属性</p></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*字体大小(px是像素)*/</span><br><span class="hljs-attribute">font-size</span>：<span class="hljs-number">20px</span>; <span class="hljs-comment">/*谷歌浏览器最小12px，设置比12小的没有效果*/</span><br><span class="hljs-attribute">font-size</span>: <span class="hljs-number">1em</span>; <span class="hljs-comment">/*不推荐,1em相对于父元素font-size*/</span><br><span class="hljs-attribute">font-size</span>: <span class="hljs-number">50%</span>; <span class="hljs-comment">/*父元素字体的一半,这个不用记，查文档即可*/</span><br><br><span class="hljs-comment">/*字体系列，一般只设置一次即可</span><br><span class="hljs-comment">原理：根据设置的字体来从用户电脑的操作系统中读取已有(下载好的)的字体来显示</span><br><span class="hljs-comment">为了防止设置的字体刚好操作系统中不存在，会设置多个,前面的没有会依次使用后面的</span><br><span class="hljs-comment">也可通过@font-face可以直接下载的字体*/</span><br><span class="hljs-attribute">font-family</span>: Microsoft YaHei<br>font-family:<span class="hljs-string">&#x27;Courier New&#x27;</span>, Courier, monospace ;<br><span class="hljs-comment">/*注意：当字体有多个单词或编码格式时通常加上&#x27;&#x27;  以下是淘宝的字体*/</span><br><span class="hljs-attribute">font</span>: <span class="hljs-number">12px</span>/<span class="hljs-number">1.5</span> tahoma, arial, <span class="hljs-string">&#x27;Hiragino Sans GB&#x27;</span>, <span class="hljs-string">&#x27;\5b8b\4f53&#x27;</span>, sans-serif;<br><br><span class="hljs-comment">/*字体粗细： 加粗700==bold   正常400==normal(提倡数字)</span><br><span class="hljs-comment">strong/b/h1-h6默认就是bold*/</span><br><span class="hljs-attribute">font-weight</span>：<span class="hljs-attribute">normal</span>（正常）/bold（粗）/bolder（特粗）/lighter（细体）<br><span class="hljs-attribute">font-weight</span>：<span class="hljs-number">400</span>/<span class="hljs-number">700</span><br><br><span class="hljs-comment">/*文字斜体  em/i默认是斜体*/</span><br><span class="hljs-attribute">font-style</span>：<span class="hljs-attribute">normal</span>（正常）italic（字体系列中自带的倾斜）<br>            oblique(使用italic失效时-使用的字体不支持倾斜，使用这个)<br><span class="hljs-comment">/*i较常用-做小图标*/</span><br><span class="hljs-selector-tag">i</span><span class="hljs-selector-pseudo">::after</span>&#123;&#125;<br><br><span class="hljs-comment">/*影响小写字母的显示形式：将小写字母替换为缩小过的大写字母*/</span><br><span class="hljs-attribute">font-variant</span>: normal/small-caps<br><br>/*行高：一行文本所占的高度<br>  为什么有行高：方便用户阅读理解（知道阅读顺序-左到右还是上到下）<br>  行高定义：两行文本基线<span class="hljs-built_in">baseline</span>(与小写字母x最底部对齐的线)之间的距离<br>  行高=文本高度(顶线-&gt;底线)+上间距+下间距<br>*/  <br>line-height    <br>/*height和line-height区别：height是元素整体的高度、line-height是元素中每一行文本所占高度<br>单行文本（只限文本）垂直居中(上下行距等分，所以会垂直居中)*/<br>hight=line-height <br></code></pre></td></tr></table></figure><p> <img src="/img/css_line-height.png"></p><ul><li><p>字体复合属性</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">//<span class="hljs-attribute">font-size</span>  <span class="hljs-attribute">font-family</span>必须写且顺序不能交换，其他可以省略<br><span class="hljs-attribute">font</span>: [font-style  font-variant font-weight]  font-size/[line-height]  font-family;<br></code></pre></td></tr></table></figure></li></ul><h2 id="5-CSS文本属性"><a href="#5-CSS文本属性" class="headerlink" title="5. CSS文本属性"></a>5. CSS文本属性</h2><ul><li>CSS Text（文本）属性：可定义文本外观，比如文本颜色、对其文本、修饰文本、文本缩进、行间距等。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*设置inline-level内容在块级父元素内的对其方式</span><br><span class="hljs-comment">设置div中的text-align，只对其中的行内元素起作用，对块级元素不起作用*/</span><br><span class="hljs-attribute">text-align</span>: left/right/center/justify<br>/*<br><span class="hljs-built_in">justify</span>(了解)<br>将两边的空隙平均分到每个空隙，对最后一行没有效果<br>只有一行没有效果，需要这样设置，最后一行也是justify<br>*/<br>text-align: justify;<br><span class="hljs-attribute">text-align-last</span>: justify;  <br><br><span class="hljs-comment">/*文本装饰线 decoration-装饰 (a默认加了下划线，none去掉)</span><br><span class="hljs-comment">color设置前景色的时候，也会让装饰线设置相应颜色*/</span><br><span class="hljs-attribute">text-decoration</span>: none/underline/overline/line-through  <br><br>/*首行文本缩进<br>em相当于当前元素本身的font-size大小*/<br>text-indent:  <span class="hljs-number">2em</span>  <br><br>/*设置文字大小写转换 transform-形变<br>没有影响/每个单词首字符变为大写/每个单词所有字符变为大写/每个单词所有字符变为小写*/<br>text-transform：none/capitalize/uppercase/lowercase<br><br>/*字母间距、单词间距：默认是<span class="hljs-number">0</span>，可以设置负数*/<br>letter-spacing: <span class="hljs-number">10px</span>;<br><span class="hljs-attribute">word-spacing</span>: <span class="hljs-number">10px</span>;<br></code></pre></td></tr></table></figure><h2 id="6-CSS背景属性"><a href="#6-CSS背景属性" class="headerlink" title="6. CSS背景属性"></a>6. CSS背景属性</h2><p>  作用：给页面元素添加背景样式。</p><p>  可设置： 背景颜色，背景图片，背景平铺，背景图片位置，背景图片大小, 背景图像固定</p><p>  注意：背景图片和背景颜色同时添加时，背景图片会压住背景颜色</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*背景颜色*/</span><br><span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">transparent</span>(默认透明色); <br><br><span class="hljs-comment">/*背景图片</span><br><span class="hljs-comment">常用于：装饰的小图片或超大背景图片</span><br><span class="hljs-comment">优点：非常便于控制位置（图片在盒子中的位置）</span><br><span class="hljs-comment">注意：背景图片是盖在背景颜色上面，而不是让color失效</span><br><span class="hljs-comment">可以设置多张背景图片url()[,url()...]，第一张会显示在最上面，其他依次按顺序在下面</span><br><span class="hljs-comment">*/</span><br><span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&quot;&quot;</span>)<br><br>/*背景平铺<br>平铺(默认)|不平铺|x轴平铺|y轴平铺<br>*/<br>background-repeat: repeat|no-repeat|repeat-x|repeat-y<br><br><br>/*背景大小<br>auto-以背景图本身大小显示<br>cover-拉伸背景图片，使其覆盖满整个元素,会让图片显示不完整<br>contain-对图片进行拉伸，拉伸到一个方向的宽度(高度)，不再拉伸，保持图片宽高比<br>具体值：百分比/具体大小<br>*/<br>background-size: auto/cover/contain;<br><span class="hljs-attribute">background-size</span>: auto <span class="hljs-number">100px</span>;  <span class="hljs-comment">/*宽度保持宽高比自动计算*/</span><br><br><br><span class="hljs-comment">/*背景图片位置- x,y可以是方位名词或者精确单位</span><br><span class="hljs-comment">方位名词：(顺序没关系)</span><br><span class="hljs-comment">   top|center|bottom|left|center|right  //只写一个,第二个默认center</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">  精确单位：（有顺序）</span><br><span class="hljs-comment">   background-position: 20px 50px;  //只写一个,第二个默认center</span><br><span class="hljs-comment">  混合单位：（有顺序，第一个一定是x，第二个y）</span><br><span class="hljs-comment">*/</span><br><span class="hljs-attribute">background-position</span>: x y;<br><br><span class="hljs-comment">/*背景图像固定 - 决定背景图像的位置是在视口内固定，或者随着包含它的区块滚动。</span><br><span class="hljs-comment">scroll(默认) 背景图片相对元素本身固定，不随着它内容的滚动而滚动</span><br><span class="hljs-comment">local 背景图片会随着元素内容的滚动而滚动</span><br><span class="hljs-comment">fixed 背景图片相对于浏览器视口固定，不会随着元素滚动而滚动</span><br><span class="hljs-comment">注意：如果有文本，默认背景图片滚动</span><br><span class="hljs-comment">*/</span><br><span class="hljs-attribute">background-attachment</span>: scroll/fixed/local<br><br><br>/*背景复合写法<br>size如果不省略,/size必须紧跟在position后面<br>属性都可省略，且顺序不固定（空格隔开）<br>*/<br>background: color <span class="hljs-built_in">image</span>(url) repeat attachment position/size  <br></code></pre></td></tr></table></figure><ul><li><strong>background-image和img的选择</strong></li></ul><p><img src="/img/css_background-image%E5%92%8Cimg%E5%85%83%E7%B4%A0%E7%9A%84%E6%AF%94%E8%BE%83.png"></p><p>总结：</p><p>img元素作为网页的重要组成部分，比如广告图片、LOGO图片、文章配图、产品配图</p><p>background-image，可有可无，有能够让网页更加美观，无也不影响用户获取完整的网页内容信息</p><h2 id="7-CSS其他选择器"><a href="#7-CSS其他选择器" class="headerlink" title="7. CSS其他选择器"></a>7. CSS其他选择器</h2><ul><li>分类：属性选择器、后代选择器、兄弟选择器、选择器组(并/交集)、伪类、伪元素</li></ul><h3 id="7-1-属性选择器"><a href="#7-1-属性选择器" class="headerlink" title="7.1 属性选择器"></a>7.1 属性选择器</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*[att] [att=val]</span><br><span class="hljs-comment">选择具有title属性且属性值为head的元素*/</span><br><span class="hljs-selector-attr">[title]</span><br><span class="hljs-selector-attr">[title=<span class="hljs-string">&quot;head&quot;</span>]</span><br><span class="hljs-selector-tag">h1</span><span class="hljs-selector-attr">[title=<span class="hljs-string">&quot;head&quot;</span>]</span>&#123;&#125;  <span class="hljs-comment">/*并集选择器写法*/</span><br><br><span class="hljs-comment">/*以下作为了解即可,用到再查就ok </span><br><span class="hljs-comment">选择E且val开头/结尾/包含val的元素*/</span><br>E<span class="hljs-selector-attr">[属性^=”val”]</span> E<span class="hljs-selector-attr">[属性$=”val”]</span> E<span class="hljs-selector-attr">[属性*=”val”]</span><br>E<span class="hljs-selector-attr">[属性|=”val”]</span> E<span class="hljs-selector-attr">[属性~=”val”]</span>  <br></code></pre></td></tr></table></figure><p>注：类选择器，伪类选择器，属性选择器权重都是10  ([]权重为10)  </p><h3 id="7-2-兄弟选择器"><a href="#7-2-兄弟选择器" class="headerlink" title="7.2 兄弟选择器"></a>7.2 兄弟选择器</h3><ul><li>注意只能后面的元素</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*相邻兄弟选择器</span><br><span class="hljs-comment">选择.box1后面紧挨着的h2*/</span><br><span class="hljs-selector-class">.box1</span> + <span class="hljs-selector-tag">h2</span>&#123;&#125;  <br><br><span class="hljs-comment">/*全兄弟选择器</span><br><span class="hljs-comment">选择.box1后面的所有h2*/</span><br><span class="hljs-selector-class">.box1</span> ~ <span class="hljs-selector-tag">h2</span>&#123;&#125;  <br></code></pre></td></tr></table></figure><h3 id="7-3-后代选择器"><a href="#7-3-后代选择器" class="headerlink" title="7.3 后代选择器"></a>7.3 后代选择器</h3><ul><li>后代选择器一：所有后代</li></ul><p>语法：空格 隔开</p><p>作用：选择父元素里面子元素(包括直接、间接子元素)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box</span> <span class="hljs-selector-tag">h1</span>&#123;&#125;<br></code></pre></td></tr></table></figure><ul><li>后代选择器二：直接子代选择器 </li></ul><p>语法：选择器之间以 &gt; 分割</p><p>作用：选择直接子元素(亲儿子)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box</span> &gt; <span class="hljs-selector-tag">span</span>&#123;&#125;<br></code></pre></td></tr></table></figure><h3 id="7-4-选择器组-交集-并集选择器"><a href="#7-4-选择器组-交集-并集选择器" class="headerlink" title="7.4 选择器组-交集/并集选择器"></a>7.4 选择器组-交集/并集选择器</h3><ul><li>交集选择器<ul><li>需要同时符合两个选择器条件，两个选择器需要紧密相连</li><li>为了精准的选择某一个元素</li></ul></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">h3</span><span class="hljs-selector-class">.class</span>&#123;<span class="hljs-attribute">color</span>:red&#125;<br><span class="hljs-selector-tag">h1</span><span class="hljs-selector-attr">[title=<span class="hljs-string">&quot;h&quot;</span>]</span><br></code></pre></td></tr></table></figure><ul><li>并集选择器</li></ul><p>语法：选择器1,选择器2…(最后不加逗号)</p><p>作用：为了给多个元素设置相同的样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-id">#box</span>,<br><span class="hljs-selector-tag">p</span>,<br><span class="hljs-selector-class">.box1</span> <span class="hljs-selector-tag">h1</span> &#123;<br><span class="hljs-attribute">color</span>: red;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意：任何形式的选择器都可以作为并集选择器的一部分 </p><p>​                                                                                                                                         </p><h3 id="7-5-伪类选择器"><a href="#7-5-伪类选择器" class="headerlink" title="7.5 伪类选择器"></a>7.5 伪类选择器</h3><p>分类：<strong>动态伪类、结构伪类、否定伪类</strong>、目标伪类、语言伪类、元素状态伪类</p><p>什么是伪类：选择器的一种，用于选择处于特定状态的元素</p><p>文档：<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Pseudo-classes">https://developer.mozilla.org/zh-CN/docs/Web/CSS/Pseudo-classes</a></p><ul><li>不常用的三个伪类选择器</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*目标伪类-作用于锚点链接，点击后变红*/</span><br><span class="hljs-selector-pseudo">:target</span>&#123;<span class="hljs-attribute">color</span>: red;&#125;<br><span class="hljs-comment">/*元素状态伪类 :enable :disable :checked */</span><br>:disable&#123;&#125;  //选中具有disable属性的元素<br><span class="hljs-comment">/*语言伪类 选择使用lang属性的元素，如 html中的lang */</span><br><span class="hljs-selector-pseudo">:lang</span>()<br></code></pre></td></tr></table></figure><h4 id="7-5-1-动态伪类选择器"><a href="#7-5-1-动态伪类选择器" class="headerlink" title="7.5.1 动态伪类选择器"></a>7.5.1 动态伪类选择器</h4><p>作用：向某些选择器添加特殊的效果，一般给链接添加特殊效果 </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*未点击/点击过/经过/按下未松开</span><br><span class="hljs-comment">顺序必须是：link-visited-hover-active  记忆：女朋友看到 L V 后，Ha Ha 大笑 */</span><br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:link</span>/<span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:visited</span>/<span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span>/<span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:active</span>  <br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">:focus伪类选择器（较少）焦点汇聚的元素-如input框聚焦输入</span><br><span class="hljs-comment">用于一些可以交互的元素如：input、button、a等，通过tab键或鼠标点击将光标聚焦就可触发</span><br><span class="hljs-comment">顺序：link-visited-focus-hover-active  记忆：女朋友看到 L V 后，(Feng)疯一样 Ha Ha 大笑</span><br><span class="hljs-comment">*/</span><br><span class="hljs-selector-tag">input</span><span class="hljs-selector-pseudo">:focus</span>&#123;&#125;<br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:focus</span>&#123;&#125; <br><br><span class="hljs-comment">/*去掉a的聚焦状态两种方法:  去掉聚焦时的轮廓/tabindex可调整Tab选中元素的顺序 */</span><br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:focus</span>&#123;<span class="hljs-attribute">outline</span>: none&#125;  <br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:focus</span>&#123;tabindex=&quot;-<span class="hljs-number">1</span>&quot;&#125;  <br><br><span class="hljs-comment">/*直接给a元素指定样式，相当于给a元素所有动态伪类都设置了样式</span><br><span class="hljs-comment">如下，所有状态下a的颜色都会是red*/</span><br><span class="hljs-selector-tag">a</span>&#123;<span class="hljs-attribute">color</span>: red&#125;<br></code></pre></td></tr></table></figure><p>注意：只有：hover/active可以用到其他元素上</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span>：hover&#123;<span class="hljs-attribute">color</span>: red&#125;<br></code></pre></td></tr></table></figure><h4 id="7-5-2-结构伪类选择器"><a href="#7-5-2-结构伪类选择器" class="headerlink" title="7.5.2 结构伪类选择器"></a>7.5.2 结构伪类选择器</h4><p><img src="/img/css_%E7%BB%93%E6%9E%84%E4%BC%AA%E7%B1%BB%E9%80%89%E6%8B%A9%E5%99%A8.png"></p><ul><li><strong>nth-child(n)选择器</strong></li></ul><p> n可以是数字/关键字/公式 （n只能取0和正数，负数无效）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs css">//n是数字  -选择第n个子元素<br><span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">2</span>)&#123;&#125;  //交集选择器 选择<span class="hljs-selector-tag">div</span>元素并且<span class="hljs-selector-tag">div</span>是第二个子元素<br><span class="hljs-selector-tag">div</span> <span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">2</span>)&#123;&#125; //区别：后代选择器，选择<span class="hljs-selector-tag">div</span>下的第二个子儿子<br><br>//关键字   -even偶/odd奇数<br>nth-child(even/odd)<br><br>//公式(n都是从<span class="hljs-number">0</span>开始的自然数) <br>//所有孩子、偶数、奇数、<span class="hljs-number">5</span>的倍数<br>nth-child(n/<span class="hljs-number">2</span>n/<span class="hljs-number">2</span>n+<span class="hljs-number">1</span>/<span class="hljs-number">5</span>n)  //选择所有孩子(只能写n)<br><br>nth-child(n+<span class="hljs-number">5</span>) //从第五个开始(包含五)  <br>nth-child(-n+<span class="hljs-number">5</span>)  //前五个(包含五) n必须在前<br></code></pre></td></tr></table></figure><ul><li><strong>nth-of-type(n)</strong></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:nth-of-type</span>(<span class="hljs-number">2</span>)&#123;&#125;   //选择<span class="hljs-selector-tag">div</span>，并且<span class="hljs-selector-tag">div</span>是父元素中第二个<span class="hljs-selector-tag">div</span>(不一定是第二个)<br></code></pre></td></tr></table></figure><ul><li><strong>nth-child(n)和nth-of-type(n)区别</strong><ul><li>div:nth-child(n) 是找第n个子元素-无论类型,如果是div则选中是否无法选中</li><li>div:nth-of-type(n) 是找第n个div元素(指定类型)，排除(不计数)所有非div元素</li></ul></li></ul><p><strong>:nth-child(n)权重为10</strong></p><h4 id="7-5-3-其他结构伪类和否定伪类选择器-了解"><a href="#7-5-3-其他结构伪类和否定伪类选择器-了解" class="headerlink" title="7.5.3 其他结构伪类和否定伪类选择器(了解)"></a>7.5.3 其他结构伪类和否定伪类选择器(了解)</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*nth-last-child 和 nth-last-of-type 从后往前选择，其他用法和nth-child、nth-of-type相似*/</span><br><span class="hljs-selector-tag">p</span><span class="hljs-selector-pseudo">:nth-last-child</span>(<span class="hljs-number">1</span>) &#123;<br>      <span class="hljs-attribute">color</span>: red   /*选择p元素并且是倒数第一个*/<br>&#125;  <br><br><span class="hljs-comment">/*偶尔会用</span><br><span class="hljs-comment">:root           根元素，就是HTML元素</span><br><span class="hljs-comment">:empty&#123;&#125;        empty伪类 选中内容为空的元素</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">/*以下了解</span><br><span class="hljs-comment">:first-child    &lt;=&gt; 相当于nth-child(1)</span><br><span class="hljs-comment">:last-child    &lt;=&gt; 相当于nth-last-child(1)</span><br><span class="hljs-comment">:first-of-type  &lt;=&gt; 相当于nth-of-type(1)</span><br><span class="hljs-comment">:last-of-type   &lt;=&gt; 相当于nth-last-of-type(1)</span><br><span class="hljs-comment">:only-child     父元素中唯一子元素</span><br><span class="hljs-comment">:only-of-type   父元素唯一这种类型子元素(比如唯一的div...)</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><ul><li>否定伪类(了解)</li></ul><p>语法： :not(x)   x是一个简单选择器-标签、class、id、属性、*、伪类(除否定伪类)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-pseudo">:not</span>(<span class="hljs-selector-tag">p</span>)&#123;&#125;  <span class="hljs-comment">/*除了p元素的其他元素*/</span><br></code></pre></td></tr></table></figure><h3 id="7-6-伪元素选择器"><a href="#7-6-伪元素选择器" class="headerlink" title="7.6 伪元素选择器"></a>7.6 伪元素选择器</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*</span><br><span class="hljs-comment">常用伪元素选择器（可以用:或:: 但是为了和伪类区分，建议::）</span><br><span class="hljs-comment">::first-line</span><br><span class="hljs-comment">::first-letter</span><br><span class="hljs-comment">::before</span><br><span class="hljs-comment">::after</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">/*只有部分属性可以应用，了解*/</span><br><span class="hljs-selector-tag">p</span><span class="hljs-selector-pseudo">::first-line</span>&#123;<span class="hljs-attribute">color</span>: red&#125;   //<span class="hljs-selector-tag">p</span>的第一行变为red<br><span class="hljs-selector-tag">p</span><span class="hljs-selector-pseudo">::first-letter</span>&#123;<span class="hljs-attribute">color</span>: red&#125; //<span class="hljs-selector-tag">p</span>的第一个字或字母变色<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">作用：可以利用CSS在一个元素内容之间或之后插入其他内容(图片/文字等),而不需要HTML标签，简化结构</span><br><span class="hljs-comment">::before  在元素内部的前面插入内容</span><br><span class="hljs-comment">::after  在元素内部的后面插入内容</span><br><span class="hljs-comment">注意：before/after创建的元素都属于inline行内元素-要设置宽高需：display: inline-block</span><br><span class="hljs-comment">     新创建的元素在文档树中是找不到的-称为伪元素</span><br><span class="hljs-comment">     before/after必须有content: &quot;&quot;;</span><br><span class="hljs-comment">     权重为1(和标签选择器一样)</span><br><span class="hljs-comment">语法： element::before&#123;&#125;</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-selector-class">.box1</span><span class="hljs-selector-pseudo">::before</span>&#123;<span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;&quot;</span>&#125;  <br><br> <br><span class="hljs-comment">/*</span><br><span class="hljs-comment">使用场景-伪元素清除浮动</span><br><span class="hljs-comment">方法一：额外标签法(隔墙法) -会额外增加标签</span><br><span class="hljs-comment">父盒子中最后插入一个空的块级元素并 clear:both</span><br><span class="hljs-comment">父级添加overflow: hiddle;</span><br><span class="hljs-comment">   (后面两种伪元素清除浮动算是额外标签法的升级和优化)</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">方法二：父级添加after伪元素(推荐) */</span><br><br><span class="hljs-selector-class">.clearfix</span>:after&#123;<br>content:<span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-attribute">display</span>: block;<br>    <span class="hljs-attribute">clear</span>: both;<br>&#125;<br><br><span class="hljs-comment">/*方法三-父级添加双伪元素(推荐)*/</span><br><br><span class="hljs-selector-class">.clearfix</span>:before,.clearfix:after&#123;<br>content: <span class="hljs-string">&quot;&quot;</span>;  <br>    <span class="hljs-attribute">display</span>: table; <br>&#125;<br><span class="hljs-selector-class">.clearfix</span>:after&#123;clear: both;&#125;<br></code></pre></td></tr></table></figure><h2 id="8-Emmet语法-了解"><a href="#8-Emmet语法-了解" class="headerlink" title="8. Emmet语法(了解)"></a>8. Emmet语法(了解)</h2><ul><li>使用场景：VS Code中使用缩写，来提高html/css的编写速度</li></ul><p><strong>快速生成HTML结构语法</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* ! html:5  生成h5代码结构*/</span><br><br><span class="hljs-comment">/* 多个* */</span><br><span class="hljs-selector-tag">p</span>*<span class="hljs-number">3</span>  //生成三个<span class="hljs-selector-tag">p</span><br><br><span class="hljs-comment">/*生成父子和兄弟元素*/</span><br><span class="hljs-selector-tag">div</span>&gt;<span class="hljs-selector-tag">p</span>  //  <span class="hljs-selector-tag">div</span>和<span class="hljs-selector-tag">p</span>父子<br><span class="hljs-selector-tag">div</span>+<span class="hljs-selector-tag">p</span>  //  <span class="hljs-selector-tag">div</span>和<span class="hljs-selector-tag">p</span>兄弟<br><br><span class="hljs-comment">/*上一层^和分组()</span><br><span class="hljs-comment">实现以下元素的两种Emment语法：</span><br><span class="hljs-comment">上一层：div&gt;p&gt;span^h1^div</span><br><span class="hljs-comment">分组： (div&gt;(p&gt;span)&gt;h1)+div</span><br><span class="hljs-comment">*/</span><br>&lt;<span class="hljs-selector-tag">div</span>&gt;<br>    &lt;<span class="hljs-selector-tag">p</span>&gt;<br>      &lt;<span class="hljs-selector-tag">span</span>&gt;&lt;/<span class="hljs-selector-tag">span</span>&gt;<br>    &lt;/<span class="hljs-selector-tag">p</span>&gt;<br>    &lt;<span class="hljs-selector-tag">h1</span>&gt;&lt;/<span class="hljs-selector-tag">h1</span>&gt;<br>&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;<span class="hljs-selector-tag">div</span>&gt;&lt;/<span class="hljs-selector-tag">div</span>&gt;<br><br><span class="hljs-comment">/*生成属性[]*/</span><br><span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.name</span>/<span class="hljs-selector-tag">p</span><span class="hljs-selector-id">#demo</span>(不加标签默认<span class="hljs-selector-tag">div</span>)  //类名或者id<br><span class="hljs-selector-tag">div</span><span class="hljs-selector-attr">[title=<span class="hljs-string">&quot;1&quot;</span>]</span>  //生成title=&quot;<span class="hljs-number">1</span>&quot;的<span class="hljs-selector-tag">div</span><br><span class="hljs-selector-tag">div</span><span class="hljs-selector-id">#box1</span><span class="hljs-selector-class">.box2</span><span class="hljs-selector-class">.box3</span><span class="hljs-selector-attr">[title=<span class="hljs-string">&quot;div&quot;</span>]</span>  //生成多个属性<br><br><span class="hljs-comment">/*生成内容&#123;&#125;*/</span><br><span class="hljs-selector-tag">h1</span>&#123;我是<span class="hljs-selector-tag">h1</span>&#125;  //生成内容为&quot;我是<span class="hljs-selector-tag">h1</span>&quot;的<span class="hljs-selector-tag">h1</span><br><span class="hljs-comment">/*生成带有数字$*/</span><br><span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.box</span>$*<span class="hljs-number">4</span>    //属性有数字-生成四个<span class="hljs-selector-tag">div</span> class=box1 box2... <br><span class="hljs-selector-tag">p</span>&#123;我是文字内容$&#125;*<span class="hljs-number">3</span>  //内容有数字<br><br><span class="hljs-comment">/*隐式标签*/</span><br><span class="hljs-selector-class">.box1</span>&gt;<span class="hljs-selector-id">#box2</span>   //不加标签，默认是<span class="hljs-selector-tag">div</span><br><span class="hljs-selector-tag">ul</span>&gt;<span class="hljs-selector-class">.item</span>$&#123;我是第$个<span class="hljs-selector-tag">li</span>&#125;*<span class="hljs-number">3</span>  //<span class="hljs-selector-tag">ul</span>只能放<span class="hljs-selector-tag">li</span>，所以可以省略<span class="hljs-selector-tag">li</span><br><span class="hljs-selector-tag">table</span>&gt;<span class="hljs-selector-id">#row</span>$*<span class="hljs-number">3</span>&gt;<span class="hljs-selector-attr">[colspan=2]</span>  //直接生成<span class="hljs-selector-tag">tr</span>/<span class="hljs-selector-tag">td</span><br><br></code></pre></td></tr></table></figure><p><strong>快速生成CSS样式语法</strong></p><p>(大部分都是单词缩写)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*width:100 height:200 margin:10 padding:20*/</span><br>w100+h200+m10+p20  <br><span class="hljs-comment">/*m20-30-40--50*/</span><br><span class="hljs-attribute">margin</span>: <span class="hljs-number">20</span>,<span class="hljs-number">30</span>,<span class="hljs-number">40</span>,-<span class="hljs-number">50</span><br>/*fz20*/<br>font-size: <span class="hljs-number">20</span>  <br>/*fw*/<br>font-weight: <span class="hljs-number">700</span>  <br>/*bgc*/<br>background-color  <br></code></pre></td></tr></table></figure><h2 id="9-CSS特性"><a href="#9-CSS特性" class="headerlink" title="9. CSS特性"></a>9. CSS特性</h2><ul><li><p>CSS特性：层叠性 继承性</p></li><li><p><strong>层叠性</strong> </p><ul><li>css是层叠样式表，也就是说的层叠性</li><li>同一个元素通过相同/不同选择器设置相同的样式 就会产生覆盖（层叠）</li><li>设置多个样式，最终谁会生效<ul><li>选择器的权重，权重大的生效，权重可以判断出优先级</li><li>先后顺序，权重相同时，后设置的生效</li></ul></li><li><strong>优先级</strong></li></ul></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*</span><br><span class="hljs-comment">继承或*(0,0,0,0)&lt;标签选择器,伪元素(0,0,0,1)&lt;class,伪类选择器,属性选择器(0,0,1,0)</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">&lt;id(0,1,0,0)&lt;style内联样式(1,0,0,0)&lt;!important(1,0,0,0,0)（无穷大） */</span><br><br><span class="hljs-attribute">color</span> : red <span class="hljs-meta">!important</span>;        <br></code></pre></td></tr></table></figure><p><strong>注意：</strong>继承的权重是0</p><div class="code-wrapper"><pre><code class="hljs">        a/h1-h6浏览器默认指定了样式，所有a必须单独指定样式（指定body没用）        复合选择器权重的叠加：只能叠加，没有进位</code></pre></div><ul><li><strong>继承性</strong><ul><li>css某些属性具有继承性：如果给一个元素设置了具备继承性的属性，所有后代元素都会继承该属性</li><li>继承的优先级很低：一旦元素自己设置了样式，继承的就会失效</li><li>具备继承性的元素：文本和字体属性通常都能继承</li><li>多查阅文档，文档中会有说该属性是否继承</li><li>继承过来的是计算值，而不是设置值（如2em，继承过来是计算出来的px而不是2em）</li></ul></li></ul><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">Interited <span class="hljs-keyword">from</span> body  <span class="hljs-comment">//浏览器调试时，会有这个提示继承自哪个</span><br></code></pre></td></tr></table></figure><p>强制继承</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*不能继承的属性，可以使用Interited强制继承*/</span><br><span class="hljs-attribute">width</span>: inherit;<br></code></pre></td></tr></table></figure><p>继承的用途-行高的继承</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">body</span>&#123; <span class="hljs-attribute">font</span>: <span class="hljs-number">12px</span>/<span class="hljs-number">1.5</span> ‘Microsoft yahei’;&#125; <br></code></pre></td></tr></table></figure><p>若子元素有文字大小，则子元素当前文字大小的1.5倍</p><p>若无，则是父元素的文字大小的1.5倍</p><p>优点：子元素可以根据自己的文字大小自动调整行高</p><h2 id="10-元素显示模式-类型"><a href="#10-元素显示模式-类型" class="headerlink" title="10. 元素显示模式(类型)"></a>10. 元素显示模式(类型)</h2><h3 id="10-1-元素显示模式的由来"><a href="#10-1-元素显示模式的由来" class="headerlink" title="10.1 元素显示模式的由来"></a>10.1 元素显示模式的由来</h3><ul><li><p>定义：元素（标签）以什么方式进行显示</p></li><li><p>HTML定义元素类型的思路</p><ul><li>HTML元素有很多：p div span h1 img a等，当把元素放到页面上时应该占据一行多宽的空间？<ul><li>这里的只说一行，因为垂直方向的高度一般由内容决定</li></ul></li><li>比如：h元素代表标题，我们希望它独占一行；p元素是一个整体段落，必然也需要独占一行</li><li>然而，img、a、span等元素，通常是对内容某个细节的描述，不需独占一行</li><li>为了区分哪些元素需要独占一行，哪些元素又一行多个，将元素分成两类</li></ul></li><li><p>分类</p><ul><li><p>按是否能在一行显示分</p><ul><li>块级(block-level)元素：独占父元素的一行</li><li>行内级(inline-level)元素：多个行内级元素可以在父元素同一行显示</li></ul></li><li><p>行内级元素一般又分为：替换元素和非替换元素</p></li></ul></li></ul><p><img src="/img/css_%E5%85%83%E7%B4%A0%E5%88%86%E7%B1%BB.png"></p><h3 id="10-2-不同level元素的特征"><a href="#10-2-不同level元素的特征" class="headerlink" title="10.2 不同level元素的特征"></a>10.2 不同level元素的特征</h3><ul><li><strong>块级block元素</strong></li></ul><p>特点：独占父元素的一行,可控 宽度/高度/外边距/内边距(设置完宽度依然独占一行)</p><p>​           宽度默认父级宽度,可以放行内或块元素</p><p>注意：文字类的元素不能包含块级元素(h1-h6/p)</p><ul><li><strong>行内级inline元素</strong></li></ul><p>特点：一行可以放多个,宽/高设置无效(行内非替换元素)    </p><p>​           默认宽度本身内容宽度,只能容纳文本或行内元素 </p><p>注意：a可以放块内元素，但转换块级模式最安全</p><p>如：a，strong，em，span等，span就是典型行内元素</p><ul><li><strong>替换inline-block元素(行内)</strong></li></ul><p>定义：元素本身没有内容，浏览器会根据元素的类型和属性(如img的src)，来决定元素的具体显示内容</p><p>如：img 、input 、iframe、audio</p><p>特点：一行可以多个  宽高由内容决定</p><p>​            宽高/行高/外边距/内边距可以设置</p><p>​            同时具有块级元素和行内元素的特点</p><h3 id="10-3-元素显示模式转换"><a href="#10-3-元素显示模式转换" class="headerlink" title="10.3 元素显示模式转换"></a>10.3 元素显示模式转换</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*</span><br><span class="hljs-comment">四个常用属性值</span><br><span class="hljs-comment">block-让元素显示为块级元素</span><br><span class="hljs-comment">inline-让元素显示为行内级元素</span><br><span class="hljs-comment">inline-block-让元素同时具备行内级、块级元素的特征</span><br><span class="hljs-comment">none-隐藏元素,不占据空间</span><br><span class="hljs-comment">  flex-flex布局后面学习</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">浏览器默认给p、div、h1...设置了 display: block</span><br><span class="hljs-comment">*/</span><br><span class="hljs-attribute">display</span>:block/inline/inline-block/none<br></code></pre></td></tr></table></figure><h2 id="11-元素的显示与隐藏"><a href="#11-元素的显示与隐藏" class="headerlink" title="11. 元素的显示与隐藏"></a>11. 元素的显示与隐藏</h2><p>本质：让一个元素在页面中隐藏或显示出来</p><p>(举例：网站广告点击关闭及不见了，刷新重新出现)</p><p>分类：    display/visibility 显示隐藏</p><p>​                overflow溢出显示隐藏</p><ul><li><strong>display属性（重点）</strong></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*</span><br><span class="hljs-comment">隐藏元素后，不再占有原来位置</span><br><span class="hljs-comment">除了转换为块级元素外，同时还有显示元素的意思（不一定要用block，只要不是none都可显示）</span><br><span class="hljs-comment">*/</span><br><span class="hljs-attribute">display</span>: none;  <br><span class="hljs-attribute">display</span>: block;  <br></code></pre></td></tr></table></figure><p>后面应用及其广泛，搭配JS可以做很多网页特效</p><ul><li><strong>visibility可见性</strong></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*</span><br><span class="hljs-comment">visible/hidden-元素可视/隐藏</span><br><span class="hljs-comment">visibility隐藏元素后继续占有原来位置</span><br><span class="hljs-comment">*/</span><br><span class="hljs-attribute">visibility</span>: visible/hidden;<br></code></pre></td></tr></table></figure><ul><li><p><strong>rgba和opacity实现隐藏</strong></p><ul><li>rgba的a是设置alpha值，可以设置color/bgc的透明度，不影响子元素 0~1</li><li>opacity设置整个元素的透明度，会影响所有子元素都有透明度 0~1</li></ul></li><li><p><strong>overflow溢出</strong></p></li></ul><p>作用：对溢出的部分进行显示/隐藏</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*</span><br><span class="hljs-comment">visible 默认-将多余的显示出来</span><br><span class="hljs-comment">hidden隐藏多余的</span><br><span class="hljs-comment">scroll溢出添加滚动条</span><br><span class="hljs-comment">auto溢出时自动添加滚动条（不溢出不显示）</span><br><span class="hljs-comment">*/</span><br><span class="hljs-attribute">overflow</span>: visible/hidden/scroll/auto;    <br><br><span class="hljs-attribute">overflow-x</span>/<span class="hljs-attribute">overflow-y</span>  <span class="hljs-comment">/*有的浏览器可能不支持*/</span><br></code></pre></td></tr></table></figure><p>注：一般情况，我们都不想让溢出的部分显示出来，因为溢出部分会影响布局</p><p>但是如果有定位的盒子，请慎用overflow: hidden因为它会隐藏多余部分        </p><h2 id="12-CSS盒子模型"><a href="#12-CSS盒子模型" class="headerlink" title="12. CSS盒子模型"></a>12. CSS盒子模型</h2><p> <img src="/img/css_%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B.png"></p><p><strong>盒子模型</strong></p><ul><li><p>HTML中每一个元素都可以看成一个盒子，具备以下四个属性</p></li><li><p>组成：margin/border/padding/content</p></li><li><p>盒子大小：box size=content+(padding+border+margin)*2</p></li><li><p>盒子有四边：margin/border/padding 包括 top/right/bottom/left四个边</p></li></ul><h3 id="13-1-content"><a href="#13-1-content" class="headerlink" title="13.1 content"></a>13.1 content</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*设置内容是通过宽高设置的 宽度默认值是auto-交给浏览器来决定*/</span><br><span class="hljs-attribute">width</span> <span class="hljs-attribute">height</span><br><br><span class="hljs-comment">/*最小宽度，保证宽度&gt;=min(当宽度小于min时，会产生滚动条)</span><br><span class="hljs-comment">  最大宽度，保证宽度&lt;=max(当宽度大于max时，宽度还是按照max显示)*/</span><br><span class="hljs-attribute">min-width</span><br><span class="hljs-attribute">max-width</span><br><br><span class="hljs-comment">/*不常用：和min/max-width类似*/</span><br><span class="hljs-attribute">min-height</span><br><span class="hljs-attribute">max-height</span><br></code></pre></td></tr></table></figure><h3 id="13-2-padding"><a href="#13-2-padding" class="headerlink" title="13.2 padding"></a>13.2 padding</h3><ul><li>边框和内容之间的距离</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*top/right/bottom/left*/</span><br><span class="hljs-attribute">padding-left</span>: <span class="hljs-number">12px</span>;   <br><br><span class="hljs-comment">/*padding简写属性*/</span><br><span class="hljs-attribute">padding</span>: <span class="hljs-number">5px</span>;      //都是<span class="hljs-number">5</span>  <br><span class="hljs-attribute">padding</span>: <span class="hljs-number">5px</span> <span class="hljs-number">10px</span>; //上<span class="hljs-number">5</span> 右<span class="hljs-number">10</span> (缺左和下：左和右一样<span class="hljs-number">10</span> 下和上一样<span class="hljs-number">5</span>)<br><span class="hljs-attribute">padding</span>: <span class="hljs-number">5px</span> <span class="hljs-number">10px</span> <span class="hljs-number">20px</span>  //上<span class="hljs-number">5</span> 右<span class="hljs-number">10</span> 下<span class="hljs-number">20</span> (缺左：左和右一样<span class="hljs-number">10</span>)<br>padding: <span class="hljs-number">5px</span> <span class="hljs-number">10px</span> <span class="hljs-number">20px</span> <span class="hljs-number">30px</span>  //上<span class="hljs-number">5</span>右<span class="hljs-number">10</span>下<span class="hljs-number">20</span>左<span class="hljs-number">30</span><br></code></pre></td></tr></table></figure><p>注意：padding会影响盒子的实际大小-撑大盒子  </p><p>应用：导航栏不给盒子宽度，给盒子相同的padding撑开盒子   </p><h3 id="13-3-border"><a href="#13-3-border" class="headerlink" title="13.3 border"></a>13.3 border</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*</span><br><span class="hljs-comment">组成</span><br><span class="hljs-comment">border-width： border-top-width(right/bottom/left)的简写(color、style也一样)</span><br><span class="hljs-comment">border-style: solid/dashed/dotted  实线、虚线、点线</span><br><span class="hljs-comment">border-color</span><br><span class="hljs-comment">*/</span> <br><span class="hljs-comment">/*边框的复合写法*/</span><br><span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid red; <br><br><span class="hljs-comment">/*分开写法(top bottom left right)*/</span><br><span class="hljs-attribute">border-top</span>: <span class="hljs-number">1px</span> solid red; <br><span class="hljs-attribute">border-top-width</span>: <span class="hljs-number">1px</span>;<br><br><span class="hljs-comment">/*表格的细线边框*/</span><br><span class="hljs-attribute">border-collapse</span>: collapse;<br><span class="hljs-comment">/*相邻边框合并在一起, 如*/</span><br><span class="hljs-selector-tag">table</span>,<span class="hljs-selector-tag">td</span>,<span class="hljs-selector-tag">th</span>&#123;<span class="hljs-attribute">border-collapse</span>: collapse; &#125;<br></code></pre></td></tr></table></figure><p>注意：边框会增加盒子的实际大小</p><h3 id="13-4-margin"><a href="#13-4-margin" class="headerlink" title="13.4 margin"></a>13.4 margin</h3><ul><li>设置元素与元素之间的距离</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">margin-top</span>/<span class="hljs-attribute">right</span>/<span class="hljs-attribute">bottom</span>/<span class="hljs-attribute">left</span>：<span class="hljs-number">12px</span>;<br><br>//应用-块级盒子水平居中<br><span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto; //盒子必须有宽,上下视情况定<br>//行内元素、行内块元素水平居中-其父元素添加 <br><span class="hljs-attribute">text-align</span>: center         <br></code></pre></td></tr></table></figure><p>简写 margin: 30px  (和padding一样)     </p><h4 id="13-4-1-margin折叠和传递"><a href="#13-4-1-margin折叠和传递" class="headerlink" title="13.4.1 margin折叠和传递"></a>13.4.1 margin折叠和传递</h4><ul><li><p><strong>margin传递/折叠原因</strong></p><ul><li>传递-不应该用margin设置父子元素，应该用padding</li><li>折叠-margin-top/bottom设置一个即可 不应该设置两个</li><li>浏览器会认为设置错了，所以出现传递和折叠现象</li></ul></li><li><p><strong>上下margin折叠</strong></p><ul><li>折叠：垂直方向上相邻的2个margin(margin-top、margin-bottom)可能合并成一个margin</li><li>两种会折叠的情况<ul><li>两个兄弟块级元素之间的上下margin折叠</li><li>两个父子块级元素之间margin折叠</li></ul></li><li>只有垂直方向才会折叠，水平不会</li><li>折叠后的计算规则：取两个值中较大值</li><li>解决：尽量只给一个盒子添加margin值</li></ul></li></ul><ul><li><p><strong>上下margin传递</strong></p><ul><li><p>margin-top传递（常见）</p><ul><li><p>块级元素的顶部线和父元素的顶部线重叠，那么这个块级元素的margin-top值会传递给父元素</p></li><li><p>父子都有上外边距，此时父元素会塌陷较大的外边距值</p></li></ul></li><li><p>margin-bottom传递（少见，了解）</p><ul><li>底部线重叠，且父元素高度是auto，那么这个块级元素的margin-top值也会传递给父元素</li></ul></li></ul></li><li><p>如何防止传递问题：</p><ul><li><p>父元素设置border-top/border-bottom（不是每个盒子都需要border）</p></li><li><p>父元素设置padding-top/padding-bottom（较好）</p></li><li><p>触发父盒子BFC：设置父元素overflow: hidden/auto</p><p>   (BFC：block format context   相对于一个结界，触发BFC条件：浮动/设置元素overflow为非visible)</p></li></ul></li></ul><h4 id="13-4-2-margin和padding之间的选择"><a href="#13-4-2-margin和padding之间的选择" class="headerlink" title="13.4.2 margin和padding之间的选择"></a>13.4.2 margin和padding之间的选择</h4><ul><li>margin一般用来设置兄弟元素的间距</li><li>padding一般用来设置父子元素的间距</li></ul><h4 id="13-4-3-margin实现块级元素水平居中"><a href="#13-4-3-margin实现块级元素水平居中" class="headerlink" title="13.4.3 margin实现块级元素水平居中"></a>13.4.3 margin实现块级元素水平居中</h4><ul><li>块级盒子所占的宽度 block box width=width+padding+border+margin</li><li>默认会把剩余空间分配给margin-right</li><li>当我们把margin-left/margin-right: auto 时，就会平均分配除了width/padding/border的空间</li><li>所有设置margin: 0 auto; 可以达到块级元素居中显示</li></ul><h4 id="13-4-4-清除内外边距"><a href="#13-4-4-清除内外边距" class="headerlink" title="13.4.4 清除内外边距"></a>13.4.4 清除内外边距</h4><ul><li><p>网页元素很多都带有默认的内外边距,布局前清除内外边距</p></li><li><p>CSS的第一句话：body,p,div….{padding: 0;margin: 0;} </p></li></ul><ul><li>注意：行内元素尽量只设置左右内外边距（上下内外边距设置了没用如果需要设置，则将其转换为块级和行内块元素就可以了 ）</li></ul><h3 id="13-5-行内非替换元素的特殊性"><a href="#13-5-行内非替换元素的特殊性" class="headerlink" title="13.5 行内非替换元素的特殊性"></a>13.5 行内非替换元素的特殊性</h3><ul><li><p>以下属性对行内非替换元素不起作用</p><ul><li>width、height、margin-top、margin-bottom</li></ul></li><li><p>以下属性对行内非替换元素的效果比较特殊</p><ul><li>padding-top、padding-bottom、border-top、boder-bottom</li><li>会多出区域，但是这个区域不占空间(会被下面的元素占据)</li></ul></li></ul><h3 id="13-6-盒子模型box-sizing（重要）"><a href="#13-6-盒子模型box-sizing（重要）" class="headerlink" title="13.6 盒子模型box-sizing（重要）"></a>13.6 盒子模型box-sizing（重要）</h3><ul><li>默认情况下，设置宽高只是设置box内容的宽高，padding/border会撑大box</li><li>如果想设置宽高时，设置的是box全部的size(padding/border不会撑大)，就需要用box-sizing<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*</span><br><span class="hljs-comment">content-box(默认-指定盒子宽高时，只是内容的宽高)</span><br><span class="hljs-comment"> border-box(padding和border不会撑大盒子-设置宽高时是内容+内边距+边框的宽度)</span><br><span class="hljs-comment">*/</span><br><span class="hljs-attribute">box-sizing</span>: content-box/border-box<br></code></pre></td></tr></table></figure></li></ul><h3 id="13-7-圆角边框和外轮廓"><a href="#13-7-圆角边框和外轮廓" class="headerlink" title="13.7 圆角边框和外轮廓"></a>13.7 圆角边框和外轮廓</h3><ul><li><strong>圆角边框</strong><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*简写属性：值(数值或百分比)越大，圆角越大</span><br><span class="hljs-comment">百分比相对于boder-box: content+padding+border */</span><br><span class="hljs-attribute">border-radius</span>: px/%; <br><span class="hljs-comment">/*单独设置某个角的值(开发不常见)*/</span><br><span class="hljs-attribute">border-top-left-radius</span> <br><br><span class="hljs-comment">/*一个参数，两个参数，三个参数，四个参数*/</span><br><span class="hljs-attribute">border-radius</span>: <span class="hljs-number">10px</span>;<br><span class="hljs-attribute">border-radius</span>: <span class="hljs-number">10px</span> <span class="hljs-number">20px</span> <span class="hljs-number">30px</span> <span class="hljs-number">40px</span>; <span class="hljs-comment">/*上右下左设置不同的圆角*/</span><br><br><span class="hljs-comment">/* 圆形盒子：正方形盒子，边长的一半/50% */</span><br><span class="hljs-attribute">border-radius</span>: <span class="hljs-number">50%</span>;  <span class="hljs-comment">/*如果写px，是整个box的边长，包括border、padding*/</span><br><span class="hljs-comment">/*距形盒子：高度height的一半 */</span><br></code></pre></td></tr></table></figure></li></ul><p>写法：参数值可以为数值或百分比(参照的是整个盒子百分比)</p><ul><li><strong>outline 外轮廓</strong></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*</span><br><span class="hljs-comment">outline表示元素的外轮廓，默认显示在border的外面</span><br><span class="hljs-comment">语法和border完全一样，属性有 outline-width/style/color</span><br><span class="hljs-comment">outline: 1px solid #f00</span><br><span class="hljs-comment">outline不占据空间</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">/* 去除a元素、input元素的focus轮廓效果，直接给a设置相当于把所有的状态都设置了：如link、hover...  */</span><br><span class="hljs-selector-tag">a</span>,<span class="hljs-selector-tag">input</span>,<span class="hljs-selector-tag">textarea</span> &#123;<br>    <span class="hljs-attribute">outline</span>: none;  <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="13-8-盒子阴影和文字阴影"><a href="#13-8-盒子阴影和文字阴影" class="headerlink" title="13.8 盒子阴影和文字阴影"></a>13.8 盒子阴影和文字阴影</h3><ul><li>在线调试盒子阴影网站：<a href="https://html-css-js.com/css/generator/box-shadow/">https://html-css-js.com/css/generator/box-shadow/</a></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*</span><br><span class="hljs-comment">参数说明：</span><br><span class="hljs-comment">h-shadow/v-shadow(必须) -水平x/垂直偏移y轴</span><br><span class="hljs-comment">blur radius-模糊半径-影子的虚实  </span><br><span class="hljs-comment">spread-延伸距离         </span><br><span class="hljs-comment">color-影子颜色 rgab(0,0,0,.3)一般用透明颜色（如果没有设置就跟随color属性的颜色）</span><br><span class="hljs-comment">inset-外阴影变成内阴影，默认外阴影（内阴影inset）</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-attribute">box-shadow</span>: h-shadow v-shadow [blur spread color inset]; <br></code></pre></td></tr></table></figure><p>注：默认外阴影(outset)不写，否则导致阴影无效<br>        阴影不会占用空间      </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*设置四周阴影*/</span><br><span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">10px</span> <span class="hljs-number">5px</span>; <span class="hljs-comment">/*依靠，模糊半径和延伸距离来设置四周阴影*/</span>、<br><br><span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">5px</span> <span class="hljs-number">5px</span> <span class="hljs-number">10px</span>, -<span class="hljs-number">5px</span> <span class="hljs-number">0px</span> <span class="hljs-number">10px</span>; <span class="hljs-comment">/*设置多个阴影，x方向正负都设置*/</span><br></code></pre></td></tr></table></figure><ul><li>文字阴影（了解）<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*</span><br><span class="hljs-comment">和box-shadow类似，用于给文字添加阴影效果</span><br><span class="hljs-comment">它没有spread和inset</span><br><span class="hljs-comment">*/</span><br><span class="hljs-attribute">text-shadow</span>: h-shadow v-shadow blur color<br></code></pre></td></tr></table></figure></li></ul><h2 id="13-CSS浮动"><a href="#13-CSS浮动" class="headerlink" title="13. CSS浮动"></a>13. CSS浮动</h2><h3 id="13-1-认识浮动"><a href="#13-1-认识浮动" class="headerlink" title="13.1 认识浮动"></a>13.1 认识浮动</h3><ul><li><p>传统网页布局的三种方式： 普通流(标准流) 浮动 定位</p></li><li><p>浮动的历史</p><ul><li>浮动最初只是用在一段文本内浮动图像，实现文字环绕效果</li><li>但早期的css标准并没有提供好的左右布局方案，所以在一段时间里它成为多列布局最常用工具</li><li>浮动可以允许文本和内联元素环绕它</li></ul></li><li><p>浮动定义</p><ul><li>float属性用于创建浮动框，将其移动到一边，直到左边缘或右边缘触及包含块或另一个浮动框的边缘</li></ul></li><li><p>浮动作用</p><ul><li>浮动可以让多个块级盒子一行没有缝隙排列显示经常用于横向排列盒子</li></ul></li></ul><p>（3）语法</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">float</span>: left/right/none;  //左浮右浮不浮动(默认) <br></code></pre></td></tr></table></figure><h3 id="13-2-浮动规则"><a href="#13-2-浮动规则" class="headerlink" title="13.2 浮动规则"></a>13.2 浮动规则</h3><ul><li><p>规则一：脱离标准流（不占有位置）</p><ul><li>浮动元素朝左或右移动，直到自己的边缘紧贴着包含块或其他浮动元素的边界为止</li><li>定位元素会层叠在浮动元素上面</li><li>具有行内块元素的特征  </li></ul></li><li><p>规则二：浮动元素的左右边界不能超出包含块的左右边界</p></li><li><p>规则三：浮动元素之间不能层叠</p><ul><li>后浮动的元素会贴着先浮动的元素边缘</li><li>如果水平方向剩余空间不够显示浮动元素，浮动元素将向下移动，直到有充足空间为止</li></ul></li><li><p>规则四：浮动元素不能与行内级内容层叠，行内级内容会被浮动元素推出</p><ul><li>如 inlie元素、inline-block元素、块级元素的文字内容</li></ul></li><li><p>规则五：一行内没有缝隙显示并且元素顶部对齐</p><ul><li>inlie、inline-block元素浮动后，其顶部与所在行顶部对齐</li></ul></li></ul><h3 id="10-3-去除行内级元素之间的空格"><a href="#10-3-去除行内级元素之间的空格" class="headerlink" title="10.3 去除行内级元素之间的空格"></a>10.3 去除行内级元素之间的空格</h3><ul><li><p>空格产生原因</p><ul><li>行内级元素(包括inline-block) 代码之间有空格或换行，会被解析显示为空格</li></ul></li><li><p>解决方法</p><ul><li>代码之间不留空格</li><li>设置父元素font-size : 0; 但是需要子元素设置回来  (此方法在Safari不适用)</li><li>给元素添加float (推荐)</li><li>flex布局</li></ul></li></ul><h3 id="13-4-浮动的清除"><a href="#13-4-浮动的清除" class="headerlink" title="13.4 浮动的清除"></a>13.4 浮动的清除</h3><ul><li><p>浮动产生的影响-高度塌陷</p><ul><li>当一个盒子有很多个浮动子盒子时，不方便给父盒子高度，但子盒子浮动不占位置(高度)</li><li>最后父级盒子高度为0，就会影响下面的标准流盒子。</li></ul></li><li><p>解决方法-clear</p><ul><li>clear属性可以指定一个元素是否移动到在它之前的浮动元素的最下面</li><li>left/right/both/none：移动到之前的向左、右、全部、默认(无)的浮动元素底部</li></ul> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">选择器&#123;<span class="hljs-attribute">clear</span><span class="hljs-selector-pseudo">:left</span>/<span class="hljs-attribute">right</span>/both;&#125;   //清除左/右/两侧浮动<br></code></pre></td></tr></table></figure></li><li><p>具体方法</p><ul><li><p>额外标签法/隔墙法（不推荐）</p><ul><li>在浮动元素父元素内容末尾添加一个块级空标签，如div ，设置clear:both</li></ul></li><li><p>父级添加overflow: hidden属性（不推荐）</p><ul><li>优点：代码简介   缺点：无法显示溢出部分   </li></ul></li><li><p>父级添加::after伪元素 （推荐）</p></li></ul></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*转化成块级元素才能占据空间，clear:both才有用*/</span><br><span class="hljs-selector-class">.clear_fix</span><span class="hljs-selector-pseudo">::after</span>&#123;<br>  <span class="hljs-attribute">content</span>:<span class="hljs-string">&quot;&quot;</span>;<br>  <span class="hljs-attribute">clear</span>: both;<br>  <span class="hljs-attribute">display</span>: block;<br>  <span class="hljs-comment">/*浏览器兼容：有的浏览器可能显示没有内容的伪元素且可能会有高度,所以将其隐藏但必须占据位置*/</span><br>  <span class="hljs-attribute">visibility</span>: hidden;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">0</span>;<br>&#125; <br></code></pre></td></tr></table></figure><p>​                        </p><h2 id="14-CSS定位"><a href="#14-CSS定位" class="headerlink" title="14. CSS定位"></a>14. CSS定位</h2><h3 id="14-1-定位介绍"><a href="#14-1-定位介绍" class="headerlink" title="14.1 定位介绍"></a>14.1 定位介绍</h3><ul><li><p>normal flow标准流</p><ul><li>默认情况下，元素都是按照normal flow来排布的：从左到右，从上到下</li><li>默认情况下，元素之间不会存在层叠现象（除了设置margin负值）</li><li>margin、padding可以来调整元素位置，但是会对其后的元素照成影响</li><li>我们需要将元素放到祖先元素/视口的某个位置，又不影响normal flow中其他元素的布局，有了定位</li></ul></li><li><p>认识定位</p><ul><li><p>从标准流中取出元素，让它们具有不同的行为，如：固定在某个位置…</p></li><li><p>组成：定位=定位模式+边偏移   </p><ul><li><p>定位模式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*静态(默认)/相对/绝对/固定/黏性定位*/</span><br><span class="hljs-attribute">position</span>: static/relative/absolute/fixed/sticky<br></code></pre></td></tr></table></figure></li><li><p>边偏移</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">top</span>/<span class="hljs-attribute">bottom</span>/<span class="hljs-attribute">left</span>/<span class="hljs-attribute">right</span>: px  /*定位的盒子移动到最终位置*/<br></code></pre></td></tr></table></figure></li></ul></li></ul></li></ul><p><strong>注意：</strong>不同的定位参照点不一样</p><h3 id="14-2-各种定位用法"><a href="#14-2-各种定位用法" class="headerlink" title="14.2 各种定位用法"></a>14.2 各种定位用法</h3><p><strong>（1）relative相对定位（重要）</strong></p><ul><li><p>语法：position: relative;  </p></li><li><p>相对于它原来位置()</p></li><li><p>特点：边偏移是参照自己原来位置自恋型，不脱标（继续保留原来位置）</p></li><li><p>应用：</p><ul><li><p>用来微调某些元素</p></li><li><p>给绝对定位当爹（限制绝对定位）</p></li></ul></li></ul><p><strong>（2）absolute绝对定位（重要）</strong></p><ul><li><p>语法：position: absolute;  </p></li><li><p>特点</p><ul><li><p>绝对定位不再占有原位置（脱标）</p></li><li><p>以最近一级的有定位祖先元素为参考点移动位置((拼爹型) ，没有则以浏览器</p></li></ul></li><li><p>子绝父相</p><ul><li>父级需占有位置-相对的/子盒子不需占有位置-绝对的  </li><li>注意：不全是子绝父相，不要把结论记死了</li></ul></li></ul><p><strong>（3）Fixed固定定位（重要）</strong></p><ul><li><p>语法：position: fixed; </p></li><li><p>特点：</p><ul><li><p>元素固定于浏览器可视区的位置</p></li><li><p>以浏览器的可视窗口（视口）为参照点移动元素</p></li><li><p>不占有原先位置(脱标-可以看做特殊的绝对定位) </p></li></ul></li><li><p>画布(canvas)和视口(viewport)</p><ul><li>画布是整个网页，包含滚动的部分</li><li>视口是网页的可视区域，不包含滚动的部分</li><li>画布&gt;=视口</li></ul></li><li><p>使用场景：滚动时元素的位置不会改变。</p></li></ul><p><strong>（4）粘性定位</strong></p><ul><li>可以看做是相对定位和固定定位的结合体</li><li>它允许被定位元素表现得像相对定位一样，直到滚动到某个阈值点变成固定定位</li><li>相对于最近的滚动祖先元素的滚动视口的</li><li>粘性定位占有原先位置（相对定位特点）</li><li>例如：<ul><li>语法：position: sticky; top:10px      //—当元素距顶部10px变成固定定位</li></ul></li></ul><p>注意：必须添加top、bottom、left、right其中一个才生效</p><p>缺点：兼容性较差（一般用js实现粘性定位效果）</p><h3 id="14-3-设置absolute-fixed元素的特点"><a href="#14-3-设置absolute-fixed元素的特点" class="headerlink" title="14.3 设置absolute/fixed元素的特点"></a>14.3 设置absolute/fixed元素的特点</h3><ul><li><p>可随意设置宽高</p><ul><li>如果没有设置宽高，宽高默认由内容决定</li></ul></li><li><p>脱离标准流</p><ul><li>不再严格按照从上到下、从左到右排布</li><li>不再严格区分 block、inline、inline-block</li><li>脱标元素内部还是按照标准流排布</li></ul></li><li><p>不再向父元素汇报宽高</p></li><li><p><strong>对于绝对定位元素（重要）</strong></p><ul><li><p>定位参照对象宽度=left+right+margin-left+margin-right+定位元素实际所占宽度</p></li><li><p>定位参照对象高度=top+bottom+margin-top+margin-bottom+定位元素实际所占高度</p></li><li><p><strong>居中实现</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*应用一：居中显示</span><br><span class="hljs-comment">当我们设置left、right、top、bottom为0，给定宽高，设置margin是auto，实现居中</span><br><span class="hljs-comment">原理：根据以上公式-当我们设置偏移量为0，且给定宽高，那剩下的只有margin，将margin设置auto则居中</span><br><span class="hljs-comment">*/</span><br><span class="hljs-selector-class">.box</span>&#123;<br>      <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;<br>      <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#f00</span>;<br>      <span class="hljs-attribute">position</span>: relative;<br>    &#125;<br><span class="hljs-selector-class">.son</span>&#123;<br>      <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>      <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>      <span class="hljs-attribute">background-color</span>: pink;<br>      <span class="hljs-attribute">position</span>: absolute;<br>      <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;<br>      <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;<br>      <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;<br>      <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;<br>      <span class="hljs-attribute">margin</span>: auto;<br>&#125;<br><br><span class="hljs-comment">/*应用二：子盒子铺满父盒子显示</span><br><span class="hljs-comment">设置偏移量、margin为0，width/height默认是auto由浏览器绝定，所以会铺满整个屏幕</span><br><span class="hljs-comment">*/</span><br><span class="hljs-selector-class">.son</span>&#123;<br>      <span class="hljs-attribute">background-color</span>: pink;<br>      <span class="hljs-attribute">position</span>: absolute;<br>      <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;<br>      <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;<br>      <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;<br>      <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;<br>      <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h3 id="14-4-z-index"><a href="#14-4-z-index" class="headerlink" title="14.4 z-index"></a>14.4 z-index</h3><ul><li>设置定位叠放（层叠）顺序，仅对定位元素有效</li><li>z-index可以为：正数、负数、0（默认）</li><li>比较原则<ul><li>兄弟关系<ul><li>z-index越大，层叠在越上面</li><li>z-index相等，写在后面的元素层叠在上面</li></ul></li><li>不是兄弟关系<ul><li>各自从元素自己以及祖先元素中，找出最临近的2个定位元素进行比较</li><li>这2个定位元素必须有设置z-index的具体数值</li></ul></li></ul></li></ul><h3 id="14-5-定位的拓展"><a href="#14-5-定位的拓展" class="headerlink" title="14.5 定位的拓展"></a>14.5 定位的拓展</h3><ul><li><strong>绝对定位盒子居中算法：</strong></li></ul><p>产生原因：加了绝对定位的盒子不能通过margin: 0 auto水平居中</p><p>​                   相对定位可以（它没有脱离标准流）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css">//水平居中<br><span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>  //父级盒子宽度的一半<br>margin-left: -px  //负值，定位盒子宽度<span class="hljs-number">50%</span><br>//垂直居中<br>top：<span class="hljs-number">50%</span>;<br><span class="hljs-attribute">margin-top</span>: -px<br></code></pre></td></tr></table></figure><ul><li><p><strong>定位特殊性</strong></p><p>  绝对定位和固定定位和浮动类似</p><p>  行内元素添加绝对或者固定定位，可以直接设置高度和宽度</p><p>  块级元素添加绝对或者固定定位，宽度高度默认是内容大小</p></li><li><p><strong>脱标的盒子不会触发外边距塌陷</strong></p><p>  浮动元素、绝对定位（固定定位）元素都不会触发外边距合并问题</p></li><li><p><strong>绝对定位（固定定位）会压住盒子</strong></p><p>  浮动元素不同，只会压住它下面的标准流盒子</p><p>  但是不会压住下面标准流盒子里的文字（图片）</p><p>  但是绝对定位（固定定位）会压住下面标准流盒子的全部内容</p><p>  浮动压不住文字原因：</p><div class="code-wrapper"><pre><code class="hljs">  浮动最初目的是用来做文字环绕效果的，所以文字会围绕浮动元素。</code></pre></div></li></ul><h2 id="15-vertical-align"><a href="#15-vertical-align" class="headerlink" title="15. vertical-align"></a>15. vertical-align</h2><ul><li><p>行内级元素奇怪的对齐方式</p><ul><li>行内级元素，比如图片底部有空隙、图片和文字对不齐…</li></ul></li><li><p>行盒 line boxes的理解</p><ul><li>在没有设置高度的情况下，元素的高度由内容撑起来</li><li>内容中其实就是行高，所以是行高撑起了盒子</li><li>每一行都有一个行盒，会包裹这一行中的所有inline-level（包括line-height）</li></ul></li><li><p>官方文档：vertical-align会影响<strong>行内级元素</strong>在一个<strong>行盒</strong>中垂直方向的位置</p></li><li><p>作用：设置元素垂直对齐方式(只对行内元素有效)</p></li><li><p>vertical-align默认值是baseline对齐</p><ul><li>文本的baseline是字母x的下方</li><li>line-block默认的baseline是margin-bottom底部（没有margin就是盒子底部）</li><li>line-block有文本时，baseline是最后一行文本的x的下方</li></ul></li><li><p>vertical-align其他值</p></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*文字基线（默认） </span><br><span class="hljs-comment">top/bottom 将行内级盒子的顶部和line boxes的顶部对齐，bottom则是底部</span><br><span class="hljs-comment">middle 行内级盒子的中心点与父盒基线加上(往上)x-height一半的线对齐，也就是x的中间*/</span><br><span class="hljs-attribute">vertical-align</span>: baseline/top/bottom/middle<br></code></pre></td></tr></table></figure><ul><li>vertical-align: middle不能用作行内级元素垂直居中原因<ul><li>设置middle会将该行内级元素的中心点与父盒子基线往上半个x的位置对齐</li><li>而x的中心位置其实是在中线和基线之间的（我们平时书写也是这样），而不是中线</li><li>所以设置middle的行内级元素在垂直方向上会稍微偏下，不能垂直居中</li></ul></li><li>解决图片(inline-block level)下边缘空隙问题<ul><li>方法一：设置vertical-align为top/middle/bottom</li><li>方法二：设置为block元素</li></ul></li><li>基线对齐和继承行高容易造成的问题<ul><li>场景<ul><li>父div元素给定高度，里面放一段文本，再放一个inline-block的子盒子，盒子中放段文本</li><li>当我们给父div设置line-height=height想让文本垂直居中，没问题，但是这时候子盒子有问题了</li><li>子盒子出现自己的文字跑到盒子下方的情况</li></ul></li><li>原因<ul><li>子盒子继承了line-height，行高&gt;子盒子高度，所以文字会跑到盒子下方</li><li>因为默认是baseline对齐，所以跑出子盒子的文本会和父盒子中的文字对齐</li></ul></li></ul></li></ul><h1 id="CSS3新特性"><a href="#CSS3新特性" class="headerlink" title="CSS3新特性"></a>CSS3新特性</h1><p>新增选择器/盒子模型以及其他特征(IE9+支持) </p><h2 id="1-transform-2d"><a href="#1-transform-2d" class="headerlink" title="1. transform(2d)"></a>1. transform(2d)</h2><h3 id="1-1-transform介绍"><a href="#1-1-transform介绍" class="headerlink" title="1.1 transform介绍"></a>1.1 transform介绍</h3><ul><li>transform是形变的意思，该属性允许对元素进行一些形变如：旋转、缩放、平移、倾斜等</li><li>语法<ul><li>transform: transform-list(transform-function)</li><li>一些形变函数，如 rgba()就是形变函数<ul><li>平移：translate(x,y)</li><li>缩放：scale(x,y)</li><li>旋转：rotate(deg)s</li><li>倾斜：skew(deg,deg)</li></ul></li></ul></li><li>注意点<ul><li>除了<strong>行内非替换元素</strong>，所有元素都可进行transform</li><li>进行transform后不会影响其他的元素</li></ul></li></ul><h3 id="1-2-translate"><a href="#1-2-translate" class="headerlink" title="1.2 translate"></a>1.2 translate</h3><ul><li><p>translate是翻译的意思，物理上也可表示平移</p></li><li><p>作用：可以改变元素位置，类似定位，移动位置还有margin</p></li><li><p>语法</p><ul><li><p>合并写法：transform: translate(x,y);  </p><ul><li>一个参数是设置x上的位移，两个参数x、y上的位移</li><li>x，y值的类型：单位px或百分比（<strong>参照元素自身</strong>-x参照width-y参照height）</li></ul></li><li><p>分开写法：transform: translateX(n);    translateY(n);     </p></li></ul></li><li><p>应用-盒子水平垂直居中</p></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*加定位，这个地方可用绝对定位(父元素加相对定位)或相对定位*/</span><br><span class="hljs-attribute">position</span>: relative;  <br><span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>; <span class="hljs-attribute">top</span>: <span class="hljs-number">50%</span>; <br><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(-<span class="hljs-number">50%</span>,-<span class="hljs-number">50%</span>);<br></code></pre></td></tr></table></figure><h3 id="1-3-scale"><a href="#1-3-scale" class="headerlink" title="1.3 scale"></a>1.3 scale</h3><ul><li><p>作用：缩放元素</p></li><li><p>语法：</p><ul><li>transform: scale(x,y);      x,y修改的宽和高-倍数 </li><li>scalex()     scaley() </li></ul></li><li><p>注意</p><ul><li><p>参数不跟单位-倍数,小于1就是缩放(可小数)，大于1放大</p></li><li><p>若只有一个参数则宽高同时修改n倍（设置一个参数默认是给宽，高缩放默认是和宽相等）</p></li></ul></li><li><p>优点：不会影响其他盒子，且可以设置缩放中心点transform-origin</p></li></ul><h3 id="1-4-rotate"><a href="#1-4-rotate" class="headerlink" title="1.4 rotate"></a>1.4 rotate</h3><ul><li><p>作用：二维平面顺时针或逆时针旋转</p></li><li><p>语法：transform: rotate(deg) </p></li><li><p>注意：单位deg,角度正-顺时针转, 角度负-逆时针转       </p></li><li><p>补充（了解）</p><ul><li><p>rotate是rotateZ函数的简写写法</p></li><li><p>rotate的其他单位：度deg、百分度、弧度、圈数</p></li></ul></li></ul><h3 id="1-5-transform-origin和skew"><a href="#1-5-transform-origin和skew" class="headerlink" title="1.5 transform-origin和skew"></a>1.5 transform-origin和skew</h3><ul><li><p>作用: 形变中心点设置（旋转和缩放时都有中心点）</p></li><li><p>语法</p><ul><li><p>transform-origin: x y;   默认(50% 50%)</p></li><li><p>可以设置百分比/像素px/方位名词(top bottom left right center)</p></li></ul></li><li><p>skew倾斜（了解）</p><ul><li>作用：使元素进行倾斜（类似font-style: italic）</li><li>语法：skew(x,y)<ul><li>单位deg倾斜角度，一个值x轴倾斜</li><li>正数往正方向倾斜、负数往负方向</li></ul></li><li>倾斜的原点也受origin的影响</li></ul></li></ul><h3 id="1-6-transform综合写法"><a href="#1-6-transform综合写法" class="headerlink" title="1.6 transform综合写法"></a>1.6 transform综合写法</h3><div class="code-wrapper"><pre><code class="hljs">-transform: translate() rotate() scale();  空格隔开</code></pre></div><p>   -顺序会影响转换效果，当有位移和其他属性时，必须把<strong>位移放到最前</strong></p><h2 id="2-transition过渡动画"><a href="#2-transition过渡动画" class="headerlink" title="2. transition过渡动画"></a>2. transition过渡动画</h2><ul><li><p>transition-过渡</p></li><li><p>作用：从一个状态渐渐的过渡到另一个状态(常和hover一起搭配)</p></li><li><p>哪些属性可以支持过渡动画</p><ul><li>mdn中可执行动画的css属性查阅：<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_animated_properties">https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_animated_properties</a></li><li>mdn中在每个属性的 animation type</li></ul></li><li><p>语法  </p><ul><li><p>transition: property duration timing-function transition-delay</p><ul><li><p>transition: 要过渡的属性 花费时间 运动曲线 何时开始;</p></li><li><p>过渡属性: all/width/height/top/margin… </p></li><li><p>时间: s(可以省略默认为0，所以省略没效果)  </p></li><li><p>运动曲线: 默认ease(可省)    何时开始: s (可省)</p></li><li><p>多个属性可用逗号进行分割(all) 如: transition: width 2s,height 2s;</p></li><li><p>transition是复合写法，也可以指定如 transition-property</p></li></ul></li></ul></li><li><p>口诀：谁做过渡给谁加，初始状态必须写</p></li><li><p>注意：使用transition必须写初始状态否则不起作用，即使是left也要写left: 0;</p></li></ul><h2 id="3-animation动画"><a href="#3-animation动画" class="headerlink" title="3. animation动画"></a>3. animation动画</h2><h3 id="3-1-animation简介"><a href="#3-1-animation简介" class="headerlink" title="3.1 animation简介"></a>3.1 animation简介</h3><ul><li><p>transition过度动画的缺点</p><ul><li>只能定义开始和结束两个状态，不能控制中间状态</li><li>只能执行一次，除非手动多次触发</li><li>必须在特定条件下触发，如手指放上去</li></ul></li><li><p>相比于过渡，动画可以实现更多变化，控制，连续自动播放等效果</p></li><li><p>基本使用：定义动画=&gt;使用(调用)动画</p></li></ul><h3 id="3-2-动画的定义和使用"><a href="#3-2-动画的定义和使用" class="headerlink" title="3.2 动画的定义和使用"></a>3.2 动画的定义和使用</h3><ul><li><p>定义动画</p><ul><li>使用@keyframes定义动画序列（每一帧动画怎么执行）</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*</span><br><span class="hljs-comment">使用percentage百分比来指定动画发生的时间点</span><br><span class="hljs-comment">0%/100%叫动画序列，也可用from/to</span><br><span class="hljs-comment">可以改变任意多的样式和次数,如中间的10%...</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">@keyframes</span> 动画名称&#123;<br> <span class="hljs-number">0%</span>&#123; <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;&#125;<br> <span class="hljs-number">100%</span>&#123; <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;&#125;<br>&#125;  <br><span class="hljs-comment">/*有几个状态变化可分几个百分比，自动根据百分比分配时间*/</span><br><span class="hljs-keyword">@keyframes</span> move&#123;<span class="hljs-number">0%</span>&#123;...&#125;<span class="hljs-number">25%</span>&#123;...&#125;<span class="hljs-number">50%</span>&#123;...&#125;<span class="hljs-number">75%</span>&#123;...&#125;<span class="hljs-number">100%</span>&#123;...&#125;&#125;<br></code></pre></td></tr></table></figure></li><li><p>使用动画</p><ul><li><p>指定动画名称、持续时间、运动曲线、执行参数…</p></li><li><p>animation-name: 动画名称  animation-duration: 持续时间</p></li><li><p>这两个必须同时使用才生效，也可直接使用缩写属性</p></li></ul></li></ul><h3 id="3-3-动画常见属性"><a href="#3-3-动画常见属性" class="headerlink" title="3.3 动画常见属性"></a>3.3 动画常见属性</h3><ul><li><p>@keyframes   规定动画</p></li><li><p>animation   简写属性(除了animation-play-state)  </p></li><li><p>animation-name/animation-duration/animation-timing-function</p><ul><li>动画名称(必须)/持续时间(必须) s或ms/运动曲线，默认ease</li></ul></li><li><p>animation-delay/animation-iteration-count</p><ul><li>规定动画延迟执行时间(默认0s)  播放次数(默认1,infinite-无限次)</li></ul></li><li><p>animation-direction /animation-fill-mode/ animation-play-state</p><ul><li><p>是否逆向播放alternate逆播放，默认normal，reverse反转</p></li><li><p>动画结束状态  </p><ul><li>backwards(默认)-第一帧位置</li><li>none-没有执行动画位置  </li><li>forwards-最后一帧位置 </li></ul></li><li><p>动画运行或停止-默认running ,pause暂停（在JS中使用）</p></li></ul></li></ul><h3 id="3-4-动画属性简写"><a href="#3-4-动画属性简写" class="headerlink" title="3.4 动画属性简写"></a>3.4 动画属性简写</h3><ul><li><p>语法</p><ul><li><p>animation: 名称 持续时间 运动曲线 何时开始 播放次数 是否逆向 起始结束状态  </p></li><li><p>前面两个一定要写                                                            2020.9.27                                 </p></li></ul></li><li><p>速度曲线细节（了解）</p><ul><li>animation-timing-function: 规定动画运动曲线，默认ease</li><li>ease/linear  动画低速开始-然后加快-结束时变慢/匀速    </li><li>ease-in/ease-out/ease-in-out 低速开始/低速结束/低速开始和结束  </li></ul></li></ul><h2 id="4-3D"><a href="#4-3D" class="headerlink" title="4. 3D"></a>4. 3D</h2><div class="code-wrapper"><pre><code class="hljs">***\*三维坐标系\****：   x轴-右正左负/y轴-下正上负/z轴-往外正往里负       主要知识点：   3D位移：translate3d(x,y,z)  3D旋转：rotate3d(x,y,z)   3D呈现：transform-style  透视： perspective     **3D位移(移动)：**  transform: translateX(100px)/translateY()/ translateZ() 仅在x/y/z轴移动   综合：transform: translateX() translateY() translateZ();     transform: translate3d(x,y,z) 简写方式(x,y,z不能省略，没有用0表示)**透视 perspective**-透视写在被观察元素的父盒子上,单位是像素px     -透视也称为视距，是模拟眼睛到屏幕的距离，数值越小，看到的越大     -z轴是物体距屏幕的距离，z轴越大，看到的物体越大**3D旋转rotate3d** transform: rotateX(45deg)/ rotateY(45deg)/rotateZ(45deg)  </code></pre></div><p>x/y/z轴正方向旋转45</p><div class="code-wrapper"><pre><code class="hljs"> 综合: transform: rotate3d(x,y,z,45deg) 自定义轴旋转（了解） 左手定则-判断x，y，z正方向-大拇指值正方向，四指弯曲是正方向**3D呈现 transform-style(重要)** transform-style: preserve-3d 开启立体空间(默认flat不开启) -控制子元素是否开启三维立体环境(代码给父级,影响的是子盒子)  </code></pre></div><h2 id="5-其他特性（了解）"><a href="#5-其他特性（了解）" class="headerlink" title="5. 其他特性（了解）"></a>5. 其他特性（了解）</h2><p>  <strong>图片变模糊</strong></p><div class="code-wrapper"><pre><code class="hljs">滤镜filter -可以将图片模糊或颜色偏移-filter: 函数()  如：filter: blur(5px); //数值越大越模糊</code></pre></div><p>   <strong>计算盒子宽度width: calc函数</strong></p><div class="code-wrapper"><pre><code class="hljs">-calc()此CSS函数让你在声明CSS属性值时执行一些计算-width: calc(100% - 80px);  +-*/中间用空格隔开</code></pre></div><h1 id="CSS布局相关"><a href="#CSS布局相关" class="headerlink" title="CSS布局相关"></a>CSS布局相关</h1><h2 id="1-居中方案总结"><a href="#1-居中方案总结" class="headerlink" title="1. 居中方案总结"></a>1. 居中方案总结</h2><ul><li><strong>水平居中</strong><ul><li>行内级元素水平居中 <ul><li>父元素设置 text-align:center;</li></ul></li><li>块级元素水平居中 <ul><li>当前元素设置 margin: 0 auto;      注意：必须指定宽度</li></ul></li><li>绝对定位水平居中 <ul><li>left: 0; right: 0; margin: 0 auto;  给定宽度</li></ul></li><li>flex布局水平居中 <ul><li>justify-content: center;</li></ul></li><li>transform+定位水平居中 <ul><li>transform: translate(-50%,0); position: relative; left: 50%;</li></ul></li></ul></li><li><strong>垂直居中</strong><ul><li>单行字体垂直居中 <ul><li>height=line-height</li></ul></li><li>绝对定位垂直居中 <ul><li>top=0; bottom=0; margin: auto 0; 给定高度</li></ul></li><li>flex布局垂直居中 <ul><li>align-items: center;   </li><li>flex布局中所有元素都会被垂直居中</li></ul></li><li>translate+定位垂直居中 <ul><li>position: relative; transform: translate(0,-50%); top: 50%;</li></ul></li></ul></li></ul><h2 id="2-布局方案总结"><a href="#2-布局方案总结" class="headerlink" title="2. 布局方案总结"></a>2. 布局方案总结</h2><ul><li><p>标准流</p><ul><li>垂直布局</li></ul></li><li><p>浮动</p><ul><li>水平布局</li></ul></li><li><p>定位</p><ul><li>层叠布局</li></ul></li></ul><h2 id="3-flex布局-弹性布局"><a href="#3-flex布局-弹性布局" class="headerlink" title="3. flex布局(弹性布局)"></a>3. flex布局(弹性布局)</h2><h3 id="3-1-初识flex"><a href="#3-1-初识flex" class="headerlink" title="3.1 初识flex"></a>3.1 初识flex</h3><ul><li>认识flexbox<ul><li>Flexbox翻译成弹性盒子<ul><li>弹性盒子是一种用于<strong>按行或按列布局元素</strong>的<strong>一维布局方法</strong></li><li>元素可以<strong>膨胀以填充额外空间</strong>，<strong>收缩以适应更小的空间</strong></li></ul></li><li>flex布局是目前web开发中使用最多的布局方案<ul><li>flex布局、弹性布局、flexible布局</li><li>在移动端已经完全普及</li><li>在PC端也基本普及，只有非常少数网站还在使用浮动来布局</li></ul></li><li>为什么需要flex布局？<ul><li>长久以来，css中唯一可靠且跨浏览器兼容的布局方案只有float和position</li><li>但是他们都有很大的局限性，用他们布局也是无奈之举</li></ul></li><li>原来布局存在的痛点<ul><li>在父元素中垂直居中一个块级元素（做不到多个元素一起垂直居中）</li><li>使容器的所有子项等分可用宽度高度</li></ul></li></ul></li><li>flex布局的重要概念<ul><li>flex container(伸缩容器)：开启了flex布局的元素<ul><li>display属性设置成flex或inline-flex可以成为flex container</li><li>flex：flex container以block-level形式存在（flex：inline-level）</li></ul></li><li>flex item(伸缩项)：flex container中的直接子元素<ul><li>flex item<strong>不再严格区分</strong>块级元素和行内级元素（默认包裹内容，可设置宽高）</li><li>flex item布局受flex container属性的设置来控制布局</li></ul></li><li>主轴main axis和交叉轴cross axis<ul><li>主轴方向：默认水平方向 伸缩容器最左端-&gt;最右 （main start-mian end）</li><li>交叉轴方向：默认垂直方向 伸缩容器最顶部-&gt;最底部（cross start-cross end）</li></ul></li></ul></li></ul><h3 id="3-2-flex中常用属性"><a href="#3-2-flex中常用属性" class="headerlink" title="3.2 flex中常用属性"></a>3.2 flex中常用属性</h3><h4 id="3-2-1-flex-container属性"><a href="#3-2-1-flex-container属性" class="headerlink" title="3.2.1 flex-container属性"></a>3.2.1 flex-container属性</h4><ul><li><p>flex-direction</p><ul><li>作用：修改主轴方向（主轴和交叉轴始终垂直，主轴改变交叉轴也会改变）</li><li>flex-direction: row(默认值)/row-reverse/column/column-reverse</li><li>主轴左起点(默认)/右起点/顶部/底部</li></ul></li><li><p>flex-wrap</p><ul><li>作用：决定flex container是单行还是多行（是否换行）</li><li>flex-wrap: nowrap(默认)/wrap/wrap-reverse </li><li>注意： 默认情况伸缩容器不会换行,放不下会等比压缩伸缩项(flex-shrink默认为1)</li></ul></li></ul><ul><li><p>flex-flow</p><ul><li>缩写属性    flex-flow: flex-direction||flex-wrap</li><li>顺序任意，并且都可省略</li></ul></li><li><p>justify-content(主轴对齐方式)</p><ul><li>作用：决定了flex items在main axis上的对齐方式（如何分配主轴上的剩余空间）</li><li>justify-content: flex-start/flex-end/center/space-between/space-around/space-evenly</li><li>与主轴起点对齐(默认)/终点对齐/中间对齐/两端对齐/环绕对齐/均分对齐</li></ul></li><li><p>align-content（用得较少）</p><ul><li>作用：决定了<strong>多行</strong>flex items在cross axis上的对齐方式，用法和justify-content类似</li><li>align-content: stretch/flex-start/flex-end/center/space-between/space-around/space-evenly</li><li>拉升对齐(默认)/侧轴起点对齐/终点对齐/居中/两端对齐/环绕对齐/等分对齐</li><li>注意：换行对齐-只有设置了flex-warp这个属性并且flex container设置固定高度才有效</li></ul></li><li><p>align-items</p><ul><li><p>作用：决定了flex items在cross axis上的对齐方式（一般是单行）</p></li><li><p>align-items: flex-start/flex-end/center/baseline/stretch/normal</p></li><li><p>与主轴起点对齐(默认)/终点对齐/中间/基线对齐/拉伸对齐(拉伸为侧轴高度)/效果和stretch一样</p></li><li><p>注意: 设置拉伸对齐,伸缩项不能设置高度,否则会失效</p></li></ul></li></ul><h4 id="3-2-2-flex-item属性"><a href="#3-2-2-flex-item属性" class="headerlink" title="3.2.2 flex-item属性"></a>3.2.2 flex-item属性</h4><ul><li><p>align-self</p><ul><li>作用：覆盖flex container中设置的align-items，单独设置某个伸缩项对齐方式</li><li>align-self: flex-start/flex-end…  </li><li>取值和align-items一样,控制某个伸缩项</li></ul></li><li><p>order</p><ul><li><p>作用：伸缩项排序</p></li><li><p>可设置任意整数（正、负、0），默认为0</p></li><li><p>order: 0;  数字越小优先级越高</p></li></ul></li><li><p>flew-grow</p><ul><li><p>作用：决定伸缩项拉伸，用于使伸缩项宽度总和填满整个伸缩容器</p></li><li><p>flew-grow: 0;  //非负数字，默认为0-不需扩充,值越大所占份数越多</p></li><li><p>注意</p><ul><li>当flex container在main-axis上有剩余空间时flex-grow才有效</li><li>flex items扩展后的size不能超过其设置的max-height/max-width</li><li>没有指定/flex-grow:0;  不会被扩充</li></ul></li></ul></li><li><p>flex-shrink</p><ul><li><p>作用：决定伸缩项收缩</p></li><li><p>flex-shrink: 1;  //非负数字，默认是1，设置0-超出伸缩容器也不缩小</p></li><li><p>当伸缩项宽度和&gt;伸缩容器宽度,默认不换行,会等比缩放伸缩容器</p></li><li><p>注意</p><ul><li><p>当flex items在main-axis上超过container时flex-grow才有效  </p></li><li><p>items收缩后的size不能小于其设置的min-height/min-width</p></li><li><p>flex-shrink: 0;  当前伸缩项不会被缩小</p></li><li><p>扩充和缩小可以是高度或宽度,由主轴决定的,扩充缩小的是主轴上的</p></li></ul></li></ul></li><li><p>flex-basis</p><ul><li><p>作用：设置flex items在mian axis方向上的base size</p></li><li><p>flex-basis: px  //设置伸缩项的宽度,伸缩布局中才有用,默认auto</p></li><li><p>注意</p><ul><li>通过flex-basis设置了宽度,width就无效</li><li>决定最终base size因素优先级：max-wid/hei min-wid/hei &gt;flex-basis&gt;width/height&gt;内容本身size</li></ul></li></ul></li><li><p>flex</p><ul><li><p>作用：伸缩项属性连写  none |  [&lt;’flex-grow’&gt;&lt;’flex-shrink’&gt;?||&lt;’flex-basis’&gt;]</p></li><li><p>语法解释：</p><ul><li>一个值：grow或basis（有单位就是basis）     关键字：none、auto、initial</li><li>两个值：第一个为grow，第二个shrink或basis</li><li>三个值…</li></ul></li></ul></li></ul><h3 id="3-3-align-items和align-content比较"><a href="#3-3-align-items和align-content比较" class="headerlink" title="3.3 align-items和align-content比较"></a>3.3 align-items和align-content比较</h3><ul><li>相同点<ul><li>都是设置交叉轴上的的对齐方式</li><li>都可以实现ceter</li></ul></li><li>不同点<ul><li>基本单位不同<ul><li>align-items是以每个flex item为基本单位，在当前行设置items居中等</li><li>align-content是以每行row作为基本单位，类似于justify-content以每一列</li></ul></li><li>属性值不同<ul><li>align-items有baseline对齐，而没有align-content的space相关属性</li></ul></li><li>可能失效的情况不同<ul><li>align-items不会失效</li><li>align-content会失效<ul><li>当flex container没有设置高度时，该属性无效</li><li>当flex container一行时，该属性值无效<ul><li>如果设置了 flex-wrap: wrap，会被认为是多行，就算只有一行也会失效</li></ul></li></ul></li></ul></li></ul></li></ul><h3 id="3-4-flex布局中的常见问题解决"><a href="#3-4-flex布局中的常见问题解决" class="headerlink" title="3.4 flex布局中的常见问题解决"></a>3.4 flex布局中的常见问题解决</h3><ul><li><p>flex布局中justify-content最后一行布局问题</p><ul><li>问题：如果每一行4个item，最后一行&lt;4，就会出现最后一行不能和其他对齐(间隙不同)</li><li>解决方案：在flex container的最后添加<strong>n-2</strong>个span/i/div都可，并且设置其宽度为items的宽度</li><li>原理<ul><li>添加的元素没有高度和内容所以不会显示，但是有宽度会占据flex中位置</li><li>从而替代（补齐）最后一行的元素的空位，使最后一行的布局正确</li></ul></li></ul></li></ul><h2 id="4-响应式布局-媒体查询"><a href="#4-响应式布局-媒体查询" class="headerlink" title="4. 响应式布局(媒体查询)"></a>4. 响应式布局(媒体查询)</h2><p> 媒体查询：</p><p>响应式网页-不同的设备上呈现出不同样式</p><p>css3新增媒体查询-获取宽度后,根据不同浏览器的宽度设置不同的样式</p><p>注意点：不适合比较复杂的网页</p><p> 基本使用：</p><p>内联格式 </p><p>@media 条件{}   //如果条件满足就执行{}代码</p><p>  条件screen and (min-width/max-width: px){}  //screen代表电脑/手机/平板屏幕</p><p>外链格式(推荐)  </p><p>link标签新增media=”条件” //只有满足条件才会执行css文件 </p><p>  注意：给电脑平板和手机设置样式,顺序是电脑&gt;平板&gt;手机</p><p> 编写响应式网站步骤: 编写pc样式=&gt;编写平板样式,通过相同选择器覆盖不同样式</p><div class="code-wrapper"><pre><code class="hljs">       =&gt;编写手机样式,通过相同选择器覆盖不同样式</code></pre></div><h1 id="CSS补充知识"><a href="#CSS补充知识" class="headerlink" title="CSS补充知识"></a>CSS补充知识</h1><h2 id="1-link元素"><a href="#1-link元素" class="headerlink" title="1. link元素"></a>1. link元素</h2><ul><li><p>link是外部资源链接元素，放在head中用来引用外部资源</p></li><li><p>常用于</p><ul><li>链接样式表css</li><li>创建站点图标icon</li></ul></li><li><p>常见属性</p><ul><li><p>href：被链接资源的URL</p></li><li><p>rel：链接类型</p><ul><li><p>文档：<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Link_types">https://developer.mozilla.org/zh-CN/docs/Web/HTML/Link_types</a></p></li><li><p>常见链接类型有：icon、stylesheet</p></li><li><p>不常用的：dns-prefetch 提前解析DNS，性能优化</p></li></ul></li></ul></li></ul><h2 id="2-计算机的进制"><a href="#2-计算机的进制" class="headerlink" title="2. 计算机的进制"></a>2. 计算机的进制</h2><ul><li>定义<ul><li>进位制是一种计数方式</li><li>通俗讲：当数字达到某个值时，进一位（比如从1位变成2位）</li></ul></li><li>常用的进制<ul><li>最常用的十进制就是满10进一位（因为人类有十根手指，所以流行十进制）</li><li>其他的还有：二进制、八进制、十六进制</li></ul></li><li>计算机中的进制<ul><li>计算机中使用二进制0、1</li><li>各个进制的表示方法<ul><li>二进制(binary)：0b开头：0、1组成</li><li>八进制(Octonary)：0o开头：0~7组成</li><li>十六进制(hexadecimal)：0x开头：0<del>9、a</del>f组成（大小都可）</li></ul></li><li>进制转换略…</li></ul></li></ul><h2 id="3-CSS颜色表示"><a href="#3-CSS颜色表示" class="headerlink" title="3. CSS颜色表示"></a>3. CSS颜色表示</h2><ul><li><strong>颜色关键字</strong>表示(只提供了上百种基本颜色的关键字)</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">color</span>: red<br></code></pre></td></tr></table></figure><ul><li><strong>RGB颜色</strong><ul><li>一种通过 R-red、G-green、B-blue三原色不同占比 来组成不同颜色的色彩空间</li><li>三种方式<ul><li>函数式：rgb()、rgba()  </li><li>十六进制：#RRGGBB[AA]</li><li>十六进制省略写法：#RGB[A]</li></ul></li><li>注意：推荐如果用透明度使用rgba()函数的写法，十六进制的写法透明度部分浏览器可能不支持</li></ul></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">color</span>: rgb[a](R,G,B[,A]);  //十进制<span class="hljs-number">0</span>~<span class="hljs-number">255</span> 或 百分数<span class="hljs-number">0%</span>~<span class="hljs-number">100%</span><br><span class="hljs-attribute">color</span>: #RRGGBB[AA]  //十六进制大小写都可 <span class="hljs-number">00</span>~ff<br>color: #RGB[A]  //十六进制 <span class="hljs-number">0</span>~f（这种写法只有RGB都要两两相同才能省略写成这样）<br><br>//尽量使用rgb代替rrggbb，可以缩小css体积，加快网页响应速度<br>//#rrggbb<br>color: <span class="hljs-number">#ff0000</span><br>//#rgb<br>color：<span class="hljs-number">#f00</span><br><br>//十六进制表示，每两位(<span class="hljs-number">00</span>-ff)代表rgb的一个参数<br>//以下三种方法表示的是一个颜色<br>color: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">0</span>,<span class="hljs-number">255</span>,<span class="hljs-number">0</span>)<br>color：<span class="hljs-number">#00ff00</span>;  //转成<span class="hljs-number">16</span>进制写法<br><span class="hljs-attribute">color</span>: <span class="hljs-number">#0f0</span>;<br></code></pre></td></tr></table></figure><p>red/green/blue：0-255(十进制)    00-ff(十六进制)  </p><ul><li><strong>RGBA颜色</strong><ul><li>上面的三种方式皆可添加透明度，以下只示范函数式的</li></ul></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">color</span>: <span class="hljs-built_in">rgba</span>(red,green,blue,alpha)  /*最后一个参数是alpha透明度，取值范围在<span class="hljs-number">0</span>-<span class="hljs-number">1</span>之间  可省略<span class="hljs-number">0</span>.*/<br></code></pre></td></tr></table></figure><p>​                                                                                                                                                    </p><h2 id="4-Chrome调试工具"><a href="#4-Chrome调试工具" class="headerlink" title="4. Chrome调试工具"></a>4. Chrome调试工具</h2><ul><li>打开浏览器开发工具<ul><li>右键检查（这种方式在某个元素上右键检查会直接定位到某个Element的代码）</li><li>F12</li></ul></li><li>其他技巧<ul><li>ctrl + 或者 ctrl 鼠标滚轮 可以调整页面或调试工具字体大小(光标得在调试工具上)</li><li>可以通过删除某些元素来查看网络结构<ul><li>选中Elements中某个html代码，删除即可</li></ul></li><li>可以通过增删改css来调试网页样式<ul><li>在调试工具的右边Styles中增删改</li></ul></li></ul></li></ul><h2 id="5-浏览器渲染流程"><a href="#5-浏览器渲染流程" class="headerlink" title="5. 浏览器渲染流程"></a>5. 浏览器渲染流程</h2><ul><li>主线程：Load HTML =&gt; Parse HTML =&gt; 遇到head中的link元素链接的css =&gt; 线程一执行</li></ul><ul><li>线程一： =&gt; Load CSS =&gt; Parse CSS =&gt;如果DOM Tree完成则直接Attach否则等待</li></ul><ul><li><p>主线程：=&gt; 继续Parse HTML =&gt; <strong>Create DOM Tree</strong> =&gt;等待线程一的CSS解析完…</p></li><li><p>=&gt; Attach style to DOM nodes =&gt; <strong>Render Tree</strong> =&gt; Display</p></li></ul><h2 id="6-水平居中"><a href="#6-水平居中" class="headerlink" title="6. 水平居中"></a>6. 水平居中</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*</span><br><span class="hljs-comment">行内元素居中(包括行内替换和非替换元素)</span><br><span class="hljs-comment">需要加在父元素上</span><br><span class="hljs-comment">*/</span><br><span class="hljs-attribute">text-align</span>: center;  <br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">块级元素水平居中</span><br><span class="hljs-comment">谁需要居中加在谁上</span><br><span class="hljs-comment">居中原理：auto会平分剩余空间：margin-left/margin-right平分水平方向剩余空间，所以水平居中</span><br><span class="hljs-comment">注意：auto不适用于垂直居中</span><br><span class="hljs-comment">*/</span><br><span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto; <br></code></pre></td></tr></table></figure><h2 id="7-border图形"><a href="#7-border图形" class="headerlink" title="7. border图形"></a>7. border图形</h2><ul><li>用border绘制出各种图形，如：三角、梯形、矩形</li><li>三角实现原理<ul><li>让四个角的border撑起整个盒子，再设置我们需要的那个方向的盒子颜色即可</li></ul></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*方式一： 让border撑大盒子*/</span><br><span class="hljs-selector-tag">div</span>&#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">10px</span> solid transparent;<br><span class="hljs-attribute">border-left-color</span>: pink;<br>&#125;<br><span class="hljs-comment">/*方式二： 设置border-box*/</span><br><span class="hljs-selector-class">.box</span>&#123;<br>      <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>      <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>      <span class="hljs-attribute">box-sizing</span>: border-box;<br>      <span class="hljs-attribute">border</span>: <span class="hljs-number">50px</span> solid transparent;<br>      <span class="hljs-attribute">border-top-color</span>:pink;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>图形示例：<a href="https://css-tricks.com/the-shapes-of-css/#top-of-size">https://css-tricks.com/the-shapes-of-css/#top-of-size</a></li></ul><h2 id="8-Web网络字体"><a href="#8-Web网络字体" class="headerlink" title="8. Web网络字体"></a>8. Web网络字体</h2><ul><li><p>由来</p><ul><li>我们使用font-family来设置字体系列时，默认会查找操作系统中已下载的字体</li><li>但是user的操作系统中字体是有限的，不能做一些定制化的需求</li><li>所以我们可以使用网络字体 Web Fonts</li></ul></li><li><p>Web Fonts工作原理 </p><ul><li><p>开发者</p><ul><li><p>获取字体 =&gt; CSS中使用字体 </p></li><li><p>部署静态资源时，将 HTML、CSS、JS、Font一起部署在静态服务器中</p></li></ul></li><li><p>User角度</p><ul><li>浏览网页时，因为代码中有引入Font文件，文件就会被一起下载下来</li><li>浏览器会根据使用的字体，在下载的Font文件中查找、解析、使用字体，显示在页面上</li></ul></li></ul></li><li><p>使用流程</p><ul><li><p>下载字体文件：<a href="https://www.fonts.net.cn/fonts-zh-1.html">https://www.fonts.net.cn/fonts-zh-1.html</a></p><ul><li>默认下载解压后是ttf文件</li></ul></li><li><p>使用字体</p><ul><li>将字体放到对应文件夹Fonts</li><li>通过@font-face引入字体，设置字体名</li><li>通过字体名使用字体</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@font-face</span> &#123;<br>  <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&quot;web-font&quot;</span>;<br>  <span class="hljs-attribute">src</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&quot;Fonts/font1.ttf&quot;</span>);<br>  <span class="hljs-attribute">font-weight</span>:<span class="hljs-number">400</span>;<br>  <span class="hljs-attribute">font-style</span>: normal;<br>&#125;<br><span class="hljs-selector-tag">div</span>&#123;<br>  <span class="hljs-attribute">font</span>: <span class="hljs-number">20px</span> <span class="hljs-string">&quot;web-font&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>Web-fonts兼容性</p><ul><li><p>我们使用的是.ttf字体文件，有的浏览器可能会不兼容</p></li><li><p>使用网站生成其他格式的字体文件：<a href="https://font.qqe2.com/">https://font.qqe2.com/</a></p></li><li><p>兼容性写法</p><ul><li><p>引入解压后的各种字体文件</p></li><li><p>复制icon.css中兼容性写法，注意修改其中字体url路径</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*format用于帮助浏览器快速识别字体格式*/</span><br><span class="hljs-keyword">@font-face</span> &#123;<br>    <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&quot;HGGTZH_VF&quot;</span>;<br>    <span class="hljs-attribute">src</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&quot;HGGTZH_VF.eot&quot;</span>); <span class="hljs-comment">/* IE9 */</span><br>    <span class="hljs-attribute">src</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&quot;HGGTZH_VF.eot?#iefix&quot;</span>) <span class="hljs-built_in">format</span>(<span class="hljs-string">&quot;embedded-opentype&quot;</span>), /* IE6-IE8 */<br>    <span class="hljs-built_in">url</span>(<span class="hljs-string">&quot;HGGTZH_VF.woff&quot;</span>) <span class="hljs-built_in">format</span>(<span class="hljs-string">&quot;woff&quot;</span>), /* chrome、firefox */<br>    <span class="hljs-built_in">url</span>(<span class="hljs-string">&quot;HGGTZH_VF.ttf&quot;</span>) <span class="hljs-built_in">format</span>(<span class="hljs-string">&quot;truetype&quot;</span>), /* chrome、firefox、opera、Safari, Android, iOS <span class="hljs-number">4.2</span>+ */<br>    <span class="hljs-built_in">url</span>(<span class="hljs-string">&quot;HGGTZH_VF.svg#uxfonteditor&quot;</span>) <span class="hljs-built_in">format</span>(<span class="hljs-string">&quot;svg&quot;</span>); <span class="hljs-comment">/* iOS 4.1- */</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h2 id="9-Web字体图标"><a href="#9-Web字体图标" class="headerlink" title="9. Web字体图标"></a>9. Web字体图标</h2><ul><li><p>Iconfont由来</p><ul><li><p>字体可以设计成各种样式的，所以也可以把字体用来设计图标</p></li><li><p>精灵图缺点：文件大,一旦制作更换非常复杂,放大缩小会失真</p><p>字体图标解决了问题, 展示的是图标，本质属于字体</p></li></ul></li><li><p>好处</p><ul><li>放大不失真、用到多个图标时体积小、可以任意切换颜色</li></ul></li><li><p>使用场景</p><ul><li>显示网页中通用的、常用的一些小图标   </li><li>结构和样式比较简单的小图标，用字体图标</li></ul></li><li><p>使用</p><ul><li><p> 国外<a href="https://icomoon.io/">https://icomoon.io/</a>   阿里<a href="https://www.iconfont.cn/">https://www.iconfont.cn/</a></p></li><li><p>使用步骤（也可根据下载文件中的html步骤来做）</p><ul><li><p>将图标加入购物车 =&gt; 下载代码</p></li><li><p>方法一：使用Unicode字符实体</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@font-face</span> &#123;<br>      <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&quot;font1&quot;</span>;<br>      <span class="hljs-attribute">src</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&quot;Fonts/iconfont.ttf&quot;</span>);<br>    &#125;<br>    <span class="hljs-selector-class">.fonticon1</span>&#123;<br>      <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&quot;font1&quot;</span>;<br>    &#125;<br>&lt;<span class="hljs-selector-tag">i</span> class=&quot;fonticon1&quot;&gt;&amp;<span class="hljs-selector-id">#xe619</span>;&lt;/<span class="hljs-selector-tag">i</span>&gt;<br></code></pre></td></tr></table></figure></li><li><p>方法二：使用Font class（推荐）</p><ul><li><p>将所有iconfont.ttf/.css文件放到新建font文件夹下 </p></li><li><p>引入iconfont.css并且在标签添加class(iconfont和对应类名) </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;./Fonts/iconfont.css&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;iconfont icon-music&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul></li></ul></li></ul></li></ul><h2 id="10-CSS-Sprite"><a href="#10-CSS-Sprite" class="headerlink" title="10. CSS Sprite"></a>10. CSS Sprite</h2><ul><li><p>介绍</p><ul><li>别名：CSS精灵图、雪碧图</li><li>核心：将各种小图片整合到一张大图中，利用css背景position来显示不同的图，只请求一次服务器</li><li>好处：减少服务器接收和发送请求的次数-提高页面的加载速度，减小图片总大小</li></ul></li><li><p>使用</p><ul><li>设置元素宽高 =&gt; 设置精灵图作为元素的背景图片 =&gt; 设置背景图片位置来展示</li></ul></li><li><p>相关网站</p><ul><li>制作精灵图：<a href="https://www.toptal.com/developers/css/sprite-generator">https://www.toptal.com/developers/css/sprite-generator</a></li><li>获取精灵图位置：<a href="http://www.spritecow.com/">http://www.spritecow.com/</a></li></ul></li></ul><h2 id="11-CSS用户界面样式"><a href="#11-CSS用户界面样式" class="headerlink" title="11. CSS用户界面样式"></a>11. CSS用户界面样式</h2><p>更改一些用户操作，以便提高更好的用户体验</p><p>更改用户的鼠标样式/表单轮廓/防止表单域拖拽</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css">//鼠标在元素上的样式-<span class="hljs-attribute">auto</span>浏览器根据上下文决定指针显示样式 工具 箭头 小手 移动 文本 禁止 没有任何样式<br><span class="hljs-attribute">cursor</span>: auto/default/pointer/move/text/not-allowed/none<br><br>//表单轮廓outline-光标定到text中，会有蓝色轮廓线，通常情况去掉 <br>input&#123;outline: none/<span class="hljs-number">0</span>;&#125;<br><br>//防止拖拽文本域-默认文本域右下的三角可以拖动会影响布局<br><span class="hljs-attribute">resize</span>: textarea&#123;resize: none;&#125;<br></code></pre></td></tr></table></figure><p>注意：文本域尽量放到一行，不然中间有空格</p><h2 id="12-white-space-text-overflow"><a href="#12-white-space-text-overflow" class="headerlink" title="12. white-space/text-overflow"></a>12. white-space/text-overflow</h2><ul><li><p>white-space</p><ul><li>作用：设置空白处理和换行规则</li><li>常用值<ul><li>normal(默认)/nowrap/pre/pre-wrap/pre-line</li><li>normal-合并所有连续空白(显示一个空白)，允许单词超屏自动换行</li><li>nowrap-合并空白，不允许换行       </li><li>pre-阻止合并空白，不允许换行（其余了解，用到再去查）</li></ul></li></ul></li><li><p>text-overflow</p><ul><li>作用：设置文字溢出时的行为</li><li>常用值<ul><li>clip  默认值，裁剪溢出部分(单词可能显示不完整)</li><li>ellipsis  溢出那行结尾处用省略号显示</li></ul></li><li>注意：只有当overflow的值不为visible(默认)时，text-overflow才生效</li></ul></li><li><p><strong>应用：溢出的文字省略号显示</strong></p></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css">//单行文本溢出显示省略号<br><span class="hljs-attribute">white-space</span>: nowrap;  //先强制一行内显示文本(默认<span class="hljs-attribute">normal</span>自动换行)<br><span class="hljs-attribute">overflow</span>: hidden;   //超出的部分隐藏  <br><span class="hljs-attribute">text-overflow</span>: ellipsis; //文字用省略号替代超出的部分<br></code></pre></td></tr></table></figure><h2 id="13-CSS中的函数"><a href="#13-CSS中的函数" class="headerlink" title="13. CSS中的函数"></a>13. CSS中的函数</h2><ul><li><p>之前学过的css函数：rgb/translate/rotate/scale等</p></li><li><p>其他比较好用的css函数</p><ul><li>var、calc、blur、gradient</li></ul></li><li><p>var()</p><ul><li><p>作用：使用css定义的变量</p></li><li><p>语法</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*自定义属性：属性名必须&quot;--&quot;开头，属性值可以是任何有效的CSS值*/</span><br><span class="hljs-selector-tag">html</span>&#123;<br>  --kygo-<span class="hljs-attribute">color</span>: <span class="hljs-number">#f00</span>;<br>&#125;<br><span class="hljs-comment">/*通过var函数来使用*/</span><br><span class="hljs-selector-class">.box</span>&#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-built_in">var</span>(--kygo-color);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>注意：推荐在 html/:root中自定义属性（只有后代元素才能使用自定义属性）</p></li></ul></li><li><p>calc() - calculate缩写</p><ul><li><p>作用：允许在声明css属性值时执行一些计算，通常用于计算元素大小或位置</p></li><li><p>支持：加减乘除的运算，注意<strong>运算符两边必须留空格</strong></p></li><li><p>语法</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*父元素宽度少100px*/</span><br><span class="hljs-selector-class">.item1</span>&#123;<br>   <span class="hljs-attribute">width</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">100%</span> - <span class="hljs-number">100px</span>);<br>   <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#0f0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>blur()</p><ul><li><p>作用：将高斯模糊应用于图片或元素</p></li><li><p>语法：blur(radius)</p><ul><li><p>通常会和filter、backdrop-filter一起使用</p></li><li><p>区别：filter直接作用于图片或元素，backdrop-filter作用于元素后面的区域(一般搭配rgba使用)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*filter直接作用于box元素*/</span><br><span class="hljs-selector-class">.box</span>&#123;<br>   <span class="hljs-attribute">filter</span>: <span class="hljs-built_in">blur</span>(<span class="hljs-number">10px</span>);<br>&#125;<br><span class="hljs-comment">/*backdrop-filter作用于.cover，而cover覆盖在其他元素上*/</span><br><span class="hljs-selector-class">.cover</span>&#123;<br>   <span class="hljs-comment">/* background-color: rgba(0,0,0,.3); */</span><br>   backdrop-<span class="hljs-attribute">filter</span>: <span class="hljs-built_in">blur</span>(<span class="hljs-number">10px</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>gradient渐变函数</p><ul><li><p>由来：是一种image类型，可用于background-image/border-image/content…</p></li><li><p>作用：设置颜色的渐变</p></li><li><p>gradient常见的函数实现</p><ul><li><p>linear-gradient()</p><ul><li>线性渐变(默认从上到下) to关键字  默认从上到下渐变</li><li>创建一个表示两种或多种颜色线性渐变的图片</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*</span><br><span class="hljs-comment">可以斜着渐变-到右上角：to top right  也可度数: 45deg</span><br><span class="hljs-comment">注意：至少传递两个颜色,没有上限，默认系统自己计算纯色和渐变色范围</span><br><span class="hljs-comment">*/</span><br><span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">liner-gradient</span>(red,green)<br>background-image: <span class="hljs-built_in">liner-gradient</span>(to top,red,green)<br>background-image: <span class="hljs-built_in">liner-gradient</span>(to top right,green)<br>background-image: <span class="hljs-built_in">liner-gradient</span>(<span class="hljs-number">45deg</span>,red,green)<br><br>/*指定渐变范围*/<br>background-image: <span class="hljs-built_in">liner-gradient</span>(to right,red <span class="hljs-number">100px</span>,green <span class="hljs-number">10%</span>,orange)  <br></code></pre></td></tr></table></figure></li><li><p>radial-gradient()</p><ul><li>镜像渐变(默认中间往四周) at关键字</li><li>以原点出发创建一个两种或多种颜色逐步过度组成的图片</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 左上角到四周渐变 */</span><br><span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">radial-gradient</span>(at top left,red,green) <br>/*<br>了解：<br>某个点开始镜像渐变(at <span class="hljs-number">200px</span> <span class="hljs-number">100px</span>,red,green)<br>控制扩散范围(<span class="hljs-number">100px</span>,red,green) <br>同时指定扩散位置和范围 (<span class="hljs-number">100px</span> at <span class="hljs-number">200px</span> <span class="hljs-number">100px</span>,red,green)<br>*/<br></code></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h2 id="14-margin负值的应用"><a href="#14-margin负值的应用" class="headerlink" title="14. margin负值的应用"></a>14. margin负值的应用</h2><ul><li><p>问题一</p><ul><li>使用浮动横向排布盒子时，每个盒子设置margin-right，而每行最右边的盒子不需要margin-right</li><li>这时，本该在最右边的盒子就会跑到下一行显示，打乱了布局</li></ul></li><li><p>解决方法</p><ul><li>给所有item包一个div元素，给div设置margin-right: item盒子的margin-right值</li></ul></li><li><p>原理</p><ul><li>加的div默认宽度是最外层的盒子，给其设置margin-right负值，会使它的宽度增加</li><li>增加的div没有高度不影响显示，而我们正好需要增加的宽度来装每一行最后一个item的margin-right</li></ul></li><li><p>问题二</p><ul><li>浮动的相邻盒子中间边框会加粗</li><li>解决：margin: -1px</li></ul></li></ul><h2 id="15-浏览器前缀"><a href="#15-浏览器前缀" class="headerlink" title="15. 浏览器前缀"></a>15. 浏览器前缀</h2><ul><li>为什么需要浏览器前缀？<ul><li>CSS属性刚开始并没有成为标准(草稿-&gt;推荐版本)</li><li>浏览器为了防止属性在成为推荐版本前被改名或被废弃所以给其特殊的标记以区分</li></ul></li><li>定义：vendor specific extensions   供应商特定扩展</li><li>常见浏览器前缀<ul><li>-o-、-xv-：Opera等</li><li>-ms-、-mso-：IE等</li><li>-moz-：Firefox等</li><li>-webkit-：Safari、Chrome等</li></ul></li><li>注意：不需要我们手动添加，后面学习了模块化打包工具会自动添加浏览器前缀</li></ul><h2 id="16-BFC"><a href="#16-BFC" class="headerlink" title="16. BFC"></a>16. BFC</h2><ul><li><p>什么是FC</p><ul><li>Formatting Context 格式化上下文</li><li>元素在标准流中都是属于一个FC的</li><li>分类<ul><li>BFC - Block Formatting Context（块级元素都是在BFC中布局）</li><li>IFC - Inline Formatting Context（行内级元素都是在IFC中布局）</li></ul></li></ul></li><li><p>BFC</p><ul><li>MDN上总结出以下情况会创建BFC<ul><li>根元素（HTML）</li><li>浮动元素、绝对定位元素（绝对定位+固定定位）</li><li>行内块元素（dib）、表格单元格</li><li>overflow不为visible的块元素</li><li>弹性元素（display为flex或直接子元素）</li><li>网格元素（display为gird或直接子元素）…</li></ul></li><li>BFC的作用（特征）<ul><li>在BFC中，box会在垂直方向上一个挨着一个排布</li><li>垂直方向的间距由margin属性决定</li><li>在同一个BFC中，相邻两个box之间的margin会折叠</li><li>在BFC中，每个元素的左边缘是紧挨着包含块的左边缘的</li></ul></li><li>特征的应用：解决margin折叠问题、解决Float高度塌陷问题</li></ul></li><li><p>BFC的应用</p><ul><li><p>解决margin折叠问题</p><ul><li><p>在同一个BFC中才会有折叠问题，所以只要让两个box不在同一个BFC即可解决问题</p></li><li><p>代码示例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">    <span class="hljs-selector-class">.box1</span>&#123;</span><br><span class="css">      <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">      <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#f00</span>;</span><br><span class="css">      <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">10px</span>;</span><br><span class="css">    &#125;</span><br><span class="css">    <span class="hljs-selector-class">.box2</span>&#123;</span><br><span class="css">      <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">      <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#0f0</span>;</span><br><span class="css">      <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">20px</span>;</span><br><span class="css">    &#125;</span><br><span class="css">    <span class="hljs-selector-class">.contain</span>&#123;</span><br><span class="css">      <span class="hljs-attribute">overflow</span>: auto;</span><br><span class="css">    &#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;contain&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>解决浮动高度塌陷问题</p><ul><li>BFC解决高度塌陷需要两个条件<ul><li><strong>浮动元素的父元素触发BFC</strong></li><li>浮动元素父元素高度是auto的，没有指定高度</li></ul></li><li>BFC的高度是auto的情况下，是用以下方法计算高度的<ul><li>如果只有inline元素，是行高的顶部到底部的距离</li><li>如果有block-level，是从最顶层block的上边缘到最底层block的下边缘之间的距离</li><li>如果有绝对定位元素，将会被忽略</li><li><strong>如果有浮动元素，那么会增加高度以包括这些浮动元素的下边缘</strong></li></ul></li></ul></li></ul></li></ul><h1 id="CSS项目技巧"><a href="#CSS项目技巧" class="headerlink" title="CSS项目技巧"></a>CSS项目技巧</h1><h2 id="1-代码规范"><a href="#1-代码规范" class="headerlink" title="1. 代码规范"></a>1. 代码规范</h2><ul><li><p>基本的代码规范</p><ul><li>如建议缩进两个空格（Vue、React等都是两个空格缩进）</li></ul></li><li><p>参考凹凸实验室代码规范</p><ul><li><a href="https://guide.aotu.io./">https://guide.aotu.io./</a></li></ul></li></ul><h2 id="2-样式编写顺序"><a href="#2-样式编写顺序" class="headerlink" title="2. 样式编写顺序"></a>2. 样式编写顺序</h2><ul><li><p>解释：给一个元素指定多个css样式时，我们要按照一定的顺序排布</p></li><li><p>好处：方便查找、代码整洁高效、思路清晰</p></li><li><p>顺序</p><ul><li><p>定位和布局（确定元素本身如何布局）</p><ul><li>position(top…)、float、flexbox</li></ul></li><li><p>元素类型和可见性</p><ul><li>Display、visibility、opacity</li></ul></li><li><p>盒子模型</p><ul><li>width/height、margin、box-shadow、border、border-radius、padding</li></ul></li><li><p>字体、文本</p><ul><li>font、text、line-height、color</li></ul></li><li><p>背景设置</p></li><li><p>其他属性</p><ul><li>overflow、cursor、transform、transition、animation、white-space</li></ul></li></ul></li></ul><h2 id="3-组件化开发思想"><a href="#3-组件化开发思想" class="headerlink" title="3. 组件化开发思想"></a>3. 组件化开发思想</h2><ul><li>将一个页面分解成多个”组件”编写，编写好后再合并到一起，化繁为简</li></ul><h1 id="日常总结"><a href="#日常总结" class="headerlink" title="日常总结"></a>日常总结</h1><h2 id="1-锚点链接和书签链接"><a href="#1-锚点链接和书签链接" class="headerlink" title="1. 锚点链接和书签链接"></a>1. 锚点链接和书签链接</h2><p>  锚点链接：<a href="#名称1"></a>  <h3 id="名称1"></h3></p><p>  书签链接：<a href="#名称2"></a>  &lt;a name=名称2”&gt;</a></p><p>  跨页面跳转:<a href="xxx.html#名称1"></a> 用id/name都可</p><p> 总结：锚点链接可以链接到任何标签，书签链接只能从a到a</p><h2 id="2-背景"><a href="#2-背景" class="headerlink" title="2. 背景"></a>2. 背景</h2><p>  -新增background-size 背景图片大小(单独写在复合属性后面)</p><p>-值可以为具体值/auto cover contain           2020.9.29                          </p><h2 id="3-最大最小宽度"><a href="#3-最大最小宽度" class="headerlink" title="3. 最大最小宽度"></a>3. 最大最小宽度</h2><p>   min-width/max-width 可以给body设置  </p><div class="code-wrapper"><pre><code class="hljs">通过设置width: 100%+flex 达到移动端缩小宽度     </code></pre></div><h2 id="4-html-body标签"><a href="#4-html-body标签" class="headerlink" title="4. html/body标签"></a>4. html/body标签</h2><p>  html/body都遵循块元素特征(默认宽度浏览器宽度,高度0)</p><p>  当都不指定高度时,浏览器背景优先捕获html(html没有选择body)</p><p>  当指定了html/body高度,body背景色会覆盖html的</p><h2 id="5-对齐总结"><a href="#5-对齐总结" class="headerlink" title="5. 对齐总结"></a>5. 对齐总结</h2><p> text-align 行内元素居中-文本/图片/input(写在文本的父元素里面) </p><p> margin: 0 auto  块级元素居中(写在居中元素上/需要设置宽度才能居中)  </p><p> line==line-height  单行文本垂直居中</p><p>position: absolute; left:50% top:50%  transform: translate(-50%,-50%)/margin: -px </p><p>  //绝对定位元素垂直水平居中(父元素加相对定位) </p><p> margin-top/left: 50%  transform: translate(-50%,-50%); //和以上方法原理一样,不需定位</p><p> display: flex  justify-content: center  align-items:center  //弹性布局居中</p><p><strong>margin百分比</strong>  相对于父元素的</p><h2 id="6-实战总结"><a href="#6-实战总结" class="headerlink" title="6. 实战总结"></a>6. 实战总结</h2><p> 项目名称和子文件夹名称不用中文</p><p> 编写网页应该从外到内,从上到下的编写,先搭建好基本外形,再填东西</p><p> reset.css/normalize.css  初始化样式(reset去掉了所有默认样式,normalize部分样式)</p><p> base.css  用于存放自己一些使用频率多的样式(清除浮动,左浮,右浮)</p><p> index.css  全局样式(用于当前页面样式)</p><p>注意：别人的样式放前面,自己的放后面(方便自己覆盖别人的)    2021.4.28       </p><h2 id="7-实战问题"><a href="#7-实战问题" class="headerlink" title="7. 实战问题"></a>7. 实战问题</h2><p> 父元素使用绝对定位居中,子元素使用transform: scale() =&gt;子盒子位置下移        </p><p>   解决方法：使用margin-left: -px(不使用translate)</p><p> 图片应该作背景图片还是直接image标签/怎样让图片居中显示不失真</p><p>   除了很小的图标/超大背景图-使用背景图片</p><p>奇淫技巧：当父盒子中image宽度超出父盒子,想让图片居中显示</p><div class="code-wrapper"><pre><code class="hljs"> 图片设置margin: 0 -100%/父元素设置text-align: center (一般高度100%,宽度等比缩放) 也可给父元素设置相对定位,子元素绝对定位left50%,translatex</code></pre></div><p> 给元素设置hover并且设置transition过渡,但是不能设置鼠标离开过渡</p><p>   谁过渡给谁加-不加在hover中(否则只有鼠标放入有变化)</p><div class="code-wrapper"><pre><code class="hljs">                            2021.5.1</code></pre></div><p>object-fit: contain/cover  //用于img/video 保留原始比例的剪裁、缩放、拉伸等</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>1. HTML/CSS</category>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>邂逅前端开发</title>
    <link href="/2022/12/26/0.%20%E5%AD%A6%E4%B9%A0%E5%87%86%E5%A4%87/"/>
    <url>/2022/12/26/0.%20%E5%AD%A6%E4%B9%A0%E5%87%86%E5%A4%87/</url>
    
    <content type="html"><![CDATA[<h1 id="前端发展和思考"><a href="#前端发展和思考" class="headerlink" title="前端发展和思考"></a>前端发展和思考</h1><h2 id="1-前端行业发展怎么样？"><a href="#1-前端行业发展怎么样？" class="headerlink" title="1. 前端行业发展怎么样？"></a>1. 前端行业发展怎么样？</h2><ul><li>为什么聊这个？<ul><li>“时代的一粒灰，落在个人头上就是一座山”，比如：疫情</li><li>如果一个行业停滞不前，像一潭死水，那无论你再拼命学习也无济于事</li></ul></li><li>前端<ul><li>技术方面：技术更新迭代快，新技术层出不穷，新框架迭代快 Vue3 React18 Vite…</li><li>市场需求：人才需求大 薪资高</li></ul></li></ul><ul><li>总有人要赢的，为什么不是我呢？    -科比</li></ul><h2 id="2-前端知识体系"><a href="#2-前端知识体系" class="headerlink" title="2. 前端知识体系"></a>2. 前端知识体系</h2><p>前端知识体系的核心：html+css+js</p><img src="/img/前端知识体系.jpg" alt="知识体系图" style="zoom:50%;" /><h2 id="3-课程大纲"><a href="#3-课程大纲" class="headerlink" title="3. 课程大纲"></a>3. 课程大纲</h2><img src="/img/课程大纲.jpg" style="zoom:50%;" /><h2 id="4-学习方法-建议"><a href="#4-学习方法-建议" class="headerlink" title="4. 学习方法/建议"></a>4. 学习方法/建议</h2><ul><li>如何学习新的知识/技术<ul><li>Javascript高级程序设计的作者Nicholas，也是ESLint的作者说过：想要全面的掌握javascript，关键在于弄清楚它的历史、局限性和本质；</li><li>不仅仅局限于js，所有技术都是适用的</li></ul></li><li>技术的出现是为了解决问题的，不是为了让大家学习技术的</li><li>将知识进行分类：常用的知识（经常使用/熟能生巧/烂俗于心）不常用的（知道有它/知道哪里查）</li></ul><h2 id="5-前端学习网站"><a href="#5-前端学习网站" class="headerlink" title="5. 前端学习网站"></a>5. 前端学习网站</h2><p>MDN：<a href="https://developer.mozilla.org/zh-CN/">https://developer.mozilla.org/zh-CN/</a></p><p>W3C:   <a href="https://www.w3.org/">https://www.w3.org/</a></p><h2 id="6-优秀是一种习惯"><a href="#6-优秀是一种习惯" class="headerlink" title="6. 优秀是一种习惯"></a>6. 优秀是一种习惯</h2><p>We are what we repeatedly do.Excellence,then,is not an act, but a habit.  -Aristotle</p><p>我们每个人都是由自己一再重复的行为所锻造而成，因而优秀不是一种行为，而是一种习惯。</p><h1 id="一-邂逅前端开发"><a href="#一-邂逅前端开发" class="headerlink" title="一. 邂逅前端开发"></a>一. 邂逅前端开发</h1><ul><li>了解真相才能获得真正的自由</li><li>保持 “空杯心态”，才能持续不断的进步</li></ul><h2 id="1-1-软件开发"><a href="#1-1-软件开发" class="headerlink" title="1.1 软件开发"></a>1.1 软件开发</h2><ul><li>软件定义<ul><li>特定顺序组织的 计算机数据和指令</li></ul></li><li>软件software和应用程序Application区别<ul><li>应用程序是面向用户的，软件包括了：操作系统/虚拟机、算法、编程语言、应用程序</li></ul></li></ul><h2 id="1-2-完善的应用系统包含哪些"><a href="#1-2-完善的应用系统包含哪些" class="headerlink" title="1.2 完善的应用系统包含哪些"></a>1.2 完善的应用系统包含哪些</h2><ul><li>完善的应用系统<ul><li>服务器 （Java/NodeJS/C++/Python/Go）</li><li>手机端：Android端（Java/Kotlin）、iPhone端（OC/Swift）</li><li>Web开发：网页版（html/css/js）</li><li>PC端：Win版（C#）、Mac版（OC/Swift）</li></ul></li></ul><h2 id="1-3-前端开发的内容"><a href="#1-3-前端开发的内容" class="headerlink" title="1.3 前端开发的内容"></a>1.3 前端开发的内容</h2><ul><li><p>应用程序开发-软件开发-coder/programer/developer</p></li><li><p>Back-end/Front-end     后端/前端</p></li><li><p>前端开发工程师：</p><ul><li><p>主要负责：Web（网站/后台管理系统/手机H5）、小程序端</p></li><li><p>也可以做：移动端（Uniapp、React Native）、桌面端（Electron）-VS Code、服务器开发（Node.js）</p></li></ul></li><li><p>尤雨溪/TJ</p></li></ul><h2 id="1-4-学习方法-建议"><a href="#1-4-学习方法-建议" class="headerlink" title="1.4 学习方法/建议"></a>1.4 学习方法/建议</h2><ul><li>学习任何新东西，了解它的历史、局限性、本质；</li><li>将知识进行分类：<ul><li>常用的 - 经常使用，必须非常熟练（刻意练习、熟能生巧）</li><li>不常用的 - 知道有它，知道哪里查</li></ul></li></ul><h1 id="二-邂逅Web开发"><a href="#二-邂逅Web开发" class="headerlink" title="二. 邂逅Web开发"></a>二. 邂逅Web开发</h1><h2 id="2-1-电脑配置-推荐软件"><a href="#2-1-电脑配置-推荐软件" class="headerlink" title="2.1 电脑配置/推荐软件"></a>2.1 电脑配置/推荐软件</h2><ul><li>显示隐藏文件和文件拓展名</li><li>显示文件的时候，以列表形式显示，更清晰的看到文件类型</li></ul><ul><li>推荐软件<ul><li>Chrome</li><li>VS Code</li><li>XMind</li><li>Typora</li></ul></li></ul><h2 id="2-2-网站和网页关系"><a href="#2-2-网站和网页关系" class="headerlink" title="2.2 网站和网页关系"></a>2.2 网站和网页关系</h2><ul><li>一个网站由N个网页构成：N&gt;=1</li></ul><h2 id="2-3-网页的显示过程（重要）"><a href="#2-3-网页的显示过程（重要）" class="headerlink" title="2.3 网页的显示过程（重要）"></a>2.3 网页的显示过程（重要）</h2><ul><li><p>用户角度</p><ul><li>用户在浏览器输入URL，回车</li><li>DNS解析，DNS服务器找到服务器IP，找到服务器</li><li>服务器返回静态资源到浏览器</li><li>浏览器解析并渲染html/css/js，显示页面</li></ul></li><li><p>前端工程师的角度</p><ul><li>开发项目（html/css/js/vue/react）</li><li>打包、部署项目到服务器</li></ul></li><li><p>服务器是什么？</p><p>我们平时访问的静态资源，比如音乐资源就是存放在服务器中</p><ul><li>一台24小时运行的电脑（主机）</li><li>没有显示器</li><li>一般是Linux操作系统</li><li>目前大多数公司或者我们自己用的是云服务器</li></ul></li></ul><h2 id="2-4-第一个网页和网页组成部分"><a href="#2-4-第一个网页和网页组成部分" class="headerlink" title="2.4 第一个网页和网页组成部分"></a>2.4 第一个网页和网页组成部分</h2><ul><li><p>世界上第一个网页：上世纪90年代</p><ul><li><a href="http://info.cern.ch/hypertext/WWW/TheProject.html">http://info.cern.ch/hypertext/WWW/TheProject.html</a></li></ul></li><li><p>html/css/js</p><ul><li>html 网页的结构（骨架）</li><li>css 网页的样式（美化）</li><li>javascript 控制网页的交互（灵魂）</li></ul></li></ul><h2 id="2-5-浏览器和浏览器内核"><a href="#2-5-浏览器和浏览器内核" class="headerlink" title="2.5 浏览器和浏览器内核"></a>2.5 浏览器和浏览器内核</h2><ul><li><p>浏览器的作用</p><ul><li>将html/css/js渲染成我们看到的页面</li></ul></li><li><p>浏览器内核</p><ul><li>浏览器最核心的部分就是浏览器内核</li></ul></li><li><p>浏览器内核又叫渲染引擎</p><ul><li>不同的浏览器有不同的浏览器内核，因而同样的代码渲染效果也会略微不同</li></ul></li><li><p>常见的浏览器内核：</p><ul><li><p>Trident（三叉戟-IE/UC）、Gecko（壁虎-Firefox）、Presto（Opera）-&gt;Blink</p></li><li><p>Webkit：Safari、搜狗高速浏览器、移动端浏览器（Android、IOS）</p></li><li><p>Webkit -&gt; Blink：Google Chrome、Edge</p></li></ul></li></ul><h2 id="2-6-第一个网页"><a href="#2-6-第一个网页" class="headerlink" title="2.6 第一个网页"></a>2.6 第一个网页</h2><ul><li><p>记事本开发</p></li><li><p>网页基本结构</p><ul><li>html-&gt;head-&gt;body</li></ul></li></ul><h2 id="2-7-HTML语言"><a href="#2-7-HTML语言" class="headerlink" title="2.7 HTML语言"></a>2.7 HTML语言</h2><ul><li>超文本标记语言（HyperText Markup Language，简称HTML）</li><li>为什么叫超文本？<ul><li>因为有图片、视频、音频、超链接等，不仅仅是文本</li></ul></li><li>为什么是标记语言？<ul><li>有很多个标记-标签tag组成</li><li>对某些内容进行特殊的标记，以供浏览器进行识别处理</li><li>由标签和内容组成的叫元素</li></ul></li><li>扩展名：.html/.htm<ul><li>因历史原因，Win95、Win98系统最多显示的拓展名不超过三字符，所以当时用.htm</li><li>现在统一使用.html</li></ul></li></ul><h2 id="2-8-开发工具VS-Code配置"><a href="#2-8-开发工具VS-Code配置" class="headerlink" title="2.8 开发工具VS Code配置"></a>2.8 开发工具VS Code配置</h2><p>安装插件、配置</p><ul><li>插件安装（增加功能）<ul><li>中文插件：Chinese</li><li>颜色主题：atom one dark</li><li>文件夹图标：VSCode Great Icons</li><li>在浏览器中打开网页：open in browser、Live Sever</li><li>自动重命名标签：auto rename tag</li></ul></li><li>VSCode的配置<ul><li>Auto Save 自动保存</li><li>Font Size 修改代码字体大小</li><li>Word Wrap 代码自动换行</li><li>Render Whitespace 空格的渲染方式</li><li>Tab Size 代码缩进<ul><li>推荐2个空格</li></ul></li></ul></li></ul><h2 id="2-9-剖析元素结构"><a href="#2-9-剖析元素结构" class="headerlink" title="2.9 剖析元素结构"></a>2.9 剖析元素结构</h2><ul><li><p>HTML本质上是由一系列的元素（Element）构成的</p></li><li><p>HTML元素：<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element">https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element</a></p></li><li><p>元素的组成</p><ul><li><p>开始标签</p></li><li><p>结束标签（多一个/）</p></li><li><p>内容</p></li><li><p>属性</p><figure class="highlight html"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;p1&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;p2&quot;</span>&gt;</span>我是p<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>属性分类</p><ul><li>公共属性：class、id、title属性</li><li>特有属性：比如mate元素的charset属性、img元素的alt属性等</li></ul></li><li><p>单标签元素和双标签元素</p><ul><li>双标签：大多素元素都是双标签</li><li>单标签：br、img、hr、input、meta</li><li>单标签元素推荐不加斜杠/</li><li>注意：HTML元素不区分大小写，推荐小写</li></ul></li><li><p>元素的嵌套</p><ul><li>兄弟关系</li><li>父子关系</li></ul></li></ul><h2 id="2-10-HTML注释"><a href="#2-10-HTML注释" class="headerlink" title="2.10 HTML注释"></a>2.10 HTML注释</h2><ul><li><p>什么是注释？</p><ul><li>对代码的解释说明</li><li>注释写法： <!-- 我是注释 -->    VSCode快捷键：ctrl+/</li><li>注释是给开发者看的，浏览器不会把注释显示给用户</li></ul></li><li><p>为什么需要注释？</p><ul><li>方便以后进行查阅</li><li>协同开发，别人能看懂你的代码</li><li>临时注释掉代码，方便调试</li></ul></li></ul><h1 id="VS-code快捷键"><a href="#VS-code快捷键" class="headerlink" title="VS code快捷键"></a>VS code快捷键</h1><ul><li>多行缩进：Tab<ul><li>往后缩进 Tab</li><li>往前缩进 Shift+Tab</li></ul></li><li>光标切换到下一行：Command+回车Enter</li><li>向下/上复制：option(Alt)+shift+向上/向下</li><li>光标快速移动技巧：<ul><li>在我们通过！写出html结构后 可以通过tab键快速将光标移动到body中</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>0. 邂逅前端开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端开发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTML详解</title>
    <link href="/2022/03/24/1.%20html/"/>
    <url>/2022/03/24/1.%20html/</url>
    
    <content type="html"><![CDATA[<h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><h2 id="1-基本HTML5结构解析"><a href="#1-基本HTML5结构解析" class="headerlink" title="1. 基本HTML5结构解析"></a>1. 基本HTML5结构解析</h2><h4 id="1-1-完整的HTML结构"><a href="#1-1-完整的HTML结构" class="headerlink" title="1.1 完整的HTML结构"></a>1.1 完整的HTML结构</h4><ul><li>文档声明</li><li>html元素（head、body元素）</li></ul><figure class="highlight html"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>           <br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="1-2-文档声明和html元素"><a href="#1-2-文档声明和html元素" class="headerlink" title="1.2 文档声明和html元素"></a>1.2 文档声明和html元素</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*</span><br><span class="hljs-comment">文档类型声明：告诉浏览器当前是h5页面，要以html5的标准去解析</span><br><span class="hljs-comment">必须放在HTML文档最前面不能省略，否则会出现兼容性问题</span><br><span class="hljs-comment">*/</span><br>&lt;!DOCTYPE <span class="hljs-selector-tag">html</span>&gt;  <br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">根元素html，所有元素必须是它的后代，W3C建议为其增加一个lang（language）属性</span><br><span class="hljs-comment">lang作用是：指定网页的语言(en-英文 zh-cn-简体中文) </span><br><span class="hljs-comment">帮助翻译工具确定要使用的翻译规则</span><br><span class="hljs-comment">语音合成工具确定要使用的发音</span><br><span class="hljs-comment">*/</span><br>&lt;<span class="hljs-selector-tag">html</span> lang=&quot;en&quot;&gt; <br></code></pre></td></tr></table></figure><h4 id="1-3-head元素"><a href="#1-3-head元素" class="headerlink" title="1.3 head元素"></a>1.3 head元素</h4><ul><li><p>head中一般包含’’元数据’’-描述页面的配置信息， 如：网页标题、图标、字符编码</p></li><li><p>常见的设置（一般至少会包含以下2个设置）</p><ul><li><p>网页的标题：title元素</p></li><li><p>网页的编码：meta元素</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;meta charset=&quot;UTF-<span class="hljs-number">8</span>&quot;&gt;  &lt;!--所有网页必须都用UTF-<span class="hljs-number">8</span>,否则解码可能会出乱码问题--&gt;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>head中其他的元素：style、link、script、noscript</p><ul><li><p>link-css样式引入、网页图标</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;link rel=&quot;stylesheet&quot; href=&quot;style<span class="hljs-selector-class">.css</span>&quot;&gt;<br>&lt;link rel=&quot;shortcut <span class="hljs-attribute">icon</span>&quot; href=&quot;favicon<span class="hljs-selector-class">.ico</span>&quot; type=&quot;image/x-<span class="hljs-attribute">icon</span>&quot;&gt;//type可不加<br>&lt;!--href: hyper <span class="hljs-built_in">reference</span>(超链接) --&gt;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h4 id="1-4-body元素和html注释"><a href="#1-4-body元素和html注释" class="headerlink" title="1.4 body元素和html注释"></a>1.4 body元素和html注释</h4><ul><li><p>body：网页的具体内容和结构</p></li><li><p>注释：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--   --&gt;</span> <br></code></pre></td></tr></table></figure></li></ul><h2 id="2-常见的HTML元素"><a href="#2-常见的HTML元素" class="headerlink" title="2. 常见的HTML元素"></a>2. 常见的HTML元素</h2><ul><li>html元素很多，但是常用的就那么几个，掌握常用的<ul><li>不常用的查文档：<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element">https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element</a></li></ul></li></ul><h3 id="2-1-常用的元素"><a href="#2-1-常用的元素" class="headerlink" title="2.1 常用的元素"></a>2.1 常用的元素</h3><ul><li>p元素、h元素</li><li>img元素、a元素、iframe元素</li><li>div元素、span元素</li></ul><h3 id="2-2-元素显示原理"><a href="#2-2-元素显示原理" class="headerlink" title="2.2 元素显示原理"></a>2.2 元素显示原理</h3><ul><li><p>不同元素在浏览器显示不同的原因，只是浏览器加的样式不同</p></li><li><p>user agent stylesheet（用户代理样式表-浏览器默认设置的）</p><p><img src="/img/html%E5%85%83%E7%B4%A0%E6%98%BE%E7%A4%BA%E5%8E%9F%E7%90%86.png"></p></li></ul><h3 id="2-3-p元素和h元素"><a href="#2-3-p元素和h元素" class="headerlink" title="2.3 p元素和h元素"></a>2.3 p元素和h元素</h3><ul><li><strong>h元素</strong><ul><li><p>标题（Heading）元素，h1-h6：大=&gt;小</p></li><li><p>一般用于一些比较重要的文字作为标题</p></li><li><p>h元素和SEO优化有关</p></li></ul></li><li><strong>p元素</strong><ul><li>段落（paragraph）元素</li><li>p元素多个段落之间会有一定的间距</li></ul></li></ul><h3 id="2-4-img元素"><a href="#2-4-img元素" class="headerlink" title="2.4 img元素"></a>2.4 img元素</h3><ul><li>image（图片）标签</li><li>img是一个可替换元素<ul><li>可替换元素：元素的属性值会将元素在浏览器中显示的位置替换掉</li></ul></li><li>两个重要属性<ul><li>src：source（资源）表示文件路径</li><li>alt：替换文本-不是必须（图片加载不成功会显示/屏幕阅读器会将这些描述读出来给使用者）</li></ul></li><li>图片路径<ul><li><p>网络路径：一个URL地址</p></li><li><p>本地图片：本地电脑的图片，后续会和html一起部署服务</p><ul><li><p>相对路径：(图片相对于当前文件位置)  / ./ ../</p></li><li><p>绝对路径：完整路径-电脑/网络路径(不推荐)</p></li></ul></li></ul></li></ul><div class="code-wrapper"><pre><code class="hljs">- 图片格式（了解）  png、jpg、gif 、webp 静态支持透明/静态不支持透明/动态支持透明</code></pre></div><p>​      </p><h3 id="2-5-a元素"><a href="#2-5-a元素" class="headerlink" title="2.5 a元素"></a>2.5 a元素</h3><ul><li>anchor（锚）元素，用于打开新的URL</li><li>两个属性<ul><li>href：Hypertext Reference</li><li>target：指定在何处显示链接的资源</li></ul></li></ul>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- _self(当前,默认)  _blank新窗口 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_self/_blank&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>    <br></code></pre></td></tr></table></figure><ul><li><strong>链接分类、锚点链接</strong></li></ul>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--外部链接/内部链接-html跳转--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;index.html&quot;</span>&gt;</span>  <br><span class="hljs-comment">&lt;!--空链接/伪链接--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:void(0);&quot;</span>&gt;</span> <br><span class="hljs-comment">&lt;!--下载/email链接-地址链接的是文件（本地或网络） 发送email--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;html.txt&quot;</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;mailto:1712373370@qq.com&quot;</span>&gt;</span>发送email<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-comment">&lt;!--锚点链接：快速定位/跳转到文本中某个位置--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#cth&quot;</span>&gt;</span>锚点链接<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;cth&quot;</span>&gt;</span>标题1<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>  <br><span class="hljs-comment">&lt;!--图片链接：整个图片是一个链接--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;图片&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p>  <strong>注意：</strong>两种空链接方法 区别：跳到顶部/死链接</p><ul><li><strong>base元素</strong>（了解）</li></ul>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--base元素可以指定a链接的基本前缀-会在没有前缀时自动加上--&gt;</span>    <br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">base</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://baidu.com&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span>&gt;</span> <span class="hljs-comment">&lt;!--可以指定基地址和target--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/img/PCtm_d9c8750bed0b3c7d089fa7d55720d6cf.png&quot;</span>&gt;</span>百度Logo<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span> <span class="hljs-comment">&lt;!--自动拼接--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://www.baidu.com&quot;</span>&gt;</span>百度<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>   <span class="hljs-comment">&lt;!--当有协议头时就不会拼接--&gt;</span><br></code></pre></td></tr></table></figure><p>  ​      </p><h3 id="2-6-iframe元素"><a href="#2-6-iframe元素" class="headerlink" title="2.6 iframe元素"></a>2.6 iframe元素</h3><ul><li><p>可以在一个html文档中嵌入另一个HTML</p></li><li><p>属性：</p><ul><li>src：要嵌入的HTML页面url</li><li>frameborder：边框 1-显示 0-不显示</li></ul></li><li><p>iframe和a元素结合使用</p><ul><li>结合情况：当我们iframe嵌入的网页中有a元素时，且多层嵌套时 </li><li>target=_top 在顶层窗口打开链接</li><li>target=_parent 在父层窗口打开链接</li></ul></li><li><p>禁止其他网站使用iframe嵌入自己网站方法（淘宝可以嵌入到iframe，而京东小米等不能的原因）</p><ul><li>在Response Headers中设置：X-Frame-Options: SAMEORIGIN</li><li>原理：sameorigin是同源的意思，如果其他网站使用iframe嵌入就是异源，所以禁止其他网站嵌入</li><li>可以在浏览器Network中，查看第一个文件如：<a href="http://www.mi.com/">www.mi.com</a> 中的Response Headers中是否有X-Frame-Options</li></ul></li></ul><h3 id="2-7-div和span元素"><a href="#2-7-div和span元素" class="headerlink" title="2.7 div和span元素"></a>2.7 div和span元素</h3><ul><li><p>历史</p><ul><li><p>div元素：division，分开分配的意思</p></li><li><p>span元素：跨域、涵盖的意思</p></li><li><p>html基本元素=&gt;添加各种包含样式的html元素（strong、i、del）=&gt;css样式结构分离</p><p>=&gt;div/span+css 代替了所有html元素 =&gt; 元素语义化（目前）</p></li></ul></li><li><p> div/span都是纯粹的容器，可以理解成盒子    - 每个div独占一行，通常用于包裹其他元素，布局    - 多个span在一行显示，通常用来包裹（添加css）显示一些关键字</p></li></ul><h3 id="2-8-不常用元素"><a href="#2-8-不常用元素" class="headerlink" title="2.8 不常用元素"></a>2.8 不常用元素</h3><ul><li>strong元素：加粗强调</li><li>i元素：字体倾斜-现在用于字体图标</li><li>code元素：显示代码-等宽字体    font-family:monospace(一般用span然后加上这个样式)</li><li>br元素：换行，开发已经不用</li><li>其他<ul><li> script/noscript link style meta hr iframe     - hr：分割线（不常用，一般用div代替）    - pre：对文字按照原来的格式显示，比如空格、换行</li></ul></li></ul><h3 id="2-9-HTML全局属性"><a href="#2-9-HTML全局属性" class="headerlink" title="2.9 HTML全局属性"></a>2.9 HTML全局属性</h3><ul><li><p>Global Attributes：有的属性是所有元素都可以设置的叫全局属性</p></li><li><p>文档：<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Global_attributes">https://developer.mozilla.org/zh-CN/docs/Web/HTML/Global_attributes</a></p></li><li><p>常见四个全局属性：</p><ul><li>class、id、title、style</li></ul></li></ul><p>​             </p><h2 id="3-高级元素"><a href="#3-高级元素" class="headerlink" title="3. 高级元素"></a>3. 高级元素</h2><h3 id="3-1-列表元素"><a href="#3-1-列表元素" class="headerlink" title="3.1 列表元素"></a>3.1 列表元素</h3><p>分类：无序/有序/自定义列表</p><ul><li><strong>无序列表（重点）</strong></li></ul><p>ul(unordered list)     li(list item)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">没有顺序,每一项前面小黑点(list-style: none  去掉小黑点)</span><br><span class="hljs-comment">ul中只能放li标签,li里面可以任何标签</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>   <br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表项2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>   <br>    ...<br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><strong>有序列表（理解）</strong></li></ul><p>ol(ordered list)     li(list item)</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--有顺序，每一项前序号123,ol只能放li--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>   <br><span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><strong>自定义列表（重点）</strong>   </li></ul><p>上面一个小标题-下面多个列表解释说明（大哥和多个弟弟）</p><p>dl(definition list)   dt(definition term)   dd(definition description)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">dl</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>名词1<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>名词1解释1<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span>...  <span class="hljs-comment">&lt;!--dl只能有dt和dd--&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>名词2<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>名词2解释1<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span>...<span class="hljs-comment">&lt;!--可以有多组，一组都多个兄弟dd解释一个大哥dt--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dl</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>注意：</strong>ul和ol直接子元素只能是li</p><p>​            dl直接子元素只能是dt/dd</p><ul><li><strong>列表常用属性</strong><ul><li>其实列表和普通元素没什么不同，只是浏览器给它加了不同的样式，比如list-style-type</li></ul></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* </span><br><span class="hljs-comment">list-style-type  设置li前面标记的样式(基本不用)</span><br><span class="hljs-comment">list-style-image 设置某张图片为li前面的标志，会覆盖list-style-type</span><br><span class="hljs-comment">list-style-position设置li前面标记的位置，outsize/inside</span><br><span class="hljs-comment">list-style缩写属性</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-attribute">list-style</span>: none;  //去掉前面标记，一般只会这样用<br></code></pre></td></tr></table></figure><h3 id="3-2-表格元素"><a href="#3-2-表格元素" class="headerlink" title="3.2 表格元素"></a>3.2 表格元素</h3><ul><li><strong>作用和基本用法</strong></li></ul><p>作用：展示数据基本</p><p>语法：(以下为table完整结构)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--table-表格  tr-行(table row)  td-单元格内容(table data)--&gt;</span><br><span class="hljs-comment">&lt;!--th-表头(table head) caption-表格标题 这些可有可无，因为可以用css实现--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">caption</span>&gt;</span>标题<span class="hljs-tag">&lt;/<span class="hljs-name">caption</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>          <span class="hljs-comment">&lt;!--th-表头单元格标签(table head居中和加粗显示，一般位于第一行或第一列)--&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>表格表头1<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span>  <br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>表格表头2<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>    <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span>    <br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>单元格内文字1<span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>单元格内文字2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><p>表格属性：（了解）以下属性都加在table里面</p><p> align-表格位置（left-默认/center/right） border-边框(默认无, 1-有)  hidth/height</p><p> cellpadding-单元格与内容（默认1像素）cellspacing-单元格之间（默认2像素）</p><ul><li><strong>表格结构标签（将tr 包含起来）</strong></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span><span class="hljs-comment">&lt;!--标签-表格头部--&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><span class="hljs-comment">&lt;!--标签-表格主体--&gt;</span><br></code></pre></td></tr></table></figure><ul><li><strong>表格边框的合并-css控制</strong></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">table</span>&#123;<br><span class="hljs-attribute">border-collapse</span>: collapse;  <span class="hljs-comment">/*将边框合并，默认分开separate*/</span><br>  <span class="hljs-comment">/*border-spacing: 10px 20px  td之间的间距*/</span><br>&#125;<br><span class="hljs-selector-tag">th</span>,<span class="hljs-selector-tag">td</span> &#123;<br><span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#666</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">20px</span>; <span class="hljs-comment">/*也可设置宽高*/</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li><strong>合并单元格</strong><ul><li>确定跨行还是跨列</li><li>找到目标单元格写合并方式和数量<ul><li>跨行：rowspan=”合并个数”  跨列：colspan=”合并个数”</li><li> 跨行：最上侧单元格（写合并代码）跨列：最左侧单元格（写合并代码）</li></ul></li><li>删除多余单元格</li></ul></li></ul><h3 id="3-3-表单元素"><a href="#3-3-表单元素" class="headerlink" title="3.3 表单元素"></a>3.3 表单元素</h3><h4 id="3-1-1-介绍"><a href="#3-1-1-介绍" class="headerlink" title="3.1.1 介绍"></a>3.1.1 介绍</h4><ul><li>使用表单标签目的：收集用户信息（一般用于登录注册页面）</li><li>组成：由表单域、表单控件-元素、提示信息组成</li><li>常见表单元素<ul><li>form    表单域，一般情况下表单元素都是它的后代</li><li>input    单行文本输入框、单选框、复选框、按钮等元素</li><li>textarea    多行文本框</li><li>select/option    下拉选择框</li><li>button    按钮</li><li>label    表单元素的标题，可以和表单元素搭配使用，增加用户体验</li><li>以下了解<ul><li>fieldset    表单元素组</li><li>legend    fieldset的标题</li></ul></li></ul></li></ul><h4 id="3-1-2-表单域（了解）"><a href="#3-1-2-表单域（了解）" class="headerlink" title="3.1.2 表单域（了解）"></a>3.1.2 表单域（了解）</h4><ul><li>作用：将表单域范围内的表单元素信息送到服务器</li><li>对整个表单作reset或submit</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">action：用于接收的服务器url地址</span><br><span class="hljs-comment">method：表单数据提交方式-get/post</span><br><span class="hljs-comment">  target：在什么地方打开，和a一样</span><br><span class="hljs-comment">name：用于指定表单名称，以区分同一页面多个表单域</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">”url”</span> <span class="hljs-attr">method</span>=<span class="hljs-string">”get/post”</span> <span class="hljs-attr">name</span>=<span class="hljs-string">””</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注意：表单控件都要包含在表单域里面</p><h4 id="3-1-3-Input"><a href="#3-1-3-Input" class="headerlink" title="3.1.3 Input"></a>3.1.3 Input</h4><p>输入表单元素（单标签）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- type属性值：text/password/radio/checkbox/file/button/submit/reset --&gt;</span><br><span class="hljs-comment">&lt;!-- 文本框/密码框/单选按钮/复选框/上传文件/普通按钮/提交按钮/重置按钮  --&gt;</span><br><span class="hljs-comment">&lt;!-- type必须属性 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/password/radio/checkbox/file/button/submit/reset/date/time...&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>   <br></code></pre></td></tr></table></figure><p>注意：按钮通过value设置按钮提示文字</p><p>​            同一组radio/checkbox name属性必须一致(否则会导致radio可以多选)</p><h4 id="3-1-4-select下拉表单元素"><a href="#3-1-4-select下拉表单元素" class="headerlink" title="3.1.4 select下拉表单元素"></a>3.1.4 select下拉表单元素</h4><p>selected=”selected” 默认选中某个</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">  select常用属性：</span><br><span class="hljs-comment">multiple-可以多选</span><br><span class="hljs-comment">size-显示多少项(大于这个显示滚动条)</span><br><span class="hljs-comment">  option常用属性：</span><br><span class="hljs-comment">selected-默认选中</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;edu&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">selected</span>&gt;</span>小学<span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>初中<span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span><br>    ...<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span>  <br></code></pre></td></tr></table></figure><h4 id="3-1-5-textarea文本域元素"><a href="#3-1-5-textarea文本域元素" class="headerlink" title="3.1.5 textarea文本域元素"></a>3.1.5 textarea文本域元素</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">cols-列数   rows-行数</span><br><span class="hljs-comment">resize: both  禁止缩放的css样式</span><br><span class="hljs-comment">css中直接设置宽和长,不使用rows/cols</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">rows</span>=<span class="hljs-string">”3”</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">”20”</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span>  <br></code></pre></td></tr></table></figure><p><strong>fieldset和legend</strong>(不常用)</p><p>作用：将一组表单元素用框包含起来</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">fieldset</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">legend</span>&gt;</span>我是表单元素组标题<span class="hljs-tag">&lt;/<span class="hljs-name">legend</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">fieldset</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3-1-6-label标签（和表单元素搭配使用）"><a href="#3-1-6-label标签（和表单元素搭配使用）" class="headerlink" title="3.1.6 label标签（和表单元素搭配使用）"></a>3.1.6 label标签（和表单元素搭配使用）</h4><ul><li>作用：点击label标签内的文字,选择对应表单元素(增加用户体验)</li><li>尽量用label把表单元素包起来，这样看起来较明了</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--for的值必须和id值必须相等--&gt;</span><br>性别:<br><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;male&quot;</span>&gt;</span><br>    男<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;male&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">input</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;female&quot;</span>&gt;</span><br>    女<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;female&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">input</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br><span class="hljs-comment">&lt;!--input元素也可以实现--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;userid&quot;</span>&gt;</span>账号: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userid&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3-1-7-实现按钮的两种方式"><a href="#3-1-7-实现按钮的两种方式" class="headerlink" title="3.1.7 实现按钮的两种方式"></a>3.1.7 实现按钮的两种方式</h4><p>区别：button标签内容可以是图片和文本,而input需通过value设置</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--input--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button/submit/reset&quot;</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--button 需加上type-不同浏览器默认值不同--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>提交<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>   <span class="hljs-comment">&lt;!--type属性默认值submit--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button/submit/reset&quot;</span>&gt;</span>按钮/重置<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><p>去除input的outline(tab键选中效果)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">input</span>&#123;<span class="hljs-attribute">outline</span>: none;&#125;<br><br><span class="hljs-comment">/*input添加tabindex属性也可去除*/</span><br>tabindex=-<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h4 id="3-1-8-input常用属性"><a href="#3-1-8-input常用属性" class="headerlink" title="3.1.8 input常用属性"></a>3.1.8 input常用属性</h4><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">type</span><br>用于<span class="hljs-keyword">input</span>元素(<span class="hljs-type">text</span>/<span class="hljs-keyword">password</span>/radio/checkbox/file/button/submit/<span class="hljs-keyword">reset</span>)<br>maxlength<br>输入字符的最大长度(正整数) <br>readonly只读<br>disabled禁用<br>checked 默认选中(<span class="hljs-keyword">type</span>=radio/checkbox时可用，radio默认选中一个，checkbox可多个)<br>autofocus页面加载自动聚焦<span class="hljs-keyword">input</span><br><span class="hljs-type">name</span>/<span class="hljs-keyword">value</span><br>给服务器提交数据时，数据名称和值<br>如：https:www.baidu.com/?<span class="hljs-type">name</span>=cth&amp;age=<span class="hljs-number">22</span><br>form<br>设置所属的form元素(填写form元素的id)<br>使用了此属性，<span class="hljs-keyword">input</span>元素即使不写在form内，它的数据也能提交到服务器<br><br>布尔属性：<br>布尔属性可以没有属性值，写上属性名就代表使用这个属性<br>常见的布尔属性有：disabled、checked、selected、readonly、multiple、autofocus<br>如果要给布尔属性设置值，值就是属性名本身(建议直接写属性名)<br></code></pre></td></tr></table></figure><h4 id="3-1-9-form的常用属性"><a href="#3-1-9-form的常用属性" class="headerlink" title="3.1.9 form的常用属性"></a>3.1.9 form的常用属性</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">action-用于提交表单数据的请求URL</span><br><span class="hljs-comment">method-请求方法 get/post 默认是get</span><br><span class="hljs-comment">target-在什么地方打开URL(和a元素的target一样)</span><br><span class="hljs-comment">enctype-规定了在向服务器发送表单数据之前如何对数据进行编码</span><br><span class="hljs-comment">application/x-www-form-urlencoded 默认的编码方式</span><br><span class="hljs-comment">multipart/from-data 文件上传时必须为这个值，并且method必须是post</span><br><span class="hljs-comment">text/plain  普通文本传输</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>注意：</strong>文件上传时，enctype 必须为 multipart/from-data</p><h3 id="3-4-表单提交"><a href="#3-4-表单提交" class="headerlink" title="3.4 表单提交"></a>3.4 表单提交</h3><ul><li><strong>表单提交的两种方式</strong></li></ul><p>简介：用户在form中填写的信息提交给服务器</p><p><strong>传统的表单提交：</strong></p><p>​    将所有的表单元素放到一个form中</p><p>​    form设置action(服务器地址)</p><p>​    input/button类型是submit，点击提交自动将所有数据提交到服务器</p><p>​    弊端一：会进行页面的跳转(以为者服务器必须提前写好一个页面并返回给前端，前端直接展示这个界面)</p><p>​    服务器提前将页面写好-服务端渲染</p><p>​    弊端二：不方便进行表单数据的验证</p><p><strong>前后端分离</strong></p><p>​    通过JS获取到所有表单的内容</p><p>​    通过正则表达式进行表单的验证</p><p>​    发送ajax请求，将数据传递给服务器</p><p>​    验证成功后，服务器会返回结果，需要前端解析这个数据，并且决定显示声明内容</p><p>​        -前端渲染和前端路由</p><ul><li><strong>get和post</strong></li></ul><p>提交表单数据时，浏览器发送的是http请求，有2种请求方法可以选择</p><p><strong>get</strong></p><p>​    请求URL后以 “?” 的形式跟上发给服务器的参数，多个参数之间用&amp;隔开</p><p>​        如：<a href="http://www.baidu.com/login?username=111password=222&amp;sex=1">http://www.baidu.com/login?username=111password=222&amp;sex=1</a></p><p>​    由于浏览器和服务器对URL长度有限制，因此在URL后面附带的参数是有限制的，通常不能超过1KB</p><p><strong>post</strong></p><p>​    发送服务器的参数全部放在请求体中</p><p>​    理论上，post传递的数据量没有限制(具体还得看服务器的处理能力)</p><h1 id="HTML5"><a href="#HTML5" class="headerlink" title="HTML5"></a>HTML5</h1><h2 id="1-新增的语义化元素"><a href="#1-新增的语义化元素" class="headerlink" title="1. 新增的语义化元素"></a>1. 新增的语义化元素</h2><ul><li>弊端<ul><li>在HTML5之前，我们网站布局一般使用.header/.nav/.mian/.footer来布局</li><li>都是使用div元素，通过class/id来区分，对于浏览器来说元素不够语义化</li><li>对于搜索引擎来说，不利于SEO优化</li></ul></li><li>H5新增语义化元素<ul><li>header头部  nav 导航  article 内容</li><li>section 定义文档某个区域  aside侧边栏   footer尾部</li></ul></li></ul><p> <img src="/img/html_html5%E6%96%B0%E5%A2%9E.png" alt="img"></p><ul><li>注意<ul><li>语义化元素主要针对搜索引擎，对于开发者就是换了个名字的div</li><li>这些元素都是块级元素(浏览器默认添加了display: block)</li></ul></li></ul><h2 id="2-新增的多媒体元素"><a href="#2-新增的多媒体元素" class="headerlink" title="2. 新增的多媒体元素"></a>2. 新增的多媒体元素</h2><ul><li><p>由来和弊端</p><ul><li>由来：Web端一直希望可以更好的嵌入音频和视频，而HTML5之前是通过flash等插件实现的</li><li>弊端：而插件需要用户在浏览器下载，并且无法很好的支持html/css特性，兼容性等</li></ul></li><li><p>H5增加对媒体类型的支持</p><ul><li>音频：audio  </li><li>视频：video</li><li>使用方式：一方面可以直接通过audio/video使用、另一方面可以通过JS的API对其进行控制</li></ul></li><li><p>video</p><ul><li><p>支持格式：MP4、WebM、Ogg（尽量使用mp4）</p></li><li><p>语法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;<span class="hljs-selector-tag">video</span> <span class="hljs-attribute">src</span>=&quot;./assets/exp<span class="hljs-selector-class">.mp4</span>&quot; controls autoplay muted&gt;&lt;/<span class="hljs-selector-tag">video</span>&gt;<br></code></pre></td></tr></table></figure></li><li><p>常见属性</p><ul><li>src 路径     controls播放控件</li><li>autoplay-自动播放<ul><li>大部分浏览器不会失效-添加muted解决（一打开网页就播放视频用户体验不好，除非mute）      </li></ul></li><li>preload:auto/metadata/none-预先加载(有autoplay忽略) </li><li>不常用<ul><li>loop-循环播放   width/height-宽高     poster-等待的画面图片(视频播放前或暂停时)</li></ul></li></ul></li><li><p>video的兼容写法（了解）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*exp.mp4也可写在source中第一个，video中的src空着*/</span><br>&lt;<span class="hljs-selector-tag">video</span> <span class="hljs-attribute">src</span>=&quot;exp<span class="hljs-selector-class">.mp4</span>&quot;&gt;  <br>&lt;source <span class="hljs-attribute">src</span>=&quot;<span class="hljs-selector-class">.WebM</span>&quot;&gt;&lt;/source&gt;<br>&lt;source <span class="hljs-attribute">src</span>=&quot;.<span class="hljs-number">0</span>gg&quot;&gt;&lt;/source&gt;<br>&lt;<span class="hljs-selector-tag">p</span>&gt;你的浏览器不支持HTML5的<span class="hljs-selector-tag">video</span>元素，请更换浏览器查看！&lt;/<span class="hljs-selector-tag">p</span>&gt;<br>&lt;/<span class="hljs-selector-tag">video</span>&gt;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>audio</p><ul><li><p>支持格式：所有浏览器都支持MP3（部分Wav Ogg）</p></li><li><p>常用属性和video基本一致，这里省略</p></li><li><p>语法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;<span class="hljs-selector-tag">audio</span> <span class="hljs-attribute">src</span>=&quot;&quot; controls&gt;&lt;/<span class="hljs-selector-tag">audio</span>&gt;<br></code></pre></td></tr></table></figure></li><li><p>兼容性写法也一致</p></li></ul></li></ul><h2 id="3-表单相关"><a href="#3-表单相关" class="headerlink" title="3. 表单相关"></a>3. 表单相关</h2><ul><li><p>新增的type属性值</p><ul><li>type=”email/url/date/time/month/week/number/tel/search/color…”</li></ul></li><li><p>新增表单属性</p><ul><li><p>required - 不为空(required=”required”)</p></li><li><p>placeholder - 提示信息(placeholder=”文字内容”)</p></li><li><p>multiple - 多选文件/option (multiple=”multiple”)</p></li><li><p>autofocus - 自动聚焦(autofocus=”autofocus”)</p></li><li><p>autocomplete - 当用户输入时显示用户之前输入的记录</p><ul><li><p>有name属性并成功提交才生效</p></li><li><p>默认on打开/关闭用”off” </p></li></ul></li></ul></li><li><p>可通过input::placeholder{color:pink;}修改input文字颜色</p></li></ul><h2 id="4-新增全局属性data"><a href="#4-新增全局属性data" class="headerlink" title="4. 新增全局属性data"></a>4. 新增全局属性data</h2><ul><li><p>H5中，新增一种全局属性格式：data-*，用于自定义数据属性</p><ul><li><p>data设置的属性可以在JS中通过dataset轻松获取到</p></li><li><p>通常用于HTML和JS之间的数据传递</p></li><li><p>示例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span> <span class="hljs-attr">data-name</span>=<span class="hljs-string">&quot;kygo&quot;</span> <span class="hljs-attr">data-age</span>=<span class="hljs-string">&quot;18&quot;</span> <span class="hljs-attr">data-length</span>=<span class="hljs-string">&quot;1.88&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">const</span> boxE1=<span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;.box&quot;</span>)</span><br><span class="javascript">  <span class="hljs-built_in">console</span>.log(boxE1.dataset);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>应用：小程序中，就是通过data-来传递数据的</p></li></ul><h1 id="知识补充"><a href="#知识补充" class="headerlink" title="知识补充"></a>知识补充</h1><h2 id="3-1-字符实体"><a href="#3-1-字符实体" class="headerlink" title="3.1 字符实体"></a>3.1 字符实体</h2><ul><li>通常用于显示保留字符（会被解析成html代码，如&lt; &gt;）和不可见字符（空格）</li><li>格式：&amp;开头   ;号结尾</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">&amp;nbsp;    <span class="hljs-comment">//空格   text-index: 2em;  //段前缩进</span><br>&amp;lt; &amp;gt; <span class="hljs-comment">//&lt; &gt;符号 less than/great than</span><br></code></pre></td></tr></table></figure><h2 id="3-2-URL地址"><a href="#3-2-URL地址" class="headerlink" title="3.2 URL地址"></a>3.2 URL地址</h2><ul><li><p><strong>URL</strong></p><ul><li>URL-Uniform Resource Locator（统一资源定位符）</li><li>URL是资源的地址，网络上每个资源都有唯一的一个URL</li></ul></li><li><p>格式</p><ul><li><p>协议类型://服务器地址:端口号/文件路径/文件名?查询#片断ID</p></li><li><p>scheme://host:port/path?query#[fragment]</p></li><li><p>protocol://hostname[:port]/path/[;parameters][?query]#fragment</p></li><li><p>举例：<a href="https://www.baidu.com:80/image/test?name=kygo&amp;age=18#top">https://www.baidu.com:80/image/test?name=kygo&amp;age=18#top</a></p><p>注意：query中可以传递多个参数用&amp;连接、片断ID指的是a元素锚点链接</p></li></ul></li><li><p>URL和URI的区别</p><ul><li>URI：URL-Uniform Resource Identifier 统一资源标志符(标识Web技术使用的逻辑或物理资源)</li><li>URL：统一资源定位符（网络地址，相当于网络中的门牌号）</li><li>URI在某个规则下能把一个资源独一无二的识别出来，所以URL属于URI，但URI不一定都是URL</li></ul></li></ul><h2 id="3-3-元素语义化"><a href="#3-3-元素语义化" class="headerlink" title="3.3 元素语义化"></a>3.3 元素语义化</h2><ul><li><p>用正确的元素做正确的事：比如实现标题就用h元素而不是div等</p></li><li><p>好处：</p><ul><li><p>方便代码维护</p></li><li><p>减少开发者之间的沟通成本</p></li><li><p>有利于SEO</p></li><li><p>让语音合成工具正确识别网页元素的用途，以便做出正确的反应</p></li></ul></li></ul><h2 id="3-4-SEO优化"><a href="#3-4-SEO优化" class="headerlink" title="3.4 SEO优化"></a>3.4 SEO优化</h2><ul><li><p>SEO：搜索引擎优化(Search Engine Optimization)</p></li><li><p>是通过了解搜索引擎的运作规则来调整网站，以及提高网站在搜索引擎内排名的方式</p></li><li><p>h元素有助于网站的SEO优化，可以促进关键词排名</p><p>建议：在一个网页中最多只有一个h1元素（否则会被搜索引擎认为作弊）</p></li></ul><h2 id="3-5-字符编码"><a href="#3-5-字符编码" class="headerlink" title="3.5 字符编码"></a>3.5 字符编码</h2><ul><li>为什么需要字符编码<ul><li>计算机底层只能识别0、1组成的二进制数（底层硬件实现就是电路的开和闭）</li><li>所以为了能在计算机上表示、存储、处理像文字、图像、符号等，就需要转换成二进制</li><li>所以就出现了编码（encode）和解码（decode）</li></ul></li><li>字符的编码和解码<ul><li>编码encode：文本、符号、图像等通过一定的编码格式=&gt;二进制存储在计算机内</li><li>解码decode：计算机内部存储的二进制 =&gt; 我们看到的文本、图像、符号等</li></ul></li><li>编码类型<ul><li>编码/解码过程中需要选择用哪种编码/解码的方式来实现</li><li>常见的方式：ASCLL、GBK、UTF-8</li><li>其中最常用的就是UTF-8</li></ul></li><li>乱码出现的情况<ul><li>必须保证编码和解码用的是同一种方式 否则就会出现乱码</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>1. HTML/CSS</category>
      
      <category>HTML</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Javascript详解</title>
    <link href="/2022/03/24/3.%20js/"/>
    <url>/2022/03/24/3.%20js/</url>
    
    <content type="html"><![CDATA[<h1 id="JS基础"><a href="#JS基础" class="headerlink" title="JS基础"></a>JS基础</h1><h2 id="0-邂逅JavaScript（了解）"><a href="#0-邂逅JavaScript（了解）" class="headerlink" title="0. 邂逅JavaScript（了解）"></a>0. 邂逅JavaScript（了解）</h2><h3 id="0-0-认识编程语言"><a href="#0-0-认识编程语言" class="headerlink" title="0.0 认识编程语言"></a>0.0 认识编程语言</h3><ul><li><p>HTML-标记语言    CSS-样式语言</p></li><li><p>HTML、CSS、JS都属于<strong>计算机语言</strong>（我们人和计算机进行沟通交流的语言）</p></li><li><p>JS不仅属于计算机语言，精确来说是一门<strong>编程语言</strong></p></li><li><p><strong>编程语言特征</strong></p><ul><li>数据和数据结构(变量、数组、对象等)</li><li>指令及流程控制（if/for）</li><li>引用机制和重用机制</li><li>设计哲学</li></ul></li></ul><h3 id="0-1-编程语言发展历史"><a href="#0-1-编程语言发展历史" class="headerlink" title="0.1 编程语言发展历史"></a>0.1 编程语言发展历史</h3><ul><li>机器语言<ul><li>由0、1组成，也叫做机器码或二进制编码</li><li>一定长度的机器码组成了机器指令，用机器指令编写的程序就是机器语言</li><li>优点：直接被计算机识别，不需编译解析，直接对硬件产生作用，程序效率高</li><li>缺点：可读性差、容易出错、不易编写</li></ul></li><li>汇编语言<ul><li>用符号代替冗长的0、1代码（通过汇编器将汇编码转成0、1，从而被机器识别）</li><li>优点：和机器语言一样，可以直接访问、控制计算机的各种硬件设备，占用内存少执行速度快</li><li>缺点：代码缺乏可移植性（不同语言有不同汇编语言语法和编译器）、符号非常多难记</li><li>应用场景：操作系统内核、单片机程序、驱动程序</li></ul></li><li>高级语言<ul><li>高级语言就是更接近自然的语言，更符合人类的思维方式，一般使用英文编写</li><li>优点<ul><li>简单、易用、易于理解，语法结构类似于普通英文</li><li>远离对硬件的直接操作</li><li>具有可移植性，一个程序可以在不同机器上运行</li></ul></li><li>缺点<ul><li>不能直接被计算机识别，需要经编译器翻译成二进制指令后，才能运行到计算机上</li><li>种类繁多</li></ul></li></ul></li></ul><h3 id="0-2-js的历史"><a href="#0-2-js的历史" class="headerlink" title="0.2 js的历史"></a>0.2 js的历史</h3><ul><li><p>认识JavaScript</p><ul><li>JavaScript是一门高级的、解释型的编程语言</li><li>是一门基于原型的、头等函数的语言，是一门多范式的语言…</li><li>JavaScript是前端开发的灵魂</li></ul></li><li><p>1994年，网景公司（Netscape）发布了Navigator浏览器0.9版本</p><ul><li>这是历史上第一个比较成熟的网络浏览器</li><li>但是这个版本浏览器只能用来浏览，不能与用户互动，网景公司急需一种网页脚本语言</li></ul></li><li><p>网景公司当时想要选择一门语言来嵌入到浏览器中</p><ul><li>网景公司招募了程序员Brendan Eich，希望将Scheme语言作为网页脚本语言的可能</li><li>同时发生了一件大事：1995年Sun公司将Oka语言改名Java，正式向市场推出</li><li>网景公司动了心，希望和Sun公司结成联盟，将Java嵌入到网页中来运行</li><li>Brendan Eich本人非常热衷于Scheme，但管理层那时候有点倾向于Java</li></ul></li><li><p>Brendan Eich用10天时间设计出JavaScript</p><ul><li>最初这门语言得名字叫Mocha（摩卡），Navigator2.0 beta版本改名为LiveScript</li><li>Navigator2.0 beta 3版本正式命名为JavaScript（当时是为了给这门语言搭上Java这个热词）</li><li>这门语言更像是很多语言的大杂烩<ul><li>借鉴C语言的基本语法</li><li>借鉴Java语言的数据类型和内存管理</li><li>借鉴Scheme语言，将函数提升到”一等公民”（first class）的地位</li><li>借鉴Self语言，使用基于原型（prototype）的继承机制</li></ul></li></ul></li><li><p>微软公司于1995年首次推出Internet Explorer，从而引发了与Netscape的浏览器大战</p><ul><li>微软创建了JScript语言，这时对开发者来说是一种噩耗，因为要适配不同浏览器</li></ul></li><li><p>1996年11月，网景正式向ECMA（欧洲计算机制造商协会）提交语言标准</p><ul><li>1997年6月，ECMA以JavaScript语言为基础制定了ECMAScript标准规范ECMA-262</li><li>JavaScript成为ECMAScript最著名的实现之一（ActionScript和JScript也都是ECMAScript规范的实现语言）</li></ul></li><li><p>所以说，ECMAScript是一种规范，而JavaScript是这种规范的一种实现</p></li></ul><h3 id="0-3-js的组成"><a href="#0-3-js的组成" class="headerlink" title="0.3 js的组成"></a>0.3 js的组成</h3><ul><li>JavaScript是ECMAScript标准的<strong>语言层面</strong>实现</li><li>除了语言规范外，JS还需要对页面(DOM)和浏览器(BOM)进行各种操作</li><li>所以JS由三大部分组成：ECMAScript、DOM、BOM</li></ul><h3 id="0-4-js运行引擎"><a href="#0-4-js运行引擎" class="headerlink" title="0.4 js运行引擎"></a>0.4 js运行引擎</h3><ul><li>不同的浏览器由不同的内核组成，如：Webkit、Blink</li><li>通常我们说的浏览器内核是指：排版引擎，而JS是由JS引擎来执行的</li><li>JS引擎<ul><li>为什么需要JS引擎：将JS(高级语言)=&gt;CPU指令(机器码)来执行</li><li>常见的JS引擎<ul><li>SpiderMonkey：第一款JS引擎，由Brendan Eich开发（JS作者）</li><li>Chakra：微软开发，用于IE浏览器</li><li>JavaScriptCore：Webkit中的JS引擎，Apple公司开发</li><li>V8：Google开发的强大JS引擎，帮助Chrome浏览器脱颖而出</li></ul></li></ul></li><li>浏览器内核和JS引擎的关系<ul><li>以WebKit内核为例，由两部分组成<ul><li>WebCore：负责HTML解析、布局渲染等</li><li>JavaScriptCore：解析、执行JS代码</li></ul></li><li>在小程序中编写的JS也是由JSCore执行的</li></ul></li></ul><h3 id="0-5-js应用场景"><a href="#0-5-js应用场景" class="headerlink" title="0.5 js应用场景"></a>0.5 js应用场景</h3><ul><li>Web开发（原生JS、Vue、React、Angular开发）</li><li>移动端开发（ReactNative、Weex）</li><li>小程序开发（微信小程序、支付宝小程序、uniapp、taro）</li><li>桌面端开发（Electron，如VSCode）</li><li>后端开发（Node框架，koa、express…）</li></ul><h2 id="1-JavaScript基本知识"><a href="#1-JavaScript基本知识" class="headerlink" title="1. JavaScript基本知识"></a>1. JavaScript基本知识</h2><h3 id="1-1-JS编写方式"><a href="#1-1-JS编写方式" class="headerlink" title="1.1 JS编写方式"></a>1.1 JS编写方式</h3><ul><li>位置：行内/内部/外部引入  (外部src引入的script标签中不能写js代码，不然无效)</li></ul><figure class="highlight html"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 行内引入-HTML代码行内（不推荐） --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;alert(&#x27;行内引入js&#x27;)&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>点一下<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:alert(&#x27;行内引入js方式二&#x27;)&quot;</span>&gt;</span>点一下<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 内部引入-script标签中 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  alert(<span class="hljs-string">&quot;内部引入js&quot;</span>)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 外部引入-外部js文件，通过script元素的src属性引入文件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./out.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><p>注意点：js代码放到head，并需要通过js操作页面元素时就会失效(HTML从上至下执行)</p></li><li><p>解决</p><ul><li>加上window.onload=function(){ js代码 }  (内部外部都可以加)</li><li>将script或script-src放到body结束标签之前</li></ul></li></ul><h3 id="1-2-noscript元素"><a href="#1-2-noscript元素" class="headerlink" title="1.2 noscript元素"></a>1.2 noscript元素</h3><ul><li><p>浏览器不支持JavaScript或者用户关闭了浏览器的JavaScirpt功能时，可以使用noscript元素</p></li><li><p>noscript元素用于给不支持JavaScript的浏览器提供替代内容</p></li><li><p>注意：只有当浏览器不支持或关闭了javascript时，noscirpt元素才会起作用（显示出来）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">noscript</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>您的浏览器不支持或关闭运行JavaScript<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">noscript</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="1-3-JavaScript编写注意事项"><a href="#1-3-JavaScript编写注意事项" class="headerlink" title="1.3 JavaScript编写注意事项"></a>1.3 JavaScript编写注意事项</h3><ul><li>script元素不能写成单标签</li><li>自动省略type属性（以前的代码script中会使用type=”text/javascript”，现在不用写了）</li><li>加载顺序<ul><li>作为HTML文档的一部分，自上而下加载，<strong>推荐将js放在body子元素的最后一行</strong></li></ul></li><li>js代码严格区分大小写</li><li>script元素还有defer、async属性（后续学习）</li></ul><h3 id="1-4-JS和浏览器的交互方式"><a href="#1-4-JS和浏览器的交互方式" class="headerlink" title="1.4 JS和浏览器的交互方式"></a>1.4 JS和浏览器的交互方式</h3><ul><li><p>弹窗：alert()-确定按钮  confirm()-确定取消  prompt()-确定取消获取用户输入框    </p></li><li><p>网页内容区域：document.write()  </p></li><li><p>控制台：普通console.log(a,b…)  警告console.warn()  错误console.error()</p></li></ul><h3 id="1-5-Chrome调试工具"><a href="#1-5-Chrome调试工具" class="headerlink" title="1.5 Chrome调试工具"></a>1.5 Chrome调试工具</h3><ul><li><p>可以在开发者工具中的console查看log出的内容</p></li><li><p>如果代码中出现了错误或警告，会在console中显示</p></li><li><p>console中有个 &gt; 符号，表示控制台的命令行</p><ul><li>在命令行中可以直接编写js代码，按下enter键执行</li><li>如果想编写多行代码，按住shift+enter来换行</li></ul></li><li><p>还可以通过debug方式来调试、查看代码的执行流程</p></li></ul><h3 id="1-6-JS的语句和分号"><a href="#1-6-JS的语句和分号" class="headerlink" title="1.6 JS的语句和分号"></a>1.6 JS的语句和分号</h3><ul><li>语句是向浏览器发出的指令，通常表达一个操作或行为</li><li>通常每条语句后都会加上一个分号，表示语句的结束</li><li>当存在换行符时，大多数情况可以省略分号（JS将换行符理解成”隐式”的分号，也称为自动插入分号）</li></ul><h3 id="1-7-JS的注释"><a href="#1-7-JS的注释" class="headerlink" title="1.7 JS的注释"></a>1.7 JS的注释</h3><ul><li><p>三种注释：单行注释、多行注释、文档注释</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//我是js单行注释</span><br><br><span class="hljs-comment">/*我是js多行注释*/</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">文档注释：VSCode中在单独的JS文件中编写才有效，当我们调用函数时就会有提示，快捷键：&quot;/**&quot;，如下：</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 向某人打招呼</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;string&#125;</span> </span>name 姓名</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;number&#125;</span> </span>age 年龄</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sayHello</span>(<span class="hljs-params">name,age</span>)</span>&#123;<br>  <br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>注意：JS不支持注释嵌套</p></li></ul><h2 id="2-ECMAScript"><a href="#2-ECMAScript" class="headerlink" title="2. ECMAScript"></a>2. ECMAScript</h2><h3 id="2-1-变量和数据类型"><a href="#2-1-变量和数据类型" class="headerlink" title="2.1 变量和数据类型"></a>2.1 变量和数据类型</h3><h4 id="2-1-1-变量"><a href="#2-1-1-变量" class="headerlink" title="2.1.1 变量"></a>2.1.1 变量</h4><ul><li><p>作用：记录某一个之后会变化的数据</p></li><li><p>变量定义</p><ul><li><p>变量声明（var关键字） + 变量赋值（=）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//声明并且赋值，也可给多个变量声明和赋值</span><br><span class="hljs-keyword">var</span> age=<span class="hljs-number">18</span>;<br><span class="hljs-comment">//先声明再赋值（不推荐），没有初始化值为undefined</span><br><span class="hljs-keyword">var</span> a,b;  <br>a=b=<span class="hljs-number">213</span>;  <br></code></pre></td></tr></table></figure></li></ul></li><li><p>变量(标识符)的命名规范（标识符-凡是自己命名的都叫标识符）</p><ul><li>命名规则（必须遵守）<ul><li>第一个字符必须是一个字母、下划线、美元符号，其他字符可以是数字、字母、下划线、美元符号</li><li>不能使用关键字和保留字命名</li><li>变量严格区分大小写</li></ul></li><li>命名规范（建议遵守）<ul><li>多个单词时，驼峰命名：一般小驼峰</li><li>= 号两边加上空格</li><li>每条语句结束加上分号</li><li>变量见名知意</li></ul></li></ul></li><li><p>注意</p><ul><li>变量不声明直接使用会报错</li><li>变量有声明但没有赋值，值为undefined（不推荐，一般会给初始值如：0、””、null…）</li><li>不使用var声明直接赋值，也可以，但不推荐（对将变量加到window对象上）</li></ul></li><li><p>ES6</p></li></ul><p>常量：整形、实型、字符串、布尔、自定义常量(ES6: const关键字/不能改变)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-number">1</span> <span class="hljs-number">1.2</span> <span class="hljs-string">&quot;2&quot;</span> <span class="hljs-literal">true</span> <br><span class="hljs-keyword">const</span> name=<span class="hljs-string">&quot;cth&quot;</span>;<br></code></pre></td></tr></table></figure><p>预处理(解析)：将所有变量和函数的定义放到所有代码最前面，所以可以先使用再定义变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(a);  <span class="hljs-comment">//undefined</span><br><span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><p>ES6变量定义：let 变量名称;</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> a=<span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><p>注：let定义过的变量重新定义报错(方便查找)，而老版本的var不会</p><p>​        let定义的变量不会预解析，必须先定义再使用，否则会报错</p><p>补：字面量是具体的值，存储在常量或变量中</p><h4 id="2-1-2-数据类型"><a href="#2-1-2-数据类型" class="headerlink" title="2.1.2 数据类型"></a>2.1.2 数据类型</h4><ul><li><p>javascript是一门”动态类型”的编程语言</p><ul><li>javascript中的值都具有特定的数据类型</li><li>一个变量可以在上一刻是字符串，下一个是一个数字</li></ul></li><li><p>8种基本数据类型（7种原始类型/基本数据类型和1种复杂类型）</p><ul><li>number string boolean</li><li>undefined null object(引用类型)</li><li>BigInt Symbol（后续了解）</li></ul></li><li><p>typoef操作符的使用</p><ul><li><p>由来：因为ECMAScript的类型系统是松散的，所以需要一种手段来确定任意变量的数据类型</p></li><li><p>用法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/*</span><br><span class="hljs-comment">typeof x 因为是操作符所以中间用空格连接即可</span><br><span class="hljs-comment">typeof(x) 不是一个函数，括号只是代表后面是一个整体，如：(1+2)*3</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">var</span> age = <span class="hljs-number">19</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> age)<br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span>(age))<br></code></pre></td></tr></table></figure></li><li><p>返回以下任意值之一</p><ul><li>“number”、”string” 、”boolean”、 “undefined” - 未赋值</li><li>“object” - 对象或null</li><li>“function” - 函数     “symbol”- 符号</li></ul></li></ul></li><li><p><strong>Number类型</strong></p><ul><li><p>范围：JS所有数值 - 整数和浮点数</p></li><li><p>除了常规数字，还包括一些 “特殊数值”：Infinity、NaN（了解）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//NAN(not a number)非数值，表示一个错误操作得到的结果</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Number</span>(<span class="hljs-string">&quot;123cth&quot;</span>),<span class="hljs-number">3</span>*<span class="hljs-string">&quot;abc&quot;</span>);<br><span class="hljs-comment">//Infinity/-Infinity（无穷大和无穷小，全局对象的属性 window.Infinity）</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span> / <span class="hljs-number">0</span>);   <span class="hljs-comment">//Infinity  0/0=NaN</span><br><span class="hljs-built_in">console</span>.log(-<span class="hljs-number">1</span> / <span class="hljs-number">0</span>);  <span class="hljs-comment">//-Infinity</span><br></code></pre></td></tr></table></figure></li><li><p>数字的进制表示</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//十进制</span><br><span class="hljs-keyword">var</span> num1=<span class="hljs-number">111</span>;<br><span class="hljs-comment">//十六进制</span><br><span class="hljs-keyword">var</span> num2=<span class="hljs-number">0x111</span>;<br><span class="hljs-comment">//八进制</span><br><span class="hljs-keyword">var</span> num3=<span class="hljs-number">0o111</span>;<br><span class="hljs-comment">//二进制</span><br><span class="hljs-keyword">var</span> num4=<span class="hljs-number">0b111</span>;<br><span class="hljs-built_in">console</span>.log(num1,num2,num3,num4);<br></code></pre></td></tr></table></figure></li><li><p>数字表示范围</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Number</span>.MAX_VALUE); <span class="hljs-comment">//最大正数值</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Number</span>.MIN_VALUE); <span class="hljs-comment">//最小正数值，小于这个数会转化为0</span><br></code></pre></td></tr></table></figure></li><li><p>isNaN: 判断是否不是一个数字（NAN），不是数字返回true</p></li><li><p>注意：不要使用js进行精度要求较高的计算</p></li></ul></li><li><p><strong>String类型</strong></p><ul><li><p>用途：表示一段文本</p></li><li><p>三种使用方法：单引号””、双引号’’、反引号`（ES6语法）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> name=<span class="hljs-string">&quot;kygo&quot;</span><br><span class="hljs-keyword">var</span> name=<span class="hljs-string">&#x27;kygo~&#x27;</span><br><span class="hljs-keyword">var</span> name=<span class="hljs-string">`kygo~~`</span><br><span class="hljs-comment">//反引号,$&#123;变量/表达式&#125;</span><br><span class="hljs-keyword">var</span> msg=<span class="hljs-string">`my name is <span class="hljs-subst">$&#123;name&#125;</span>,age is <span class="hljs-subst">$&#123;<span class="hljs-number">17</span>+<span class="hljs-number">1</span>&#125;</span>`</span><br></code></pre></td></tr></table></figure></li><li><p>如果字符串本身使用双引号，那么字符串中可以使用单引号，反之也可</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> desc=<span class="hljs-string">&quot;kygo is &#x27;shuaige&#x27;&quot;</span><br><span class="hljs-keyword">var</span> desc1=<span class="hljs-string">&#x27;kygo is &quot;shuaige&quot;&#x27;</span><br></code></pre></td></tr></table></figure></li><li><p>转义字符（了解）</p><ul><li><p>一些有特殊功能的字符可以通过转移字符的形式放入字符串中</p></li><li><p>都是斜杠\开头</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">\\ 斜杠<br>\n \t 换行符、制表符<br>\<span class="hljs-string">&#x27; \&quot;  单引号、双引号</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>字符串的属性和方法</p><ul><li><p>字符串拼接：通过 + 连接</p></li><li><p>获取字符串长度</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> msg1 = <span class="hljs-string">&quot;my name is&quot;</span><br><span class="hljs-keyword">var</span> msg2 = <span class="hljs-string">&quot;kygo&quot;</span><br><span class="hljs-keyword">var</span> msg3 = msg1 + msg2<br><span class="hljs-keyword">var</span> msg4 = <span class="hljs-string">`my name is <span class="hljs-subst">$&#123;msg2&#125;</span>`</span> <span class="hljs-comment">//推荐</span><br><span class="hljs-built_in">console</span>.log(msg3,msg3.length);<br></code></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>Boolean类型</p><ul><li>作用：用于表示真假</li><li>值：真、假 - true/false</li></ul></li></ul><ul><li><p>Undefined类型</p><ul><li><p>只有一个值，就是undefined</p><ul><li>如果只声明变量没有赋值，默认值就是undefined</li></ul></li><li><p>注意</p><ul><li>最好在变量定义时进行初始化，而不是只是声明变量</li><li>不要把变量显示的赋值为undefined（可以初始化为0、””、null等）</li></ul></li></ul></li><li><p>Object类型和Null类型</p><ul><li><p>通常被称为引用类型或复杂类型</p></li><li><p>作用：表示一组数据，是其他数据的一个集合</p></li><li><p>表示方法：用花括号{}的方式来表示一个对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> obj=&#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;kygo&quot;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>  <span class="hljs-attr">height</span>: <span class="hljs-number">1.88</span><br>&#125;<br><span class="hljs-built_in">console</span>.log(obj.name);<br></code></pre></td></tr></table></figure></li><li><p>Null类型</p><ul><li>值：只有一个值null</li><li>作用：通常用来表示一个对象为空，用来给一个对象进行初始化时，会赋值为null</li><li>也属于object类型：使用typeof操作符返回object</li></ul></li><li><p>null和undefined的关系</p><ul><li><p>undefined通常只有在一个变量声明但未初始化时，默认值是undefined才会用到</p></li><li><p>不推荐直接给变量赋值为undefined，所以很少主动来使用</p></li><li><p>null值非常常用，当我们变量准备保存一个对象，而对象不确定时，可以先赋值null</p></li></ul></li></ul></li></ul><h4 id="2-1-3-数据类型的转换"><a href="#2-1-3-数据类型的转换" class="headerlink" title="2.1.3 数据类型的转换"></a>2.1.3 数据类型的转换</h4><ul><li>String类型的转换<ul><li>隐式类型转换：一个字符串和其他类型进行+操作</li><li>显示转换：String()函数、toString()方法</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//三种方法：toString()  String()  +&quot;&quot;</span><br><span class="hljs-keyword">var</span> num = <span class="hljs-number">2</span>;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">String</span>(num) + <span class="hljs-string">&quot; 类型：&quot;</span> + <span class="hljs-keyword">typeof</span> <span class="hljs-built_in">String</span>(num));<br><span class="hljs-built_in">console</span>.log(num.toString() + <span class="hljs-string">&quot; 类型：&quot;</span> + <span class="hljs-keyword">typeof</span> num.toString());<br><span class="hljs-built_in">console</span>.log(num + <span class="hljs-string">&quot;&quot;</span> + <span class="hljs-string">&quot; 类型：&quot;</span> + <span class="hljs-keyword">typeof</span>(num + <span class="hljs-string">&quot;&quot;</span>));<br><span class="hljs-comment">/*Result</span><br><span class="hljs-comment">2 类型：string</span><br><span class="hljs-comment">2 类型：string</span><br><span class="hljs-comment">2 类型：string */</span><br><br><span class="hljs-comment">//toString()转换undefined与null类型会报错,toString()可以转换数字进制，在()指定</span><br><span class="hljs-keyword">var</span> num = <span class="hljs-number">7</span><br><span class="hljs-built_in">console</span>.log(num.toString(<span class="hljs-number">2</span>));<span class="hljs-comment">//进制转换 111</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-literal">undefined</span>.toString()); <span class="hljs-comment">//报错</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-literal">null</span>.toString());<span class="hljs-comment">//报错</span><br></code></pre></td></tr></table></figure><ul><li><p>Number类型的转换</p><ul><li><p>隐式转换：在算术运算时，通常会将其他类型转成数字类型来运行（除了+运算且一边是字符串）</p></li><li><p>显示转换：Number()函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//Number()  +  </span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-literal">true</span> + <span class="hljs-number">0</span>);  <span class="hljs-comment">//+不能转换字符串为数字</span><br><br><span class="hljs-comment">//string转number 如果不是纯数字-&gt; NaN</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;value=&quot;</span> + <span class="hljs-built_in">Number</span>(<span class="hljs-string">&quot;123a&quot;</span>) + <span class="hljs-string">&quot; type=&quot;</span> + <span class="hljs-keyword">typeof</span> <span class="hljs-built_in">Number</span>(<span class="hljs-string">&quot;123a&quot;</span>));<br></code></pre></td></tr></table></figure></li><li><p>其他类型转数字的规则</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//空、空格字符串/null/false都是0  undefined/非纯数字-&gt;NaN</span><br>console.log(<span class="hljs-string">&quot;false:&quot;</span> + Number(<span class="hljs-keyword">false</span>) + <span class="hljs-string">&quot; 空:&quot;</span> + Number(<span class="hljs-string">&quot; &quot;</span>) + <span class="hljs-string">&quot; null:&quot;</span> + Number(<span class="hljs-keyword">null</span>) <br>            + <span class="hljs-string">&quot; undefined:&quot;</span> + Number(undefined));<br><span class="hljs-comment">//Result</span><br><span class="hljs-keyword">false</span>:<span class="hljs-number">0</span> 空:<span class="hljs-number">0</span> <span class="hljs-keyword">null</span>:<span class="hljs-number">0</span> undefined:NaN<br></code></pre></td></tr></table></figure></li><li><p>扩展：parseInt/parseFloat-字符串转数字专用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/*</span><br><span class="hljs-comment">parseInt() 和 parseFloat()专门用于转换非纯数字</span><br><span class="hljs-comment">解析到第一个非数值为止  如parseInt(c3px) -&gt;NaN */</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;value=&quot;</span> + <span class="hljs-built_in">parseInt</span>(<span class="hljs-string">&quot;123a&quot;</span>) + <span class="hljs-string">&quot; type=&quot;</span> + <span class="hljs-keyword">typeof</span> <span class="hljs-built_in">parseInt</span>(<span class="hljs-string">&quot;123a&quot;</span>));<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;value=&quot;</span> + <span class="hljs-built_in">parseFloat</span>(<span class="hljs-string">&quot;123.123a&quot;</span>) + <span class="hljs-string">&quot; type=&quot;</span> + <span class="hljs-keyword">typeof</span> <span class="hljs-built_in">parseInt</span>(<span class="hljs-string">&quot;123a&quot;</span>));<br></code></pre></td></tr></table></figure></li></ul></li></ul><ul><li>Boolean类型的转换  <ul><li>通过Boolean()函数 或 隐式转换!!</li><li>转换规则：直观上为空的值（0、””、null、undefined和NaN）都转成false</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//Boolean()  !!</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Boolean</span>(<span class="hljs-string">&quot;Kygo&quot;</span>));<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;Res: &quot;</span> + !!<span class="hljs-string">&quot;kygo&quot;</span>);<br></code></pre></td></tr></table></figure><p>注意：空字符串/0/NaN/null/undefined  -&gt;false</p><p>​    </p><h3 id="2-2-运算符"><a href="#2-2-运算符" class="headerlink" title="2.2 运算符"></a>2.2 运算符</h3><ul><li><p>运算符和运算元</p><ul><li><p>运算符：计算机最基本的操作就是执行运算，而执行运算就需要使用运算符来操作</p></li><li><p>运算元</p><ul><li>运算符应用的对象</li><li>一个运算符对应的只有一个运算元叫一元运算符，一个运算符对应两个运算元…</li></ul></li></ul></li><li><p>分类</p><ul><li><p>功能分：算数运算符/赋值运算符/关系(比较)运算符/逻辑运算符</p></li><li><p>操作数分：单目/双目/三目运算符</p></li></ul></li></ul><h4 id="2-2-1-算数运算符"><a href="#2-2-1-算数运算符" class="headerlink" title="2.2.1 算数运算符"></a>2.2.1 算数运算符</h4><ul><li>注意<ul><li>左结合性(从左到右计算)</li><li>NaN和任何运算都是NaN，都会先转换为number再计算(+””除外)</li><li>取余操作：m%n=余数  m&gt;n<del>余数  m&lt;n</del>m  n=0~NaN  （结果正负性取决于m）</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//加减乘除、取余、幂(ES7，和Math.pow()函数类似)</span><br>+ - * / % **<br></code></pre></td></tr></table></figure><h4 id="2-2-2-赋值运算符"><a href="#2-2-2-赋值运算符" class="headerlink" title="2.2.2 赋值运算符"></a>2.2.2 赋值运算符</h4><ul><li>优先级低于算数运算符、右结合性</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//最常用的赋值运算符：=</span><br>=   <br><span class="hljs-comment">//链式赋值，从右往左计算</span><br><span class="hljs-keyword">var</span> num=num1=num2=<span class="hljs-number">1</span>+<span class="hljs-number">1</span><br><span class="hljs-comment">//原地修改：对一个变量做运算，并将新的结果存储到同一个变量中</span><br>+=  -=  *=  /=  %= **=<br></code></pre></td></tr></table></figure><h4 id="2-2-3-自增自减运算符"><a href="#2-2-3-自增自减运算符" class="headerlink" title="2.2.3 自增自减运算符"></a>2.2.3 自增自减运算符</h4><ul><li>注意<ul><li>自增/自减只能应用于变量，应用于数值（比如5++）会报错</li><li>尽量单独出现，不推荐在表达式中写（阅读性较差）</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//n++和++n区别：n++表达式值为n, ++n为n+1</span><br>++  --  <br><span class="hljs-comment">//四种实现方法</span><br><span class="hljs-keyword">var</span> Index=<span class="hljs-number">0</span><br>index=index+<span class="hljs-number">1</span><br>index+=<span class="hljs-number">1</span><br>index++<br>++index<br></code></pre></td></tr></table></figure><h4 id="2-2-4-关系-比较-运算符"><a href="#2-2-4-关系-比较-运算符" class="headerlink" title="2.2.4 关系(比较)运算符"></a>2.2.4 关系(比较)运算符</h4><ul><li>注意：<ul><li>关系运算符返回布尔值：关系成立就返回true，不成立就返回false</li><li>任何非数值类型，先转换为数值类型再判断(字符串和字符串比较除外)</li><li>参与比较的都是字符串，比较对应的Unicode编码(一位一位比较Unicode)</li><li>任何数据和NaN比较，返回值都是false</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//左结合性,前四个优先级高后四</span><br>&gt;  &lt;  &gt;=  &lt;=  ==  !=  ===  !==  <br> <br><span class="hljs-comment">/*== 和 ===区别：===只有取值和数据类型完全相同才会返回true（完全相等）</span><br><span class="hljs-comment">比较不同类型时，==两侧的值会先转成数字再进行比较（null除外）</span><br><span class="hljs-comment">开发建议都使用===、!==来降低犯错的可能性</span><br><span class="hljs-comment">*/</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;1&quot;</span> == <span class="hljs-literal">true</span>);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;1&quot;</span> === <span class="hljs-literal">true</span>);<br><br><span class="hljs-comment">//三种特殊比较 （了解）</span><br><span class="hljs-literal">null</span>==<span class="hljs-number">0</span> <span class="hljs-literal">false</span> <br><span class="hljs-literal">undefined</span>==<span class="hljs-number">0</span> <span class="hljs-literal">false</span>  <br><span class="hljs-literal">null</span>==<span class="hljs-literal">undefined</span> <span class="hljs-literal">true</span> <span class="hljs-comment">//null衍生的</span><br><br><span class="hljs-comment">//判断是否是NaN，NaN==NaN(不能这样判断)  </span><br><span class="hljs-built_in">isNaN</span>()  <br></code></pre></td></tr></table></figure><h4 id="2-2-5-逻辑运算符"><a href="#2-2-5-逻辑运算符" class="headerlink" title="2.2.5 逻辑运算符"></a>2.2.5 逻辑运算符</h4><ul><li><p>三个逻辑运算符：&amp;&amp;(与)、 ||(或)、 !(非)</p></li><li><p>作用：将多个表达式或值放到一起来获得最终值</p></li><li><p>规则</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&amp;&amp;  <span class="hljs-comment">//逻辑与 一假则假  </span><br>||  <span class="hljs-comment">//逻辑或 一真则真  </span><br>!   <span class="hljs-comment">//逻辑非 取反</span><br></code></pre></td></tr></table></figure></li><li><p>注意</p><ul><li>左结合性 、&amp;&amp;优先级高于||  </li><li>不是boolean先转换为boolean再计算</li></ul></li></ul><ul><li><p>短路现象：&amp;&amp;只要前面是假，后面的语句不会执行(检查)，||相反</p></li><li><p><strong>逻辑与/或的本质</strong></p><ul><li><p>逻辑或的本质（返回第一个真值运算元的初始值，不存在真值就返回最后一个）</p><ul><li>从左到右依次计算操作数，处理每一个运算元时都将其转成布尔值</li><li>一旦遇到某个运算元结果是true则停止计算，返回这个运算元的<strong>初始值</strong></li><li>如果所有运算元都被计算过（转换结果是true），则返回最后一个</li></ul></li><li><p>逻辑与的本质：返回第一个假值的运算元初始值，不存在返回最后一个</p></li><li><p>注意：返回的值是运算元的初始形式，不会转化为Boolean类型</p></li><li><p>总结：返回第一个能够决定表达式真假的运算元，如果没有则返回最后一个</p></li></ul></li><li><p>逻辑与、或在开发中的应用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//逻辑或-获取第一个有值的结果</span><br><span class="hljs-keyword">var</span> info=<span class="hljs-string">&quot;123&quot;</span><br><span class="hljs-keyword">var</span> message=info||<span class="hljs-string">&quot;默认值&quot;</span><br><br><span class="hljs-comment">//逻辑与-对一些对象中的方法进行有值判断</span><br><span class="hljs-keyword">var</span> obj=&#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Kygo&quot;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>  <span class="hljs-function"><span class="hljs-title">sayHello</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;hello&quot;</span>);<br>  &#125;<br>&#125;<br><span class="hljs-comment">//调用sayHello函数</span><br>obj &amp;&amp; obj.sayHello &amp;&amp; obj.sayHello()<br></code></pre></td></tr></table></figure></li><li><p>逻辑非 !</p><ul><li>接收一个参数，先将操作数转为布尔类型，再返回取反的值</li><li>应用：两个非运算符!!用来将某个值转为布尔类型</li></ul></li></ul><ul><li><p>其他运算符</p><ul><li><p>三元运算符：条件表达式 ? 结果A : 结果B  true-返回A</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//常见用法：如果info有值就使用info，否则给个默认值</span><br>info=&#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&quot;kygo&quot;</span>&#125;<br><span class="hljs-keyword">var</span> obj = info ? info : &#123;&#125;<br></code></pre></td></tr></table></figure></li><li><p>逗号运算符：简化代码/优先级最低/左结合性/运算结果是最后一个表达式结果</p></li><li><p>单目运算符：typeof/+/ -  +可用于隐式类型转换为number  </p></li></ul></li></ul><h3 id="2-3-流程控制"><a href="#2-3-流程控制" class="headerlink" title="2.3 流程控制"></a>2.3 流程控制</h3><ul><li>流程控制基本知识<ul><li>程序的执行顺序：顺序结构、选择(分支)结构、循环结构</li><li>代码块{}<ul><li>多行代码的集合，通过一个花括号{}放到一起</li><li>可以通过流程控制语句来指定如何执行一个代码块</li></ul></li></ul></li></ul><h4 id="2-3-1-选择结构（分支语句）"><a href="#2-3-1-选择结构（分支语句）" class="headerlink" title="2.3.1 选择结构（分支语句）"></a>2.3.1 选择结构（分支语句）</h4><ul><li><p>if 分支语句、if else多分支语句、if  else if … else多分支语句</p></li><li><p>switch分支语句</p><ul><li>通过判断表达式结果（或变量）是否等于case语句的常量</li><li>if可以做值的范围判断，switch语句只能做值的相等判断（全等===）</li></ul></li><li><p>注意</p><ul><li>如果代码块中语句只有一行，花括号{}可以省略</li><li>()括号内的表达式会自动转成布尔类型来判断是否执行代码块</li></ul></li><li><p>if/switch如何选择：对区间判断用if  对固定值判断用switch（能用if就用if）</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//只有一个会执行非布尔先转布尔再判断 </span><br><span class="hljs-keyword">if</span> / <span class="hljs-keyword">if</span> <span class="hljs-keyword">else</span> / <span class="hljs-keyword">if</span>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ...  <span class="hljs-keyword">else</span> <br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">switch语句中至少有一个case代码块和一个可选的default代码块</span><br><span class="hljs-comment">case穿透问题：一条case语句执行完后会自动指定下一条，使用break解决</span><br><span class="hljs-comment">break关键字：结束整个switch语句，一般在每个case后都加</span><br><span class="hljs-comment">case判断的是===  ()和case的表达式可以是常量/变量/表达式</span><br><span class="hljs-comment">default可以省略且不一定在最后（一般放在最后）</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">switch</span>(表达式/变量)&#123;<br>  <span class="hljs-keyword">case</span> 常量<span class="hljs-number">1</span>: <br>    <span class="hljs-comment">//语句一</span><br>    <span class="hljs-keyword">break</span> <br>  <span class="hljs-keyword">case</span>... <br>  <span class="hljs-attr">default</span>: <br>    <span class="hljs-comment">//语句n</span><br>&#125;  <br></code></pre></td></tr></table></figure><h4 id="2-3-2-循环结构（循环语句）"><a href="#2-3-2-循环结构（循环语句）" class="headerlink" title="2.3.2 循环结构（循环语句）"></a>2.3.2 循环结构（循环语句）</h4><ul><li><p>重复运行同一段代码的方法，对列表进行循环操作也叫遍历或迭代</p></li><li><p>三种循环方式：while、do-while、for</p></li><li><p>注意</p><ul><li>尽量避免条件一直成立，造成死循环</li><li>for中用let定义的i只能在for中使用,变量作用域-let定义的变量在{}中有局部作用域</li><li>循环是可以嵌套的</li></ul></li><li><p>循环控制-break/continue关键字</p><ul><li>作用：终止循环的执行，可以是某次循环或直接结束整个循环</li><li>break：跳出当前循环</li><li>continue：本次循环不再执行continue后面的代码，跳入下次循环</li></ul></li><li><p>使用场景：在不知道具体循环次数的时候用while（for循环更加灵活，能用for就用for）</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//执行顺序：先执行begin(只执行一次)，然后进行迭代（先判断condition，成立再执行body，然后step...）</span><br><span class="hljs-keyword">for</span>(begin;condition;step)&#123;<br>  <span class="hljs-comment">//循环代码块</span><br>&#125;<br><span class="hljs-comment">//条件成立执行代码块，不成立不执行</span><br><span class="hljs-keyword">while</span>(循环条件)&#123;<br>  <span class="hljs-comment">//循环代码块</span><br>&#125;<br><span class="hljs-comment">//不管条件成不成立，都会先执行一次循环  </span><br><span class="hljs-keyword">do</span>&#123;<br><span class="hljs-comment">//循环代码块 </span><br>&#125;<span class="hljs-keyword">while</span>(循环条件)<br></code></pre></td></tr></table></figure><h3 id="2-4-函数"><a href="#2-4-函数" class="headerlink" title="2.4 函数"></a>2.4 函数</h3><h4 id="2-4-1-认识函数"><a href="#2-4-1-认识函数" class="headerlink" title="2.4.1 认识函数"></a>2.4.1 认识函数</h4><ul><li><p>程序中的foo、bar、baz</p><ul><li>作用：经常用作函数、变量、文件的名称，本身没有特殊意义</li></ul></li><li><p>什么是函数</p><ul><li>已经学习过的函数：alert、prompt、consloe.log、Number…</li><li>作用：用于封装一段可以随时反复执行的代码块</li></ul></li></ul><h4 id="2-4-2-函数的使用步骤"><a href="#2-4-2-函数的使用步骤" class="headerlink" title="2.4.2 函数的使用步骤"></a>2.4.2 函数的使用步骤</h4><ul><li><p>声明函数(定义函数) ：是对某些功能的封装过程</p></li><li><p>调用函数：调用自己封装好的某个函数，也可调用默认提供的或第三方库定义好的函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//使用关键字function声明函数，()调用函数</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fun</span>(<span class="hljs-params">形参列表</span>)</span>&#123;... <span class="hljs-keyword">return</span>;&#125;  <br>fun();<br></code></pre></td></tr></table></figure></li><li><p>注意</p><ul><li>函数命名规则和变量一样，定义完函数是不会执行的，必须通过()调用才会执行</li><li>形参和返回值可有可无，无返回值默认返回undefined</li><li>return语句和break语句一样后面不要跟代码，永远不会执行</li></ul></li><li><p>函数的参数</p><ul><li>形参(parameter)：定义函数时，小括号中的参数，用来接收参数用的，在函数内部作为变量使用</li><li>实参(argument)：调用函数时，小括号中的参数，用来把数据传递到函数内部用的</li></ul></li><li><p>函数的返回值</p><ul><li>使用return关键字来返回结果</li><li>一旦在函数中执行return，当前函数会终止</li><li>没有使用return或return后什么也不跟，都是返回undefined</li></ul></li><li><p>arguments变量(JS高级学习)</p><ul><li>由来：arguments对象是所有(非箭头)函数中都可用的局部变量</li><li>作用：该对象中保存所有传递给函数的实参（从0位置开始，依次存放）</li><li>注意：arguments变量类型是object(array-like)，不是一个数组</li></ul></li></ul><h4 id="2-4-3-函数的递归"><a href="#2-4-3-函数的递归" class="headerlink" title="2.4.3 函数的递归"></a>2.4.3 函数的递归</h4><ul><li><p>作用：将一个复杂的任务，转换成可以重复执行的相同任务</p></li><li><p>函数自己调用自己的过程就叫做递归-Recursion（必须有结束条件，否则会无限调用，造成报错）</p></li><li><p>练习</p><ul><li>用递归实现一个自己的幂函数pow</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//x的n次幂: pow(x,n)=x * pow(x,n-1)</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">pow</span>(<span class="hljs-params">x,n</span>)</span>&#123;<br>  <span class="hljs-keyword">if</span>(n === <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> x<br>  <span class="hljs-keyword">return</span> x * pow(x,n-<span class="hljs-number">1</span>)<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>实现斐波那契数列（使用递归和不使用递归都实现一编）<ul><li>某一个数是前两个数的和：1 1 2 3 5 8 13 21… （第一第二个数都是1）</li></ul></li></ul></li></ul><h4 id="2-4-4-函数作用域"><a href="#2-4-4-函数作用域" class="headerlink" title="2.4.4 函数作用域"></a>2.4.4 函数作用域</h4><ul><li><p>什么是作用域：变量在某一个范围内可以使用</p></li><li><p>由来：在JS(ES5之前-var定义的)中没有块级作用域的概念，但是函数可以定义自己的作用域</p></li><li><p>函数作用域定义：函数作用域表示在函数内部定义的变量，只有在函数内部才能访问到</p></li><li><p>外部变量、局部变量</p><ul><li>局部变量：定义在函数内部的变量</li><li>外部变量：定义在函数外部的变量（在a函数外，但可能在其他函数中，叫做a的外部变量）</li></ul></li><li><p>全局变量</p><ul><li>范围：在所有函数外部(script中)声明的变量</li><li>全局变量在任何函数中都是可见的</li><li>通过var声明的全局变量会在window对象上添加一个属性</li></ul></li><li><p>函数中的变量访问顺序</p><ul><li>优先访问自己函数中的变量=&gt;没有找到就依次往外部找</li><li>外部函数里也没有=&gt;window对象=&gt;没有定义报错</li></ul></li><li><p>后续学习的：块级作用域、作用域链、变量提升、AO VO GO</p></li></ul><h4 id="2-4-5-函数表达式"><a href="#2-4-5-函数表达式" class="headerlink" title="2.4.5 函数表达式"></a>2.4.5 函数表达式</h4><ul><li><p>函数的另外一种定义方式 - 函数表达式</p><ul><li>函数也是引用数据类型(对象)，所以可以保存到变量中</li><li>function 后面一般省略函数名</li><li>无论怎么创建函数，函数都是一个特殊的值，值类型是一个对象</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> foo = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;...&#125;<br>foo()<br></code></pre></td></tr></table></figure></li><li><p>函数声明 VS 函数表达式</p><ul><li><p>语法不同：函数声明是单独的语句声明函数，函数表达式是在表达式或另外的语句中创建函数</p></li><li><p>JS内部创建函数的时机不同</p><ul><li><p>函数表达式是代码执行到的时候函数才被创建，函数仅从那一刻开始可用</p></li><li><p>当JS准备运行脚本时，会在脚本寻找全局函数声明，并创建这些函数，然后再去运行脚本</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">foo()  <span class="hljs-comment">//可以成功调用foo函数，因为JS引擎在执行js脚本前会提前创建全局声明的函数</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params"></span>) </span>&#123;...&#125;<br><br>bar()  <span class="hljs-comment">//报错，找不到bar，因为是使用函数表达式创建函数，属于表达式，不会提前创建函数</span><br><span class="hljs-keyword">var</span> bar = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;...&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>开发选择：首先考虑函数声明语法，因为它更加灵活 - 可以在声明函数前就调用这些函数</p></li></ul></li></ul><h4 id="2-4-6-头等函数"><a href="#2-4-6-头等函数" class="headerlink" title="2.4.6 头等函数"></a>2.4.6 头等函数</h4><ul><li><p>定义：是指在程序设计语言中，函数被当做头等公民</p><ul><li>函数可以作为<strong>别的函数的参数、返回值、赋值给变量或存储在数据结构中</strong></li></ul></li><li><p>函数式编程 - 函数作为头等公民的编程方式</p></li><li><p>头等函数的体现</p><ul><li><p>函数可以被赋值给变量 - 函数表达式写法就是它的一种体现</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params"></span>) </span>&#123;...&#125;<br><span class="hljs-keyword">var</span> bar = foo<br>bar()<br></code></pre></td></tr></table></figure></li><li><p>函数作为另外一个函数的参数、返回值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">bar</span>(<span class="hljs-params"></span>)</span>&#123;...&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params">fn</span>)</span>&#123;<br>  fn()<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">baz</span>(<span class="hljs-params"></span>)</span>&#123;...&#125;<br>  <span class="hljs-comment">//函数作为返回值</span><br>  <span class="hljs-keyword">return</span> baz<br>&#125;<br><span class="hljs-comment">//函数作为参数传递</span><br>foo(bar)<br></code></pre></td></tr></table></figure></li><li><p>将函数存储在另外一个数据结构中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> foo = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;kygo&quot;</span>,<br>  <span class="hljs-attr">running</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;...&#125;<br>&#125;<br>foo.running()<br></code></pre></td></tr></table></figure></li></ul></li></ul><h4 id="2-4-7-回调函数"><a href="#2-4-7-回调函数" class="headerlink" title="2.4.7 回调函数"></a>2.4.7 回调函数</h4><ul><li><p>函数回调的理解（Callback Function）</p><ul><li><p>函数作为参数传递到另外一个函数内部，通过参数去调用函数称为函数的回调</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">bar</span>(<span class="hljs-params"></span>)</span>&#123;...&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params">fn</span>)</span>&#123;<br>  <span class="hljs-comment">//通过fn去调用bar的过程称为函数的回调</span><br>  fn()<br>&#125;<br>foo(bar)<br></code></pre></td></tr></table></figure></li></ul></li><li><p>函数回调的案例</p><ul><li><p>需求：通过URL向服务器发送网络请求，需要花较长时间拿到返回的结果</p></li><li><p>因为拿到结果需要一定的时间，所以我们可以传入一个回调函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">request</span>(<span class="hljs-params">url,callback</span>)</span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;通过URL向服务器发送网络请求，需要花较长时间拿到返回的结果&quot;</span>)<br>  <span class="hljs-comment">//假如拿到了结果</span><br>  <span class="hljs-keyword">var</span> resultList = [<span class="hljs-string">&quot;JS&quot;</span>, <span class="hljs-string">&quot;Vue&quot;</span>, <span class="hljs-string">&quot;React&quot;</span>]<br>  callback(resultList)<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handleResult</span>(<span class="hljs-params">res</span>)</span>&#123;<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;在handleResult中拿到的结果:&quot;</span>,res)&#125;<br><span class="hljs-comment">//传入函数，拿到结果</span><br>request(<span class="hljs-string">&quot;http://www.baidu.com/abc/getResult&quot;</span>, handleResult)<br><br><span class="hljs-comment">/*-----------代码重构--------------*/</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">request</span>(<span class="hljs-params">url,callback</span>)</span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;通过URL向服务器发送网络请求，需要花较长时间拿到返回的结果&quot;</span>)<br>  <span class="hljs-comment">//假如拿到了结果</span><br>  <span class="hljs-keyword">var</span> resultList = [<span class="hljs-string">&quot;JS&quot;</span>, <span class="hljs-string">&quot;Vue&quot;</span>, <span class="hljs-string">&quot;React&quot;</span>]<br>  callback(resultList)<br>&#125;<br><span class="hljs-comment">//传入的函数是没有名字的 - 匿名函数</span><br>request(<span class="hljs-string">&quot;http://www.baidu.com/abc/getResult&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">res</span>)</span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;在handleResult中拿到的结果:&quot;</span>,res<br>&#125;)<br></code></pre></td></tr></table></figure></li></ul></li><li><p>高阶函数和匿名函数</p><ul><li>高阶函数至少满足两个条件<ul><li>接受一个或多个函数作为输入</li><li>输出一个函数</li></ul></li><li><strong>匿名函数</strong><ul><li>如果在传入一个函数时，我们没有指定这个变量的名称或通过函数表达式创建函数就称为匿名函数</li><li>应用：匿名函数经常作为其他函数的参数或返回值</li></ul></li></ul></li></ul><h4 id="2-4-8-立即执行函数"><a href="#2-4-8-立即执行函数" class="headerlink" title="2.4.8 立即执行函数"></a>2.4.8 立即执行函数</h4><ul><li><p>什么是立即执行函数</p><ul><li><p>专业名字：IIFE - Immediately-Invoked Function Expression（立即调用函数表达式）</p></li><li><p>含义：函数定义完后立即执行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//匿名函数 + ()</span><br>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;我是一个立即执行函数&quot;</span>)<br>&#125;)()<br></code></pre></td></tr></table></figure></li></ul></li><li><p>立即执行函数的作用</p><ul><li>立即执行函数中定义的变量有自己的作用域 - 函数作用域</li><li>会创建一个函数作用域，可以避免外界访问或修改内部变量</li></ul></li><li><p>应用场景</p><ul><li><p>场景一：ES6之前的协同开发就是使用这种方式-防止全局变量的命名冲突</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//应用一: 有自己的函数作用域,可以防止变量的命名冲突</span><br><span class="hljs-keyword">var</span> kygoModule = (<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-comment">//定义要对外暴露的对象</span><br>  <span class="hljs-keyword">var</span> kygoModule = &#123;&#125;<br>  <br>  <span class="hljs-keyword">var</span> name = <span class="hljs-string">&quot;kygo&quot;</span><br>  <span class="hljs-keyword">var</span> age = <span class="hljs-number">18</span><br>  <br>  <span class="hljs-comment">//将外界需要用到的变量和函数添加到对象上</span><br>  kygoModule.age = age<br>  <span class="hljs-keyword">return</span> kygoModule<br>&#125;)()<br><span class="hljs-comment">//只能通过暴露的对象访问</span><br><span class="hljs-built_in">console</span>.log(kygoModule.age)<br></code></pre></td></tr></table></figure></li><li><p>场景二：获取所有按钮的监听点击</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//应用二: 遍历按钮并依次添加点击事件,要求打印出第n个按钮被点击了</span><br><span class="hljs-comment">//问题: 每次点击任意按钮都会打印出: 第4个按钮被点击了</span><br><span class="hljs-keyword">var</span> Eles = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">&quot;.btn&quot;</span>)<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) &#123;<br>  Eles[i].onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`我是第<span class="hljs-subst">$&#123;i + <span class="hljs-number">1</span>&#125;</span>个按钮`</span>)<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">//重构代码: 使用立即执行函数的函数作用域解决问题</span><br><span class="hljs-comment">//也可以直接使用let定义i就可解决问题</span><br><span class="hljs-keyword">var</span> Eles = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">&quot;.btn&quot;</span>)<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) &#123;<br>  <span class="hljs-comment">//这里光光使用立即执行函数包裹是不行的,需要每次传递i进入立即函数作用域中</span><br>  (<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">j</span>)</span>&#123;<br>    Eles[i].onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`我是第<span class="hljs-subst">$&#123;j + <span class="hljs-number">1</span>&#125;</span>个按钮`</span>)<br>  &#125;<br>  &#125;)(i)<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>立即执行函数的其他写法</p><ul><li><p>立即执行函数必须是一个表达式（整体），不能是一个函数声明</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//错误的写法，这种情况()前面的会被当做函数声明，因为不是一个整体</span><br><span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;...&#125;()<br><span class="hljs-comment">//正确写法，()前面会被当做一个表达式</span><br>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;...&#125;)()<br><span class="hljs-comment">//其他写法(了解即可)</span><br>+<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;...&#125;()<br></code></pre></td></tr></table></figure></li></ul></li></ul><h3 id="2-5-对象"><a href="#2-5-对象" class="headerlink" title="2.5 对象"></a>2.5 对象</h3><h4 id="2-5-1-对象的基本使用"><a href="#2-5-1-对象的基本使用" class="headerlink" title="2.5.1 对象的基本使用"></a>2.5.1 对象的基本使用</h4><ul><li><p>为什么需要对象类型？</p><ul><li>基本数据类型可以存储一些简单的值，但是当需要存储比如：一辆车的信息，一个人的信息</li><li>对象类型就是将一类事物的特征和行为组织到了一起</li></ul></li><li><p>对象类型的语法和使用</p><ul><li><p>使用{Key: Value}  键值对的方式来表示对象</p></li><li><p>键值对可以是：属性、方法</p></li><li><p>Key是字符串（我们一般省略引号不写）</p></li><li><p>value可以是任意类型：基本数据类型、函数、对象等</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//创建一个对象</span><br><span class="hljs-keyword">var</span> foo = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;kygo&quot;</span>,<br>  <span class="hljs-attr">running</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;I am Running!&quot;</span>)<br>  &#125;,<br>  <span class="hljs-string">&quot;my friend&quot;</span>: &#123;  <span class="hljs-comment">//不推荐这样写，只是为了验证key是字符串</span><br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;kobe&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">30</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>函数和方法</p><ul><li>Function  通过function默认定义的结构就是函数</li><li>Method  将一个函数放到对象中作为对象的一个属性，那么这个函数称为方法</li></ul></li></ul><h4 id="2-5-2-对象的创建方式"><a href="#2-5-2-对象的创建方式" class="headerlink" title="2.5.2 对象的创建方式"></a>2.5.2 对象的创建方式</h4><ul><li><p>创建对象的三种方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//方式一: 对象字面量创建</span><br><span class="hljs-keyword">var</span> foo = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;kygo&quot;</span><br>&#125;<br><br><span class="hljs-comment">//方式二: 通过new Obj创建</span><br><span class="hljs-keyword">var</span> foo1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>()<br>foo1.name = <span class="hljs-string">&quot;kygo1&quot;</span><br><br><span class="hljs-comment">//方式三: 通过其他类创建</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Bar</span>(<span class="hljs-params"></span>)</span>&#123;&#125;<br><span class="hljs-keyword">var</span> foo2 = <span class="hljs-keyword">new</span> Bar()<br></code></pre></td></tr></table></figure></li></ul><h4 id="2-5-3-对象的常见操作"><a href="#2-5-3-对象的常见操作" class="headerlink" title="2.5.3 对象的常见操作"></a>2.5.3 对象的常见操作</h4><ul><li><p>对象属性、方法的增删改查</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> foo = &#123;&#125;<br><span class="hljs-comment">//增加</span><br>foo.name = <span class="hljs-string">&quot;kygo&quot;</span><br>foo.age = <span class="hljs-number">18</span><br>foo.bar = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;&#125;<br><br><span class="hljs-comment">//删除 delete操作符</span><br><span class="hljs-keyword">delete</span> foo.age<br><br><span class="hljs-comment">//修改（没有属性增加，有属性修改）</span><br>foo.name = <span class="hljs-string">&quot;kygo1&quot;</span><br><br><span class="hljs-comment">//查询</span><br><span class="hljs-built_in">console</span>.log(foo.name)<br><br><span class="hljs-comment">//删除对象属性: </span><br><span class="hljs-keyword">delete</span> obj.name;<br></code></pre></td></tr></table></figure></li><li><p>对象的方括号使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//操作对象属性另一种方式:对象[&quot;属性名&quot;]=属性值 (属性名可不遵守规则)</span><br><span class="hljs-keyword">var</span> baz = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;kygo&quot;</span>,<br>  <span class="hljs-string">&quot;my friend&quot;</span>: <span class="hljs-string">&quot;kobe&quot;</span>,<br>  <span class="hljs-string">&quot;eating something&quot;</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;&#125;<br>&#125;<br><br><span class="hljs-built_in">console</span>.log(baz[<span class="hljs-string">&quot;my friend&quot;</span>])<br><span class="hljs-comment">//将字符串保存在变量中,通过[]使用属性、调用方法</span><br><span class="hljs-keyword">var</span> nameKey = <span class="hljs-string">&quot;name&quot;</span>,eatKey = <span class="hljs-string">&quot;eating something&quot;</span><br><span class="hljs-built_in">console</span>.log(baz[nameKey])<br>baz[eatKey]()<br></code></pre></td></tr></table></figure></li></ul><h4 id="2-5-4-对象的遍历"><a href="#2-5-4-对象的遍历" class="headerlink" title="2.5.4 对象的遍历"></a>2.5.4 对象的遍历</h4><ul><li><p>两种遍历数组的方式</p><ul><li>遍历/迭代：获取对象的所有属性和方法</li><li>Object.key(obj) 会返回一个对象的属性名组成的数组</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> foo = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;kygo&quot;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>  <span class="hljs-attr">height</span>: <span class="hljs-number">1.88</span><br>&#125;<br><br><span class="hljs-comment">//普通for循环遍历: 先拿到对象的属性名和属性个数-object.keys</span><br><span class="hljs-keyword">var</span> items = <span class="hljs-built_in">Object</span>.keys(foo)<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; items.length; i++) &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`<span class="hljs-subst">$&#123;items[i]&#125;</span>: <span class="hljs-subst">$&#123;foo[items[i]]&#125;</span>`</span>)<br>&#125;<br><br><span class="hljs-comment">//for...in遍历数组,item会依次拿到每个属性名</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> item <span class="hljs-keyword">in</span> foo)&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`<span class="hljs-subst">$&#123;item&#125;</span>: <span class="hljs-subst">$&#123;foo[item]&#125;</span>`</span>)<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="2-5-5-JS内存分配"><a href="#2-5-5-JS内存分配" class="headerlink" title="2.5.5 JS内存分配"></a>2.5.5 JS内存分配</h4><ul><li><p>堆内存heap和栈内存stack</p><ul><li>程序是需要加载到内存中执行的，而内存可以分为堆内存和栈内存</li><li>原始类型占据的空间是在栈内存中分配的</li><li>对象类型占据的空间是在堆内存中分配的</li></ul></li><li><p>值类型和引用类型</p><ul><li><p>值类型：原始数据类型在变量中保存的是值本身</p></li><li><p>引用类型：对象类型在变量中保存的是对象的 “引用”</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//bar存储在栈内存中，保存的是值类型</span><br><span class="hljs-keyword">var</span> bar = <span class="hljs-string">&quot;kygo&quot;</span><br><br><span class="hljs-comment">//foo对象是分为两个地方存储</span><br><span class="hljs-comment">//&#123;...&#125;对象存储在堆内存中: 假如内存地址是0X110</span><br><span class="hljs-comment">//在栈内存中会存储对象的引用: foo = 0X110 来指向对象</span><br><span class="hljs-keyword">var</span> foo = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;kygo&quot;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">18</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>一些现象的解释</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//现象一： 引用类型的比较</span><br><span class="hljs-keyword">var</span> foo = &#123;&#125;<br><span class="hljs-keyword">var</span> foo1 = &#123;&#125;<br><span class="hljs-built_in">console</span>.log(foo === foo1)<span class="hljs-comment">//false</span><br><br><span class="hljs-comment">//现象二： 引用类型的赋值</span><br><span class="hljs-keyword">var</span> bar = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;kygo&quot;</span>,<br>  <span class="hljs-attr">friend</span>: &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;kobe&quot;</span><br>  &#125;<br>&#125;<br><span class="hljs-keyword">var</span> friend = bar.friend<br>friend.name = <span class="hljs-string">&quot;kobe1&quot;</span><br><span class="hljs-built_in">console</span>.log(bar.friend.name)<span class="hljs-comment">//kobe1</span><br><br><span class="hljs-comment">//现象三： 值传递</span><br><span class="hljs-keyword">var</span> b = <span class="hljs-number">213</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">baz</span>(<span class="hljs-params">arg</span>) </span>&#123;<br>  arg = <span class="hljs-number">318</span><br>&#125;<br>baz(b)<br><span class="hljs-built_in">console</span>.log(b)<span class="hljs-comment">//213</span><br><br><span class="hljs-comment">//现象四： 引用传递，但是在函数中创建了一个新对象，没有对传入对象进行修改</span><br><span class="hljs-keyword">var</span> obj = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;kygo&quot;</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo2</span>(<span class="hljs-params">obj</span>) </span>&#123;<br>  obj = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;kobe&quot;</span><br>  &#125;<br>&#125;<br>foo2(obj)<br><span class="hljs-built_in">console</span>.log(obj)<span class="hljs-comment">//&quot;kygo&quot;</span><br><br><span class="hljs-comment">//现象五： 引用传递，但是对传入的对象进行了修改</span><br><span class="hljs-keyword">var</span> obj1 = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;kygo&quot;</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo3</span>(<span class="hljs-params">obj</span>) </span>&#123;<br>  obj.name = <span class="hljs-string">&quot;kobe&quot;</span><br>&#125;<br>foo3(obj1)<br><span class="hljs-built_in">console</span>.log(obj1)<span class="hljs-comment">//&quot;kobe&quot;</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="2-5-6-函数中的this指向"><a href="#2-5-6-函数中的this指向" class="headerlink" title="2.5.6 函数中的this指向"></a>2.5.6 函数中的this指向</h4><ul><li><p>什么是this</p><ul><li>函数中有一个this的变量，大多数情况下this会指向一个对象</li></ul></li><li><p>this的指向</p><ul><li><p>以默认的方式调用一个函数，this指向window</p></li><li><p>通过对象调用，this指向调用的对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//普通函数声明的this</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>)<br>&#125; <br>foo() <span class="hljs-comment">//指向window</span><br><br><span class="hljs-comment">//方法的调用（通过对象调用）</span><br><span class="hljs-keyword">var</span> bar = &#123;<br>  <span class="hljs-attr">baz</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>)<br>  &#125;,<br>  <span class="hljs-attr">friend</span>: &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;kobe&quot;</span>,<br>    <span class="hljs-attr">running</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>)<br>    &#125;<br>  &#125;<br>&#125;<br><span class="hljs-comment">//谁调用this就指向谁</span><br><span class="hljs-built_in">console</span>.log(bar.baz())  <span class="hljs-comment">//指向bar对象</span><br>bar.friend.running()  <span class="hljs-comment">//指向bar.friend对象</span><br><br><br><span class="hljs-comment">//考验题目一</span><br><span class="hljs-keyword">var</span> baz = bar.baz<br>baz() <span class="hljs-comment">//  this指向window对象</span><br><span class="hljs-comment">//考验题目二</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fun</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>)<br>&#125;<br><span class="hljs-keyword">var</span> foo1 = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;kygo&quot;</span>,<br>  <span class="hljs-attr">fun</span>: fun<br>&#125;<br>foo1.fun()  <span class="hljs-comment">//this指向foo1</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>this的应用</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> foo = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;kygo&quot;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>  <span class="hljs-attr">running</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-comment">//没有this的情况</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`<span class="hljs-subst">$&#123;foo.name&#125;</span> is running! age is <span class="hljs-subst">$&#123;foo.age&#125;</span>`</span>)<br>    <span class="hljs-comment">//使用this</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.name&#125;</span> is running! age is <span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.age&#125;</span>`</span>)<br>  &#125;<br>&#125;<br>foo.running()<br></code></pre></td></tr></table></figure></li></ul><h4 id="2-5-7-构造函数和类"><a href="#2-5-7-构造函数和类" class="headerlink" title="2.5.7 构造函数和类"></a>2.5.7 构造函数和类</h4><ul><li><p>创建一系列相似对象的方式</p><ul><li>在开发中需要创建一系列的相似对象，如一系列的学生对象</li><li>一种方法是直接创建一系列对象，但是这样重复代码太多</li><li>第二种方法是封装一个函数用于创建对象 - 工厂函数</li><li>第三种方法就是使用构造函数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//方式一: 挨个创建</span><br><span class="hljs-keyword">var</span> obj1 = &#123;&#125;<br><span class="hljs-keyword">var</span> obj2 = &#123;&#125;<br><br><span class="hljs-comment">//方式二: 工厂函数创建对象，缺点-打印的对象都是Object类型</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params">name, age, heigt</span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> obj = &#123;&#125;<br>  obj.name = name<br>  obj.age = age<br>  obj.height = heigt<br>  <span class="hljs-keyword">return</span> obj<br>&#125;<br><span class="hljs-keyword">var</span> foo1 = foo(<span class="hljs-string">&quot;kygo&quot;</span>, <span class="hljs-number">18</span>, <span class="hljs-number">1.88</span>)<br><span class="hljs-keyword">var</span> foo2 = foo(<span class="hljs-string">&quot;kobe&quot;</span>, <span class="hljs-number">30</span>, <span class="hljs-number">1.98</span>)<br><span class="hljs-built_in">console</span>.log(foo1, foo2)<br></code></pre></td></tr></table></figure></li><li><p>认识构造函数</p><ul><li>构造函数也称为构造器constructor，是我们在创建对象时会调用的函数</li><li>在其他编程语言中，构造函数其实是类中的一个方法，称之为构造方法</li><li>JS中的构造函数有点不太一样，构造函数扮演了其他语言中类的角色</li><li>ES5之前，都是通过function来声明一个构造函数(类)，之后通过new关键字来对其调用</li><li>ES6之后，JS可以向别的语言一样，通过class来声明一个类</li><li>类和对象的关系：类是一类事物的统称(如：水果)，而对象是具体的体现（如：苹果）</li></ul></li></ul><ul><li><p>类(ES5)</p><ul><li>JS中的类的表示形式就是构造函数，构造函数===类</li><li>构造函数<ul><li>构造函数也是一个普通的函数，表现形式和其他函数没有任何区别</li><li>如果一个普通函数使用new操作符来调用了，这个函数就称为构造函数</li></ul></li><li>函数被new操作符调用了，会执行以下操作（了解）<ul><li>在内存中创建一个新的空对象</li><li>这个对象内部的[prototype]属性会被赋值为该构造函数的[prototype]属性</li><li>构造函数内部的this，会指向创建出来的新对象</li><li>执行函数的内部代码</li><li>如果构造函数没有返回非空对象，则返回创建出来的新对象</li></ul></li><li>构造函数的补充<ul><li>构造函数的名称：使用大驼峰</li></ul></li></ul></li><li><p>创建对象的方案 - 类</p><ul><li><p>构造函数可以确保创建的对象是Person类型的(实际是constructor属性)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//构造函数创建对象</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name, age, height</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.name = name<br>  <span class="hljs-built_in">this</span>.age = age<br>  <span class="hljs-built_in">this</span>.height = height<br>  <span class="hljs-built_in">this</span>.running = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`my name is <span class="hljs-subst">$&#123;name&#125;</span>`</span>)<br>  &#125;<br>&#125;<br><span class="hljs-keyword">var</span> person1 = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;kygo&quot;</span>, <span class="hljs-number">18</span>, <span class="hljs-number">1.88</span>)<br><span class="hljs-keyword">var</span> person2 = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;kobe&quot;</span>, <span class="hljs-number">30</span>, <span class="hljs-number">1.98</span>)<br><span class="hljs-built_in">console</span>.log(person1, person2)<br></code></pre></td></tr></table></figure></li><li><p>构造函数的其他特征（JS高级）</p><ul><li>原型、原型链、实现继承的方案</li><li>ES6中的类、继承的实现</li></ul></li></ul></li></ul><h4 id="2-5-8-全局对象window"><a href="#2-5-8-全局对象window" class="headerlink" title="2.5.8 全局对象window"></a>2.5.8 全局对象window</h4><ul><li><p>由来</p><ul><li>浏览器中有一个全局对象window</li></ul></li><li><p>作用</p><ul><li><p>查找变量最终会查找到window上</p></li><li><p>将一些浏览器全局提供给我们的变量、函数、对象，放在window对象上</p></li><li><p>使用var定义的变量会被默认添加到window上面</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">window</span>)<br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">window</span>.console === <span class="hljs-built_in">console</span>)  <span class="hljs-comment">//true</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">window</span>.document === <span class="hljs-built_in">document</span>)  <span class="hljs-comment">//true</span><br><br><span class="hljs-keyword">var</span> foo = <span class="hljs-number">213</span>, bar = &#123;&#125;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">window</span>.foo, <span class="hljs-built_in">window</span>.bar === bar) <span class="hljs-comment">//213</span><br></code></pre></td></tr></table></figure></li></ul></li></ul><h4 id="2-5-9-函数也是对象"><a href="#2-5-9-函数也是对象" class="headerlink" title="2.5.9 函数也是对象"></a>2.5.9 函数也是对象</h4><ul><li><p>函数也是引用类型，存储在堆内存中</p><ul><li>虽然typeof函数结果为function，但是function类型都是对象</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//foo中存储的是函数的内存地址,如0X101</span><br><span class="hljs-comment">//栈内存存储：foo = 0X101  堆内存中存储： function()&#123;&#125; 内存地址为0X101</span><br><span class="hljs-keyword">var</span> foo = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;&#125;<br><span class="hljs-comment">//将foo中存储的内存地址赋值给bar</span><br><span class="hljs-keyword">var</span> bar = foo<br><span class="hljs-comment">//通过内存地址来调用堆内存中的函数</span><br>bar()<br>foo()<br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> foo)  <span class="hljs-comment">//function =&gt; Object</span><br><span class="hljs-comment">//地址-指针-引用</span><br><span class="hljs-comment">//定义对象类型的变量,obj/foo/bar都是存储在堆内存中的</span><br><span class="hljs-keyword">var</span> obj = &#123;&#125;<br><span class="hljs-keyword">var</span> foo = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">bar</span>(<span class="hljs-params"></span>)</span>&#123;&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="2-6-常见内置类"><a href="#2-6-常见内置类" class="headerlink" title="2.6. 常见内置类"></a>2.6. 常见内置类</h3><ul><li>内置类：默认javascript已经给我们封装好的类(构造函数)，我们只需要去使用即可</li></ul><h4 id="3-1-认识包装类型"><a href="#3-1-认识包装类型" class="headerlink" title="3.1 认识包装类型"></a>3.1 认识包装类型</h4><ul><li><p>JS的原始类型并非对象类型，从理论上来说是没办法获取属性和方法的</p></li><li><p>奇怪的现象</p><ul><li><p>我们可以看到原始类型调用了属性和方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> msg = <span class="hljs-string">&quot;hello world&quot;</span><br><span class="hljs-built_in">console</span>.log(msg.length) <span class="hljs-comment">//11</span><br><span class="hljs-built_in">console</span>.log(msg.split(<span class="hljs-string">&quot; &quot;</span>)) <span class="hljs-comment">//[&#x27;hello&#x27;,&#x27;world&#x27;]</span><br><br><span class="hljs-keyword">var</span> num = <span class="hljs-number">3.14159</span><br><span class="hljs-built_in">console</span>.log(num.toFixed(<span class="hljs-number">2</span>)) <span class="hljs-comment">//3.14</span><br></code></pre></td></tr></table></figure></li><li><p>现象解释：JS为了其可以调用属性和方法，封装了对应的包装类型（String、Number）</p></li></ul></li><li><p>常见的包装类型</p><ul><li>String、Number、Boolean、Symbol、BigInt类型</li></ul></li><li><p>包装类型的使用过程</p><ul><li><p>默认情况，当我们调用一个原始类型的属性或者方法时，会进行以下操作</p></li><li><p>通常JS引擎会做很多优化：它可以跳过创建包装类过程，在内部直接完成属性的获取或方法调用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> num = <span class="hljs-number">3.14159</span><br><span class="hljs-built_in">console</span>.log(num.toFixed(<span class="hljs-number">2</span>)) <span class="hljs-comment">//3.14</span><br><br><span class="hljs-comment">//js内部做了以下操作</span><br><span class="hljs-comment">//1.根据原始值，创建一个原始类型对应的包装类型对象</span><br><span class="hljs-keyword">var</span> numObj = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Number</span>(num)<br><span class="hljs-comment">//2.调用对应的属性和方法，返回一个新的值</span><br><span class="hljs-keyword">var</span> result = numObj.toFixed(<span class="hljs-number">2</span>)<br><span class="hljs-comment">//3.创建的包装类对象被销毁</span><br><span class="hljs-built_in">console</span>.log(result)<br></code></pre></td></tr></table></figure></li></ul></li></ul><h4 id="3-2-数字包装类Number"><a href="#3-2-数字包装类Number" class="headerlink" title="3.2 数字包装类Number"></a>3.2 数字包装类Number</h4><ul><li><p>属性的补充</p><ul><li>最大/小安全整数<ul><li>Number.MAX_SAFE_INTEGER/Number.MIN_SAFE_INTEGER</li></ul></li></ul></li><li><p>实例方法的补充</p><ul><li>toString([base])<ul><li>数字转字符串，并且按照base进制转化</li><li>注意：直接对数字操作需要使用..运算符(如：123..toString())</li></ul></li><li>toFixed(digits)<ul><li>格式化数字，保留digits位小数，返回字符串(注意)</li></ul></li></ul></li><li><p>类方法的补充</p><ul><li>Number.parseInt(string [, base]) 字符串转整数，也有对应的全局方法parseInt</li><li>Number.parseFloat(string)  字符串转浮点数，也有全局方法parseFloat</li></ul></li><li><p>其他方法用到查MDN即可</p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number</a></li></ul></li><li><p>程序示例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//数字静态属性</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Number</span>.MAX_SAFE_INTEGER, <span class="hljs-built_in">Number</span>.MIN_SAFE_INTEGER)<br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Number</span>.MAX_VALUE, <span class="hljs-built_in">Number</span>.MIN_VALUE)<br><br><span class="hljs-comment">//实例方法: toString/toFixed</span><br><span class="hljs-keyword">var</span> num = <span class="hljs-number">213</span><br><span class="hljs-built_in">console</span>.log(num.toString(<span class="hljs-number">8</span>), <span class="hljs-keyword">typeof</span> num.toString(<span class="hljs-number">8</span>))  <span class="hljs-comment">//325 string</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">123.</span>.toString(), <span class="hljs-number">123.321</span>.toFixed(<span class="hljs-number">1</span>))  <span class="hljs-comment">//123 123.3</span><br><br><span class="hljs-keyword">var</span> num1 = <span class="hljs-number">213.318</span><br><span class="hljs-built_in">console</span>.log(num1.toFixed(<span class="hljs-number">2</span>), <span class="hljs-keyword">typeof</span> num1.toFixed(<span class="hljs-number">2</span>))  <span class="hljs-comment">//213.32 string</span><br><br><span class="hljs-comment">//静态方法/全局对象方法 parseInt/parseFloat</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Number</span>.parseInt(<span class="hljs-string">&quot;213aaa&quot;</span>))  <span class="hljs-comment">//213</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Number</span>.parseFloat(<span class="hljs-string">&quot;213.318bbb&quot;</span>))  <span class="hljs-comment">//213.318</span><br><span class="hljs-comment">//同一个方法</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Number</span>.parseInt === <span class="hljs-built_in">parseInt</span>) <span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="3-3-数学对象Math"><a href="#3-3-数学对象Math" class="headerlink" title="3.3 数学对象Math"></a>3.3 数学对象Math</h4><ul><li><p>Math对象简单认识</p><ul><li>除了Number类可以对数字进行处理外，JS还提供了一个Math对象</li><li>Math是一个内置对象（不是一个构造函数），它有一些数学常数属性和数学函数方法</li></ul></li><li><p>Math常用属性</p><ul><li>Math.PI - 圆周率</li></ul></li><li><p>Math常见方法</p><ul><li>Math.floor - 向下取整</li><li>Math.ceil - 向上取整</li><li>Math.round - 四舍五入取整</li><li>Math.random - 生成[0,1)的随机数</li><li>Math.pow(x,y) - 返回x的y次幂</li></ul></li><li><p>其他方法见MDN</p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math</a></li></ul></li><li><p>程序示例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//静态属性</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Math</span>.PI)  <span class="hljs-comment">//3.14159...</span><br><br><span class="hljs-comment">//静态方法</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Math</span>.floor(<span class="hljs-number">3.14</span>)) <span class="hljs-comment">//3</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Math</span>.ceil(<span class="hljs-number">3.14</span>))  <span class="hljs-comment">//4</span><br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Math</span>.round(<span class="hljs-number">2.4</span>))  <span class="hljs-comment">//2</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Math</span>.round(<span class="hljs-number">2.5</span>))  <span class="hljs-comment">//3</span><br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Math</span>.pow(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>))  <span class="hljs-comment">//8</span><br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Math</span>.random())<br><span class="hljs-comment">//获取任意区间随机数 m~n x=n-m y=m   </span><br><span class="hljs-comment">//Math.floor(Math.random() * x + y)</span><br><span class="hljs-comment">//100个[10,100)的数字</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++)&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Math</span>.floor(<span class="hljs-built_in">Math</span>.random()* <span class="hljs-number">90</span> + <span class="hljs-number">10</span>))<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="3-4-字符串包装类String"><a href="#3-4-字符串包装类String" class="headerlink" title="3.4 字符串包装类String"></a>3.4 字符串包装类String</h4><ul><li><p>String类的基本使用</p><ul><li>开发中，我们经常需要对字符串进行各种操作，String类给我们提供了对应的属性和方法</li><li>String类常见属性<ul><li>length - 获取字符串长度</li></ul></li><li>访问字符串的字符<ul><li>方法一：字符串索引 arr[0]</li><li>方法二：通过str.charAt(pos)方法</li><li>区别：索引方式没有找到会返回undefined，charAt没有找到会回空字符串</li></ul></li><li>字符串的遍历<ul><li>方法一：普通for循环</li><li>方法二：for…of遍历</li></ul></li></ul></li><li><p>修改字符串</p><ul><li>字符串的不可变性<ul><li>字符串定义后是不可修改的，如：str[1] = “A” 不会起作用</li></ul></li><li>以下修改字符串的方法，都是返回新的字符串（不修改原字符串）<ul><li>toLowerCase() - 将所有字符串转为小写</li><li>toUpperCase() - 将所有字符串转为大写</li></ul></li></ul></li><li><p>代码示例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;Hello World!&quot;</span><br><span class="hljs-comment">//获取字符串长度</span><br><span class="hljs-built_in">console</span>.log(str.length)  <span class="hljs-comment">//12</span><br><span class="hljs-comment">//访问字符串字符</span><br><span class="hljs-built_in">console</span>.log(str[<span class="hljs-number">4</span>])  <span class="hljs-comment">//o</span><br><span class="hljs-built_in">console</span>.log(str.charAt(<span class="hljs-number">4</span>))  <span class="hljs-comment">//o</span><br><span class="hljs-built_in">console</span>.log(str[<span class="hljs-number">100</span>], str.charAt(<span class="hljs-number">100</span>))  <span class="hljs-comment">//undefined &#x27;&#x27;</span><br><span class="hljs-comment">//字符串的遍历</span><br><span class="hljs-comment">//普通for遍历</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; str.length; i++) &#123;<br>  <span class="hljs-built_in">console</span>.log(str[i])<br>&#125;<br><span class="hljs-comment">//for...of 迭代器遍历</span><br><span class="hljs-comment">//目前支持可迭代对象: 字符串/数组(对象不支持)</span><br><span class="hljs-comment">//String对象内部把字符串变成了一个可迭代对象</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> char <span class="hljs-keyword">of</span> str) &#123;<br>  <span class="hljs-built_in">console</span>.log(char)<br>&#125;<br><br><span class="hljs-comment">//修改字符串</span><br>str[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;c&#x27;</span><br><span class="hljs-built_in">console</span>.log(str)  <span class="hljs-comment">//字符串不可变性,这样操作无意义</span><br><span class="hljs-comment">//两个转小写大写方法(重要)</span><br><span class="hljs-built_in">console</span>.log(str.toLowerCase())  <span class="hljs-comment">//hello world!</span><br><span class="hljs-built_in">console</span>.log(str.toUpperCase())  <span class="hljs-comment">//HELLO WORLD!</span><br></code></pre></td></tr></table></figure></li><li><p>查找字符串</p><ul><li>开发中经常会在一个字符串中查找或获取另外一个字符串</li><li>方法一：查找字符串位置<ul><li>str . indexOf(searchValue [, fromIndex])</li><li>方法解释：从fromIndex开始，查找searchValue的索引，没有找到返回-1</li><li>相似方法：lastIndexOf，从最后开始查找（用得较少）</li></ul></li><li>方法二：是否包含字符串<ul><li>str . Includes (searchString [, position])    (ES6中新增方法)</li><li>从position位置开始查找searchString，返回true或false</li></ul></li><li>方法三：以XXX开头<ul><li>str . startsWith(searchString [, position])</li><li>从position位置开始，判断字符串是否以searchString开头(ES6 新增方法)</li></ul></li><li>方法四：以XXX结尾<ul><li>str.endsWith(searchString[, length])</li><li>在length长度内，判断是否以searchString结束</li></ul></li><li>方法五：替换字符串<ul><li>str.replace(regexp|substr, newSubStr|function)</li><li>查找substr字符串(也可使用regexp正则表达式)，使用新的字符串替换(也可传入函数替换)</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;Hello World!&quot;</span><br><span class="hljs-comment">//indexOf/lastIndexOf查找字符串(没有找到返回-1)</span><br><span class="hljs-built_in">console</span>.log(str.indexOf(<span class="hljs-string">&quot;llo&quot;</span>))  <span class="hljs-comment">//2</span><br><span class="hljs-built_in">console</span>.log(str.indexOf(<span class="hljs-string">&quot;He&quot;</span>, <span class="hljs-number">2</span>))  <span class="hljs-comment">//-1 </span><br><span class="hljs-built_in">console</span>.log(str.lastIndexOf(<span class="hljs-string">&quot;He&quot;</span>))  <span class="hljs-comment">//0</span><br><span class="hljs-comment">//includes是否包含字符串</span><br><span class="hljs-built_in">console</span>.log(str.includes(<span class="hljs-string">&quot;lo&quot;</span>))  <span class="hljs-comment">//true</span><br><span class="hljs-built_in">console</span>.log(str.includes(<span class="hljs-string">&quot;lo&quot;</span>, <span class="hljs-number">5</span>))  <span class="hljs-comment">//false</span><br><br><span class="hljs-comment">//以XXX开始,XXX结尾</span><br><span class="hljs-built_in">console</span>.log(str.startsWith(<span class="hljs-string">&quot;llo&quot;</span>))  <span class="hljs-comment">//false</span><br><span class="hljs-built_in">console</span>.log(str.startsWith(<span class="hljs-string">&quot;llo&quot;</span>, <span class="hljs-number">2</span>))  <span class="hljs-comment">//true</span><br><span class="hljs-built_in">console</span>.log(str.endsWith(<span class="hljs-string">&quot;ld!&quot;</span>))  <span class="hljs-comment">//true</span><br><br><span class="hljs-comment">//字符串的替换</span><br><span class="hljs-built_in">console</span>.log(str.replace(<span class="hljs-string">&quot;o&quot;</span>, <span class="hljs-string">&quot;cth&quot;</span>))  <span class="hljs-comment">//Hellcth World!</span><br><span class="hljs-comment">//将o替换为大写O</span><br><span class="hljs-built_in">console</span>.log(str.replace(<span class="hljs-string">&quot;o&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;O&quot;</span><span class="hljs-comment">//返回的值即替换的值</span><br>&#125;))<br></code></pre></td></tr></table></figure></li><li><p>获取子字符串（开发推荐slice方法）</p><ul><li>slice(start, end)    [start, end) 切割字符串，获得子串</li><li>substring(start, end)    [start, end) 切割字符串</li><li>substr(start, length)    从start开始获取长度为length的字符串</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;hi kygo!&quot;</span><br><span class="hljs-comment">//三种获取子字符串的方法</span><br><span class="hljs-comment">//推荐slice,支持负数(从右往左数)</span><br><span class="hljs-built_in">console</span>.log(str.slice(<span class="hljs-number">3</span>, <span class="hljs-number">7</span>))  <span class="hljs-comment">//kygo  [3,7)</span><br><span class="hljs-built_in">console</span>.log(str.slice(<span class="hljs-number">0</span>, -<span class="hljs-number">1</span>))  <span class="hljs-comment">//hi kygo  [0,-1)</span><br><span class="hljs-built_in">console</span>.log(str.substring(<span class="hljs-number">3</span>, <span class="hljs-number">7</span>))  <span class="hljs-comment">//kygo  [3,7)</span><br><span class="hljs-comment">//第三个位置开始,截取4个字符</span><br><span class="hljs-built_in">console</span>.log(str.substr(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>))  <span class="hljs-comment">//kygo</span><br></code></pre></td></tr></table></figure></li><li><p>其他方法</p><ul><li><p>拼接字符串</p><ul><li>str.concat(str2[,…strN])</li></ul></li><li><p>删除首尾空格</p><ul><li>str.trim()</li></ul></li><li><p>字符串分割</p><ul><li>str.split([separator[, limit]])</li><li>以separator分割，也可是一个正则表达式，limit限制返回分割后片断的数量</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//拼接字符串: +/concat</span><br><span class="hljs-built_in">console</span>.log(str.concat(<span class="hljs-string">&quot;go&quot;</span>).concat(<span class="hljs-string">&quot;go&quot;</span>).concat(<span class="hljs-string">&quot;go!&quot;</span>))  <span class="hljs-comment">//链式调用</span><br><span class="hljs-built_in">console</span>.log(str.concat(<span class="hljs-string">&quot;gogogo&quot;</span>, <span class="hljs-string">&quot;!&quot;</span>))  <span class="hljs-comment">//hi kygo!gogogog</span><br><br><span class="hljs-comment">//删除字符串首尾空格</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot; ky  go &quot;</span>.trim())  <span class="hljs-comment">//ky  go</span><br><br><span class="hljs-comment">//字符串分割,默认每个字母为单位分割</span><br><span class="hljs-keyword">var</span> str1 = <span class="hljs-string">&quot;ab-cd-ef-gh&quot;</span><br><span class="hljs-keyword">var</span> items = str1.split(<span class="hljs-string">&quot;-&quot;</span>)<br><span class="hljs-keyword">var</span> newStr1 = items.join(<span class="hljs-string">&quot;*&quot;</span>) <span class="hljs-comment">//数组的join</span><br><span class="hljs-built_in">console</span>.log(items)  <span class="hljs-comment">//[&#x27;ab&#x27;, &#x27;cd&#x27;, &#x27;ef&#x27;, &#x27;gh&#x27;]</span><br><span class="hljs-built_in">console</span>.log(newStr1)  <span class="hljs-comment">//ab*cd*ef*gh</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>MDN文档：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String</a></p></li></ul><h4 id="3-5-Date类型的使用"><a href="#3-5-Date类型的使用" class="headerlink" title="3.5 Date类型的使用"></a>3.5 Date类型的使用</h4><ul><li><p>时间的表示方式（了解）</p><ul><li>最初通过观测太阳的位置决定时间，缺点：不同区域位置使用的时间不同</li><li>之后开始制作标准时间：英国伦敦格的皇家格林威治天文台的标准时间(GMT)<ul><li>以本初子午线为标准（经度0度）</li><li>其他时区根据地理位置确定：往东的时区(GMT+hh:mm)  往西的时区(GMT-hh)</li></ul></li><li>但是公转有一定误差，所以造成GMT的时间有一定误差，于是提出了根<strong>据原子钟计算的标准时间UTC</strong></li><li>目前GMT依然在使用，主要表示某个时区中的时间，而UTC是标准的时间</li><li>举例：中国在UTC往东(东八区)，所以北京标准时间是在UTC时间上加8小时</li></ul></li><li><p>Date对象的创建</p><ul><li><p>JS中使用Date来表示和处理时间</p></li><li><p>Date构造函数用法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//1. 没有传入获取当前时间</span><br><span class="hljs-keyword">var</span> date1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>()<br><span class="hljs-built_in">console</span>.log(date1)<br><span class="hljs-comment">//2. 传入时间字符串获取时间</span><br><span class="hljs-keyword">var</span> date2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-string">&quot;2023-02-18&quot;</span>)<br><span class="hljs-built_in">console</span>.log(date2)<br><span class="hljs-comment">//3. 传入Unix时间戳获取时间</span><br><span class="hljs-keyword">var</span> date3 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-number">1321331211312</span>)<br><span class="hljs-built_in">console</span>.log(date3)<br><span class="hljs-comment">//4. 依次传入 年月日时分秒毫秒 获取时间</span><br><span class="hljs-keyword">var</span> date4 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-number">2023</span>,<span class="hljs-number">2</span>,<span class="hljs-number">18</span>,<span class="hljs-number">14</span>,<span class="hljs-number">54</span>,<span class="hljs-number">10</span>,<span class="hljs-number">123</span>)<br><span class="hljs-built_in">console</span>.log(date4)<br></code></pre></td></tr></table></figure></li></ul></li><li><p>dateString时间的表示方式</p><ul><li><p>RFC 2822标准</p><ul><li>默认打印的时间格式就是RFC标准的：new Date()</li></ul></li><li><p>ISO 8601标准</p><ul><li>转成ISO标准：new Date().toISOString()</li><li>YYYY-MM-DDTHH:mm:ss.sssZ    （T用于分隔可省略，Z表示时区，SSS表示毫秒）</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//时间格式</span><br><span class="hljs-keyword">var</span> date = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>()<br><span class="hljs-built_in">console</span>.log(date) <span class="hljs-comment">//Sat Feb 18 2023 15:01:14 GMT+0800 (中国标准时间)</span><br><span class="hljs-built_in">console</span>.log(date.toISOString()) <span class="hljs-comment">//2023-02-18T07:01:14.835Z</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>Date获取信息的方法</p><ul><li><p>从Date对象中获取各种详细的信息</p></li><li><p>getFullYear()  getMonth()  getDate()    获取年月日(注意：月份是0-11)</p></li><li><p>getHours()  getMinutes()  getSeconds()  getMilliseconds   获取时分秒毫秒</p></li><li><p>getDay()    获取一周中的第几天，从0(周天)-6(周六)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//date获取信息方法</span><br><span class="hljs-keyword">var</span> nowDate = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>()<br><span class="hljs-built_in">console</span>.log(nowDate.getFullYear())  <span class="hljs-comment">//2023</span><br><span class="hljs-built_in">console</span>.log(nowDate.getMonth())  <span class="hljs-comment">//1 (当前是2月)</span><br><span class="hljs-comment">//获取当前是一周的第几天</span><br><span class="hljs-built_in">console</span>.log(nowDate.getDay())  <span class="hljs-comment">//6 (星期六)</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>Date的设置方法</p><ul><li><p>setFullYear…（get方法也有对应的set方法）</p></li><li><p>不同的是setFullYear(year,[month],[date])、setHours(hour,[min]…)可以设置多个参数</p></li><li><p>setTime(milliseconds)    传入时间戳设置时间</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//date的设置方法</span><br><span class="hljs-keyword">var</span> setDate = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>()<br>setDate.setFullYear(<span class="hljs-number">2050</span>) <br><span class="hljs-built_in">console</span>.log(setDate)  <span class="hljs-comment">//Fri Feb 18 2050 15:10:19 GMT+0800 (中国标准时间)</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>Date获取Unix时间戳</p><ul><li><p>Unix时间戳：一个整数值，表示自1970年1月1日00:00:00 UTC以来的毫秒数</p></li><li><p>JS中，有多个方法可以获取到时间戳</p><ul><li>new Date().getTime()</li><li>new Date().valueOf()</li><li>Date.now()</li><li>+new Date()  算数运算符自动转换</li></ul></li><li><p>获取到Unix时间戳后，可以用作测试代码性能(运行时间)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//Date获取Unix时间戳</span><br><span class="hljs-keyword">var</span> unixDate = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>()<br><span class="hljs-comment">//将一个date对象转成时间戳</span><br><span class="hljs-built_in">console</span>.log(unixDate.getTime())<br><span class="hljs-built_in">console</span>.log(unixDate.valueOf())<br><span class="hljs-comment">//获取当前时间戳</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Date</span>.now())<br><span class="hljs-built_in">console</span>.log(+unixDate)  <span class="hljs-comment">//不推荐</span><br><br><span class="hljs-comment">//计算操作所花时间</span><br><span class="hljs-keyword">var</span> startTime = <span class="hljs-built_in">Date</span>.now()<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>;i &lt; <span class="hljs-number">10000</span>; i++) &#123;<br>  <span class="hljs-built_in">console</span>.log(i)<br>&#125;<br><span class="hljs-keyword">var</span> endTime = <span class="hljs-built_in">Date</span>.now()<br><span class="hljs-built_in">console</span>.log(endTime - startTime)  <span class="hljs-comment">//147ms</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>Date.parse方法</p><ul><li>作用：将时间字符串转为时间戳</li><li>注意<ul><li>作用等同于new Date(dateString).getTime()操作</li><li>需要符合RFC或ISO日期格式的字符串，如：YYYY-MM-DDTHH:mm:ss:sssZ</li><li>如果输入的格式不能被解析，则返回NaN</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//字符串转时间戳</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Date</span>.parse(<span class="hljs-string">&quot;2023-3-18&quot;</span>))<br><span class="hljs-comment">//以上方法和以下方法同样的效果</span><br><span class="hljs-built_in">console</span>.log((<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-string">&quot;2023-3-18&quot;</span>)).getTime())<br><span class="hljs-built_in">console</span>.log((<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-string">&quot;2023-3-18&quot;</span>)).valueOf())<br></code></pre></td></tr></table></figure></li></ul><h3 id="2-7-数组Array使用详解"><a href="#2-7-数组Array使用详解" class="headerlink" title="2.7 数组Array使用详解"></a>2.7 数组Array使用详解</h3><ul><li><p>什么是数组</p><ul><li>可以通过索引来访问的有序集合叫做数组，通过[]创建</li><li>数组是一种特殊的对象类型</li></ul></li><li><p>数组的注意点</p><ul><li><p>数组对应索引没有存储数据时默认为undefined</p></li><li><p>访问数组不存在的索引不会报错，返回undefined</p></li><li><p>数组存储空间不足时会自动扩容</p></li><li><p>数组可以存储不同的数据类型</p></li><li><p>数组分配的存储空间不一定是连续的(因为存储的数据类型不同)</p></li></ul></li></ul><h4 id="2-7-1-数组的创建方式"><a href="#2-7-1-数组的创建方式" class="headerlink" title="2.7.1 数组的创建方式"></a>2.7.1 数组的创建方式</h4><ul><li><p>两种方式：通过[ ]创建、通过new Array创建</p></li><li><p>创建数组时，设置数组长度（少用）</p></li><li><p>代码示例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//[]字面量创建数组</span><br><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br><span class="hljs-keyword">var</span> student = [<br>  &#123;<span class="hljs-attr">id</span>: <span class="hljs-number">111</span>, <span class="hljs-attr">name</span>: kygo, <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>&#125;,<br>  &#123;<span class="hljs-attr">id</span>: <span class="hljs-number">222</span>, <span class="hljs-attr">name</span>: kygo1, <span class="hljs-attr">age</span>: <span class="hljs-number">19</span>&#125;,<br>  &#123;<span class="hljs-attr">id</span>: <span class="hljs-number">333</span>, <span class="hljs-attr">name</span>: kygo2, <span class="hljs-attr">age</span>: <span class="hljs-number">20</span>&#125;<br>] <br><span class="hljs-comment">//new创建数组</span><br><span class="hljs-keyword">var</span> arr1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(<span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>)<br><span class="hljs-comment">//创建一个长度为5的空数组</span><br><span class="hljs-keyword">var</span> arr2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(<span class="hljs-number">5</span>)<br></code></pre></td></tr></table></figure></li></ul><h4 id="2-7-2-数组的基本操作"><a href="#2-7-2-数组的基本操作" class="headerlink" title="2.7.2 数组的基本操作"></a>2.7.2 数组的基本操作</h4><ul><li><p>基本操作</p><ul><li><p>访问数组元素：arr[]/arr.at()</p><ul><li>区别：at可以设置负数，从数组后面往前数</li></ul></li><li><p>修改数组元素：arr[0] = “cth”</p></li><li><p>删除和添加数组</p><ul><li>也可以通过索引来操作(开发很少这样做)：delete arr[1]   arr[100]=100</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><span class="hljs-comment">//访问数组元素[]/at</span><br><span class="hljs-built_in">console</span>.log(arr[<span class="hljs-number">0</span>])  <span class="hljs-comment">//1</span><br><span class="hljs-built_in">console</span>.log(arr.at(-<span class="hljs-number">1</span>))  <span class="hljs-comment">//3</span><br><span class="hljs-comment">//修改数组元素</span><br>arr[<span class="hljs-number">1</span>] = <span class="hljs-number">100</span><br><span class="hljs-comment">//删除/增加数组元素(这种方式不常用)</span><br><span class="hljs-keyword">delete</span> arr[<span class="hljs-number">2</span>]<br>arr[<span class="hljs-number">5</span>] = <span class="hljs-number">200</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>数组的添加、删除方法一</p><ul><li><p>push/pop</p><ul><li>从数组末端增加、删除元素</li></ul></li><li><p>unshift/shift</p><ul><li>从数组首端添加、删除元素，整个数组元素向后、前移动</li></ul></li><li><p>注意</p><ul><li>添加元素可添加多个，但删除只能一个个删</li><li>push/pop方法比unshift/shift效率高很多</li><li>增加元素方法会返回增加后数组长度，删除会返回删除的那个元素</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//数组尾部增加/删除数组元素-push/pop</span><br><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>]<br>arr.push(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>)  <span class="hljs-comment">//[3, 2, 1, 0, 1, 2]</span><br><span class="hljs-keyword">var</span> popitem = arr.pop()  <span class="hljs-comment">//[3, 2, 1, 0, 1]</span><br><span class="hljs-built_in">console</span>.log(popitem)  <span class="hljs-comment">//2</span><br><br><br><span class="hljs-comment">//数组首部增加/删除数组元素-unshift/shift</span><br><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>]<br>arr.unshift(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>)  <span class="hljs-comment">//[0, 1, 3, 2, 1]</span><br>arr.shift()  <span class="hljs-comment">//[1, 3, 2, 1]</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong>数组的添加、删除方法二</strong></p><ul><li><p>如果想在数组中间某个位置添加、删除元素，就必须使用splice方法了</p></li><li><p>语法：arr.splice(start[, deleteCount[, item1[, item2[,…]]]])</p><ul><li>从start位置开始处理数组元素</li><li>deleteCount：要删除元素的个数，为0或负数表示不删除</li><li>item1,item2,…：需要添加的元素</li></ul></li><li><p>注意：splice方法会修改原数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//数组增删改通用-splice</span><br><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br><span class="hljs-comment">//在数组开头增加6,7两个元素</span><br>arr.splice(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>)<br><span class="hljs-built_in">console</span>.log(arr)  <span class="hljs-comment">//[6,7,1,2,3,4,5]</span><br><span class="hljs-comment">//删除索引为2,3的两个元素</span><br>arr.splice(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>)<br><span class="hljs-built_in">console</span>.log(arr)  <span class="hljs-comment">//[6,7,3,4,5]</span><br><span class="hljs-comment">//修改索引为4的元素值为100</span><br>arr.splice(<span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">100</span>)<br><span class="hljs-built_in">console</span>.log(arr)  <span class="hljs-comment">//[6,7,3,4,100]</span><br></code></pre></td></tr></table></figure></li></ul></li></ul><h4 id="2-7-3-数组的遍历和length属性"><a href="#2-7-3-数组的遍历和length属性" class="headerlink" title="2.7.3 数组的遍历和length属性"></a>2.7.3 数组的遍历和length属性</h4><ul><li><p>length属性</p><ul><li>作用：获取数组长度，当修改数组时length会自动更新</li><li>length是可写的<ul><li>如果设置大于默认lenght数值会增加数组长度</li><li>设置小于默认length的数值会截断数组</li></ul></li><li>清空数组最简单的方法：arr.length = 0</li></ul></li><li><p>数组的遍历</p><ul><li><p>普通for循环/for…in/for…of</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//length属性</span><br><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>]<br>arr.length = <span class="hljs-number">4</span><br><span class="hljs-built_in">console</span>.log(arr)  <span class="hljs-comment">//扩容: [3,2,1,empty]</span><br>arr.length = <span class="hljs-number">0</span><br><span class="hljs-built_in">console</span>.log(arr)  <span class="hljs-comment">//被截断: [] </span><br><br><span class="hljs-comment">//数组的遍历</span><br><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br><span class="hljs-comment">//1. 普通的for遍历</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>  <span class="hljs-built_in">console</span>.log(arr[i])<br>&#125;<br><span class="hljs-comment">//2. for...in循环</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> index <span class="hljs-keyword">in</span> arr)&#123;<br>  <span class="hljs-built_in">console</span>.log(arr[index])<br>&#125;<br><span class="hljs-comment">//3. for...of循环</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> item <span class="hljs-keyword">of</span> arr)&#123;<br>  <span class="hljs-built_in">console</span>.log(item)<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h4 id="2-7-4-数组slice-concat-join"><a href="#2-7-4-数组slice-concat-join" class="headerlink" title="2.7.4 数组slice/concat/join"></a>2.7.4 数组slice/concat/join</h4><ul><li><p>slice方法</p><ul><li>截取数组，类似于字符串的slice方法</li><li>arr.slice([begin[, end]])  包含begin不包含end</li></ul></li><li><p>concat方法</p><ul><li>创建一个新数组，其中包含其他数组和其他项</li><li>arr.concat(value1[, value2[,…]])  value可以是数组或其他值</li></ul></li><li><p>join方法</p><ul><li>将一个数组连接成一个字符串并返回</li><li>arr.join([separator])</li></ul></li><li><p>toString</p><ul><li>将数组转化成字符串</li><li>arr.toString === arr.join()</li></ul></li><li><p>程序示例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><span class="hljs-comment">//slice方法[a, b),不会修改原数组,splice会修改原数组</span><br><span class="hljs-built_in">console</span>.log(arr.slice(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>), arr)  <span class="hljs-comment">//[2]</span><br><span class="hljs-comment">//concat方法</span><br><span class="hljs-built_in">console</span>.log(arr.concat(<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, [<span class="hljs-number">6</span>, <span class="hljs-number">7</span>]).concat(<span class="hljs-number">8</span>))  <span class="hljs-comment">//[1,2,3...8]</span><br><span class="hljs-comment">//join方法</span><br><span class="hljs-built_in">console</span>.log(arr.join(<span class="hljs-string">&quot;-&quot;</span>))  <span class="hljs-comment">//1-2-3</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="2-7-5-数组中查找元素"><a href="#2-7-5-数组中查找元素" class="headerlink" title="2.7.5 数组中查找元素"></a>2.7.5 数组中查找元素</h4><ul><li><p>arr.indexOf</p><ul><li>查找某个元素的索引</li><li>indexOf(searchElement[, fromIndex])</li><li>从formIndex找，没找到返回-1，也有lastIndexOf方法</li></ul></li><li><p>arr.includes</p><ul><li>判断数组是否包含某个元素</li><li>includes(valueToFind[, fromIndex])</li><li>从formIndex找，找到返回true，否则false</li></ul></li><li><p>find/findIndex（ES6新增）</p><ul><li>如果使用indexOf/includes来判断对象数组类型是做不了的，这时就需要find方法了</li><li>直接查找元素或元素的索引，高阶函数</li></ul></li><li><p>程序示例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>]<br><span class="hljs-comment">//查找方式一: indexOf/lastIndexOf</span><br><span class="hljs-built_in">console</span>.log(arr.indexOf(<span class="hljs-number">7</span>, <span class="hljs-number">1</span>))  <span class="hljs-comment">//-1</span><br><br><span class="hljs-comment">//查找方式二: includes</span><br><span class="hljs-built_in">console</span>.log(arr.includes(<span class="hljs-number">9</span>))<br><br><span class="hljs-keyword">var</span> student = [<br>  &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&quot;kygo&quot;</span>, <span class="hljs-attr">id</span>: <span class="hljs-number">100</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>&#125;,<br>  &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&quot;kygo1&quot;</span>, <span class="hljs-attr">id</span>: <span class="hljs-number">101</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">22</span>&#125;,<br>  &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&quot;kygo2&quot;</span>, <span class="hljs-attr">id</span>: <span class="hljs-number">102</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">60</span>&#125;<br>]<br><span class="hljs-comment">//查找方式三: find/findIndex</span><br><span class="hljs-comment">//findIndex和find完全相同,只是返回找到元素的索引</span><br><span class="hljs-keyword">var</span> findItem = student.find(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">item, index, arr</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> item.age === <span class="hljs-number">22</span><br>&#125;)<br><span class="hljs-built_in">console</span>.log(findItem)  <span class="hljs-comment">//&#123;name: &#x27;kygo1&#x27;, id: 101, age: 2&#125;</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="2-7-6-手动实现高阶函数"><a href="#2-7-6-手动实现高阶函数" class="headerlink" title="2.7.6 手动实现高阶函数"></a>2.7.6 手动实现高阶函数</h4><ul><li><p>forEach函数的实现</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 手动实现forEach高阶函数</span><br><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">2</span>, <span class="hljs-number">12</span>, <span class="hljs-number">32</span>]<br><span class="hljs-comment">// 版本一</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">kyForEach</span>(<span class="hljs-params">fn</span>)</span>&#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>    fn(arr[i], i, arr)<br>  &#125;<br>&#125;<br>kyForEach(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">item, index, arr</span>)</span>&#123;<br>  <span class="hljs-built_in">console</span>.log(item, index, arr)<br>&#125;)<br><span class="hljs-comment">// 版本二: 传入数组arr作为参数</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">kyForEach</span>(<span class="hljs-params">fn, arr</span>)</span>&#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>    fn(arr[i], i, arr)<br>  &#125;<br>&#125;<br>kyForEach(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">item, index, arr</span>)</span>&#123;<br>  <span class="hljs-built_in">console</span>.log(item, index, arr)<br>&#125;, arr)<br><span class="hljs-comment">// 版本三: 将函数加到arr对象上</span><br><span class="hljs-comment">// 缺点: 函数不通用,并且打印的arr种有kyForEach</span><br>arr.kyForEach = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">fn</span>)</span>&#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">this</span>.length; i++) &#123;<br>    fn(arr[i], i, <span class="hljs-built_in">this</span>)<br>  &#125;<br>&#125;<br>arr.kyForEach(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">item, index, arr</span>)</span>&#123;<br>  <span class="hljs-built_in">console</span>.log(item, index, arr)<br>&#125;)<br><br><span class="hljs-comment">//终极版本: 将方法绑定到Array.prototype上</span><br><span class="hljs-built_in">Array</span>.prototype.kyForEach = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">fn</span>)</span>&#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">this</span>.length; i++) &#123;<br>    fn(arr[i], i, <span class="hljs-built_in">this</span>)<br>  &#125;<br>&#125;<br><span class="hljs-comment">//所有数组都可调用,和原生forEach方法一模一样</span><br>arr.kyForEach(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">item, index, arr</span>)</span>&#123;<br>  <span class="hljs-built_in">console</span>.log(item, index, arr)<br>&#125;)<br></code></pre></td></tr></table></figure></li><li><p>find函数的实现</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> student = [<br>  &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&quot;kygo&quot;</span>, <span class="hljs-attr">id</span>: <span class="hljs-number">100</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>&#125;,<br>  &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&quot;kygo1&quot;</span>, <span class="hljs-attr">id</span>: <span class="hljs-number">101</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">22</span>&#125;,<br>  &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&quot;kygo2&quot;</span>, <span class="hljs-attr">id</span>: <span class="hljs-number">102</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">60</span>&#125;<br>]<br><br><span class="hljs-comment">// 手动实现find高阶函数</span><br><span class="hljs-built_in">Array</span>.prototype.kyFind = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">fn</span>) </span>&#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">this</span>.length; i++) &#123;<br>    <span class="hljs-keyword">if</span>(fn(<span class="hljs-built_in">this</span>[i], i, <span class="hljs-built_in">this</span>)) <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>[i]<br>  &#125;<br>&#125;<br><span class="hljs-keyword">var</span> result = arr.find(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">item</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> item === <span class="hljs-number">2</span><br>&#125;)<br><span class="hljs-keyword">var</span> result1 = student.find(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">item</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> item.id === <span class="hljs-number">101</span><br>&#125;)<br><span class="hljs-built_in">console</span>.log(result) <span class="hljs-comment">//2</span><br><span class="hljs-built_in">console</span>.log(result1)  <span class="hljs-comment">//&#123;name: &#x27;kygo1&#x27;, id: 101, age:22&#125;</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="2-7-7-数组的排序和反转"><a href="#2-7-7-数组的排序和反转" class="headerlink" title="2.7.7 数组的排序和反转"></a>2.7.7 数组的排序和反转</h4><ul><li><p>sort方法</p><ul><li>数组排序，返回排序后的新数组</li><li>sort([compareFunction])</li><li>规则：如果compareFunction(a, b)&gt;0，则a排在b后面，等于0顺序不变，小于0，a排b前面</li></ul></li><li><p>reverse方法</p><ul><li>反转数组元素并返回</li></ul></li><li><p>程序示例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//数组排序</span><br><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">12</span>, <span class="hljs-number">1</span>, <span class="hljs-number">100</span>, <span class="hljs-number">34</span>, <span class="hljs-number">21</span>, <span class="hljs-number">213</span>, <span class="hljs-number">78</span>]<br><span class="hljs-comment">//a - b &gt; 0 a排在b后面,所以是升序排列</span><br><span class="hljs-keyword">var</span> newArr = arr.sort(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">a, b</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> a - b<br>&#125;)<br><span class="hljs-built_in">console</span>.log(arr === newArr)  <span class="hljs-comment">//true</span><br><span class="hljs-built_in">console</span>.log(arr)  <span class="hljs-comment">//[1,12,21,34...]</span><br><br><span class="hljs-comment">//数组反转</span><br>arr.reverse()<br><span class="hljs-built_in">console</span>.log(arr)  <span class="hljs-comment">//[213,100,78,34...]</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="2-7-8-其他高阶函数的使用"><a href="#2-7-8-其他高阶函数的使用" class="headerlink" title="2.7.8 其他高阶函数的使用"></a>2.7.8 其他高阶函数的使用</h4><ul><li><p>arr.forEach</p><ul><li>遍历数组，让数组中的每个元素都执行一次对应方法</li></ul></li><li><p>arr.map</p><ul><li>创建一个新数组</li><li>这个新数组由原数组中的每个元素都调用一次提供的函数后的返回值组成</li></ul></li><li><p>arr.filter</p><ul><li>创建一个新数组</li><li>新数组中只包含每个元素调用函数返回为true的元素</li></ul></li><li><p>arr.reduce</p><ul><li>用于计算数组中所有元素的总和</li><li>对数组中的每个元素按序执行一个由您提供的 reducer 函数</li><li>每一次运行 reducer 会将先前元素的计算结果作为参数传入，最后将其结果汇总为单个返回值</li></ul></li><li><p>程序示例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br><span class="hljs-comment">//forEach方法: item等参数可按需求写</span><br><span class="hljs-comment">//this绑定的是window,可以传入第二个参数作为this绑定的对象</span><br>arr.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">item, index, arr</span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(item, <span class="hljs-built_in">this</span>) <span class="hljs-comment">//1 &#123;name: &quot;kygo&quot;&#125;...</span><br>&#125;, &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&quot;kygo&quot;</span>&#125;)<br><br><span class="hljs-comment">//map: 数组映射</span><br><span class="hljs-keyword">var</span> newArr1 = arr.map(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">item, index, arr</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> item * item<br>&#125;)<br><span class="hljs-built_in">console</span>.log(newArr1)  <span class="hljs-comment">//[1, 4, 9, 16]</span><br><br><span class="hljs-comment">//filter: 数组筛选</span><br><span class="hljs-keyword">var</span> newArr2 = arr.filter(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">item, index, arr</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> item % <span class="hljs-number">2</span> ===<span class="hljs-number">0</span>  <br>&#125;)<br><span class="hljs-built_in">console</span>.log(newArr2)  <span class="hljs-comment">//[2, 4]</span><br><br><span class="hljs-comment">//reduce(fun[, initial]): 求和,initial表示初始值</span><br><span class="hljs-comment">//pre-上次求和的值</span><br><span class="hljs-comment">//item-当前元素  index-当前索引</span><br><span class="hljs-comment">//注意: 不写初始值,默认初始值是第一个元素,index从1开始(第二个元素)累加</span><br><span class="hljs-keyword">var</span> result = arr.reduce(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">pre, item, index</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> pre + item<br>&#125;, <span class="hljs-number">100</span>)<br><span class="hljs-built_in">console</span>.log(result) <span class="hljs-comment">//10</span><br><br><span class="hljs-comment">//综合练习: 过滤所有偶数,映射所有偶数的平方,并且计算他们的和</span><br><span class="hljs-keyword">var</span> arr1 = [<span class="hljs-number">2</span>, <span class="hljs-number">11</span>, <span class="hljs-number">32</span>, <span class="hljs-number">47</span>, <span class="hljs-number">110</span>, <span class="hljs-number">231</span>]<br><span class="hljs-comment">//以下为链式写法</span><br><span class="hljs-keyword">var</span> res = arr1.filter(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">item</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> item % <span class="hljs-number">2</span> === <span class="hljs-number">0</span> <br>&#125;).map(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">item</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> item * item<br>&#125;).reduce(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">preValue, item</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> preValue + item<br>&#125;)<br><span class="hljs-built_in">console</span>.log(res)<br></code></pre></td></tr></table></figure></li></ul><h3 id="2-8-ES6类和对象"><a href="#2-8-ES6类和对象" class="headerlink" title="2.8 ES6类和对象"></a>2.8 ES6类和对象</h3><p>ES6开始，提供class关键字定义类</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span></span>&#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;cth&quot;</span>;age=<span class="hljs-number">21</span>;<span class="hljs-function"><span class="hljs-title">say</span>(<span class="hljs-params"></span>)</span>&#123;...&#125;;  <span class="hljs-comment">//直接添加实例属性和方法即可，不用加this</span><br>    <span class="hljs-keyword">static</span> num=<span class="hljs-number">666</span>;  <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-title">run</span>(<span class="hljs-params"></span>)</span>&#123;...&#125;; <span class="hljs-comment">//静态属性和方法, 通过类名调用</span><br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">myname,myage</span>)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name=myname....     <br>&#125;<br>&#125;<br><span class="hljs-comment">//当创建对象时,自动调用constructor()&#123;&#125;构造方法</span><br><span class="hljs-keyword">let</span> per=<span class="hljs-keyword">new</span> Person(“cth”,<span class="hljs-number">21</span>)  <br></code></pre></td></tr></table></figure><p>注意点：直接添加实例属性，大部分浏览器不支持</p><p>​                在ES6标准中添加实例属性需要在constructor中添加</p><p>​                静态属性大部分浏览器不支持static定义(类名.属性定义)</p><p>​                支持static定义静态方法</p><p>在class中直接添加的方法会添加到对象的原型中</p><p>如果想在class上添加方法，必须也写到constructor中</p><p>总结：class写在constructor中的方法都会保存在当前对象中</p><p>写在constructor外面的方法都会保存在原型对象</p><p>(ES6之前有两种给原型添加属性/方法-动态添加或自定义对象添加)</p><p>通过class定义类，当往原型中添加属性和方法时</p><p>不能自定义原型对象添加，只能动态的给原型添加属性和方法</p><p><strong>ES6继承</strong></p><p>​    extends 关键字  super(参数) 通过super调用父类构造函数并传递参数</p><p><strong>获取对象类型</strong></p><p>​    想知道对象通过什么构造函数创建的，一个对象的真实类型</p><p>​    通过 对象.constructor.name  获取构造函数名称</p><ul><li><strong>instanceof</strong> 关键字</li></ul><p>​    用于判断”对象”是否是指定构造函数(类)的“实例”</p><p>​     per instanceof person  //判断per是否是person实例</p><p>​     注意：只要构造函数的原型对象出现在实例对象的原型链中都会返回true</p><p>​     (所有对象都是Object的实例)</p><ul><li>isPrototypeOf属性</li></ul><p>​    用于判断一个对象是否是另一个对象的原型</p><p>​     Person.prototype.isPrototypeOf(p);  //返回true，是p的原型对象</p><p>​     注意点：只要原型对象是在实例对象的原型链中的，都会返回true</p><ul><li><p>in 判断对象属性</p><p> “name” in per  //判断per对象类中或其原型中是否有name属性</p></li></ul><p>​           只要有就会返回true</p><p>   per.hasOwnProperty(“name”);  //只会在对象中查找，不会去查找原型</p><p>-2021.4.4  </p><ul><li>对象增删改查</li></ul><p>​    可以通过[“”]来操作属性和方法</p><p>增：p.name=”cth” p[“name”]=”cth”</p><p>​      p.say=function(){…}  p[“say”]=function(){…}</p><p>​    删：delete p.name;  delete p[“name”];  delete p.say;  delete p[“say”];</p><p>​    改：p.name / p[“name”]=”wcr”  p.say/p[“say”]=function(){} </p><p>​    查：就是调用属性和方法 p.name/p[“name”]  p.say()/p<a href="">“say”</a></p><ul><li>对象的遍历</li></ul><p>就是依次取出对象中所有的属性和方法</p><p>​    for(let key in obj){}  //将对象所有属性方法取出赋值给key这个变量</p><p>​    通过obj[key]取出 不能通过obj.key</p><ul><li>对象解构赋值</li></ul><p>对象结构赋值- {}</p><p>​     obj={name: “cth” , age=21};</p><p>​     let {name,age}=obj;  //除了{}和数组[]不一样,也可使用…</p><p>​     不同：左边的变量名称必须和对象属性名称一致才能解构出来</p><p>​     应用场景：可以直接将对象和数组通过实参传给函数</p><p>​          在形参处用结构赋值接收</p><p>​     let obj={name: “cth”,age=21}  </p><p>​     function say({name,age}){console.log(name,age)}  say(obj);</p><ul><li>深拷贝和浅拷贝</li></ul><p>深拷贝-修改新变量的值不会影响原变量值-基本数据类型都是(栈内存)</p><p>浅拷贝-修改新变量值会影响原来值-引用类型都是浅拷贝(堆内存)</p><p>对象的深拷贝：</p><p>Object.assign(p2,p1);  //将p1对象的属性和方法拷贝到对象p2中</p><p>当p1对象中有引用类型时，以上方法将不能实现深拷贝</p><p>自定义深拷贝函数实现</p><ul><li>this总结</li></ul><p>*以函数形式调用时，this永远都是window</p><p>*以方法的形式调用时，this是调用方法的对象</p><p>*以构造函数的形式调用时，this是新创建的对象</p><p>*使用call和apply调用时，this是指定的那个对象</p><h3 id="2-9-其他"><a href="#2-9-其他" class="headerlink" title="2.9 其他"></a>2.9 其他</h3><h4 id="2-9-1-数组高级API"><a href="#2-9-1-数组高级API" class="headerlink" title="2.9.1 数组高级API"></a>2.9.1 数组高级API</h4><p>​    ****遍历数组****：传统方法、for-in循环(数组也是对象)</p><p>​          for(let key in arr){arr[key];}</p><p>​    不推荐for-in遍历数组，因为其是专门遍历对象的(对象属性无序)</p><p>​    推荐利用ES6中的 for-of 循环来遍历数组</p><p>​       for(let value of arr){console.log(value)};</p><p>​    还可以使用Array对象的forEach方法来遍历数组</p><p>​       arr.forEach(function(currentValue,currentIndex,currentArray){…})</p><p>​       传入一个函数，自动传入参数：数组值，索引，当前数组</p><p>​    <em><strong>*数组查找*</strong></em></p><p>​      findIndex方法：定制版的indexOf，找到返回索引，找不到返回-1</p><p>​             arr.findIndex(function(,,){}) //传入一个函数，三个参数</p><p>​      find方法：find方法返回找到的元素(也接收三个参数)</p><p>​      (注意：判断特定筛选条件时/return true;)</p><p>​    <em><strong>*数组过滤和数组映射*</strong></em></p><p>​      filter方法：将满足条件的元素添加到一个新数组中</p><p>​           (例: if(value%2){return true} 返回数组-所有偶数封装的)</p><p>​      map方法：</p><p>​           将满足条件的元素映射到一个新的数组中</p><p>​           (映射：创建一个相同大小的数组,将所有元素值设置undefined</p><p>​           满足条件的元素将undefined覆盖,不满足的还是undefined)</p><p>​      注意:方法都是传递一个函数为参数，且这个函数传递三个参数value/index/arr</p><p>​                                   -2021.4.5</p><p>​    <em><strong>*数组排序*</strong></em></p><p>​    arr.sort();  //接收一个函数，函数又可以接收两个参数</p><p>​        arr.sort(function(a,b){  //默认升序</p><p>  if(a&gt;b){return 1}  //return -1 就是降序</p><p>  else if(a&lt;b){return -1;}  //return 1就是降序</p><p>  else{return 0;}  //这个不用变</p><p>})</p><p>​        规律：如果数组是字母可以以上方法</p><p>​           如果是数值类型，那么升序返回a-b,降序返回b-a</p><p>​           arr.sort(function(a,b){return a-b})  //升序，b-a降序</p><p>​           对字符串长短进行排序：如 [“qwe”,”a”,”qwer”…]</p><p>​           arr.sort(function(str1,str2){return str1.length-str2.length})</p><p>​           //以上是升序，降序相反  (字符串相当于一个数组可以length) </p><h4 id="2-9-2-字符串常用方法"><a href="#2-9-2-字符串常用方法" class="headerlink" title="2.9.2 字符串常用方法"></a>2.9.2 字符串常用方法</h4><p>在底层字符串是以字符数组的形式保存的  如 [‘h’,’e’,’l’,’l’,’o’]</p><p>可以像操作数组一样str[index]，也可以使用数组的大部分方法</p><p>​    *获取字符串长度  str.length</p><p>​    *获取某个字符   str[index]  str.charAt(index) </p><p>​       区别：str[] 只有高级浏览器才支持，而charAt()没有兼容性问题</p><p>​    *字符串查找  indexOf / lastIndexOf / includes</p><p>​       和数组一样，但要加” ”  如：str.indexOf(“c”) //检查字符”c”</p><p>​    *字符串的拼接 concat / +</p><p>​       str1 + str2  str1.concat(str2)  //推荐使用+</p><p>​    *获取子串  slice / substring / substr</p><p>​       substring(a,b)和slice()功能一样，包前不包后，推荐substring()</p><p>​       substr(a,b)  //从索引为a开始，截取b个字符</p><p>   Other</p><p>​     *字符串切割</p><p>​       str.split(“-”)  //利用-来切割字符串，和arr.join(“-”);相反</p><p>​     *判断是否以指定字符串开头ES6</p><p>​       str.startsWith(“www”); //判断是否以”www”开头</p><p>​     *判断是否以指定字符串结尾ES6  str.endsWith(“”);</p><p>​     *字符串模板ES6</p><p>​       let str=<code>;  //除了”” ‘’ 定义字符串，还可以</code></p><p>​       作用：当html代码需要保存在字符串中，用``不用+拼接</p><p>​          console.log(“我的名字”+cth+”,年龄”+age);</p><p>​         =&gt;console.log(<code>我的名字$&#123;cth&#125;,年龄$&#123;age&#125;</code>);  </p><p>​            2021.4.6</p><h4 id="2-9-3-基本包装类型"><a href="#2-9-3-基本包装类型" class="headerlink" title="2.9.3 基本包装类型"></a>2.9.3 基本包装类型</h4><p>​    基本数据类型变量 没有属性和方法</p><p>​    对象类型 有属性和方法</p><p>​       能访问基本数据类型的属性和方法，因为运行时系统将其包装为对象类型</p><p>​       String() Number() Boolean()</p><h4 id="2-9-4-三大对象"><a href="#2-9-4-三大对象" class="headerlink" title="2.9.4 三大对象"></a>2.9.4 三大对象</h4><p>​    JS提供的三种自带对象：本地对象/内置对象/宿主对象</p><p>​    宿主：JS运行环境</p><p>​       本地对象：与宿主无关，ES标准定义的类(构造函数)</p><p>​            使用时需手动new创建</p><p>​            如：Boolean Number String Array Function Object Date RegExp等</p><p>​       内置对象：与宿主无关，ES已经帮我们创建好的对象</p><p>​            无需手动new  如：Global(全局对象不用关注) Math JSON</p><p>​       宿主对象：浏览器提供的对象</p><p>​            Window Document等</p><p>​            所有BOM和DOM都属于宿主对象</p><h2 id="3-JS代码规范和浏览器调试技巧"><a href="#3-JS代码规范和浏览器调试技巧" class="headerlink" title="3. JS代码规范和浏览器调试技巧"></a>3. JS代码规范和浏览器调试技巧</h2><h3 id="3-1-代码规范"><a href="#3-1-代码规范" class="headerlink" title="3.1 代码规范"></a>3.1 代码规范</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">pow</span>(<span class="hljs-params">x, n</span>) </span>&#123;  <span class="hljs-comment">//1. 多个参数,后面留空格 开花括号&#123;不单独起一行且前面留空</span><br>  <span class="hljs-keyword">var</span> result = <span class="hljs-number">1</span>  <span class="hljs-comment">//2. 操作符左右两边留空格</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;  <span class="hljs-comment">//3. 循环语句;后面留空格</span><br>    result *= x  <span class="hljs-comment">//4. 代码缩进两个空格</span><br>  &#125;<br>  <span class="hljs-keyword">return</span> result;  <span class="hljs-comment">//5. 分号可加可不加,但是在必要时必须加,如立即执行函数前面</span><br>&#125;<br><br><span class="hljs-keyword">var</span> x = prompt(<span class="hljs-string">&quot;请输入x&quot;</span>)  <span class="hljs-comment">//6. 不同功能代码块之间空行</span><br><span class="hljs-keyword">var</span> n = prompt(<span class="hljs-string">&quot;请输入n&quot;</span>)<br><br><span class="hljs-keyword">if</span> (n &gt; <span class="hljs-number">0</span>) &#123;  <span class="hljs-comment">//7. for/if/while后面跟空格</span><br>  <span class="hljs-built_in">console</span>.log(pow(x, n))  <span class="hljs-comment">//8. 函数多个参数传参,后面跟空格</span><br>&#125; <span class="hljs-keyword">else</span> &#123;  <span class="hljs-comment">//9. &quot;&#125; else &#123;&quot; 在同一行显示</span><br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`pow函数不支持小于0的数,你输入的n小于0,</span><br><span class="hljs-string">  请输入大于等于0的数`</span>)  <span class="hljs-comment">//10. 一行不能太长</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-2-浏览器调试技巧"><a href="#3-2-浏览器调试技巧" class="headerlink" title="3.2 浏览器调试技巧"></a>3.2 浏览器调试技巧</h3><ul><li><p>debug的认识</p><ul><li>终极技巧：debug</li><li>当代码出问题的时候，可以通过debug找出bug</li><li>浏览器实现debug就是打断点</li></ul></li><li><p>浏览器的debug</p><ul><li><p>debug过程解析</p><p><img src="../../public/img/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7%E4%B8%80.png"></p></li><li><p>右侧工具栏的作用</p><p><img src="../../public/img/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7%E4%BA%8C.png"></p></li><li><p>右下侧工具栏</p><p><img src="../../public/img/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7%E4%B8%89.png"></p></li></ul></li><li><p>代码中的debugger</p><ul><li><p>代码中写上debugger和浏览器中打断点效果是一样的，程序都会停在那个地方</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;循环前&quot;</span>)<br><span class="hljs-keyword">var</span> result = <span class="hljs-number">0</span><br><br><span class="hljs-keyword">debugger</span>  <span class="hljs-comment">//debugger标识符就是在代码中打断点的方式</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params"></span>)</span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;foo执行啦&quot;</span>)<br>&#125;<br>foo()<br></code></pre></td></tr></table></figure></li></ul></li></ul><h2 id="4-DOM"><a href="#4-DOM" class="headerlink" title="4. DOM"></a>4. DOM</h2><h3 id="4-1-初识DOM"><a href="#4-1-初识DOM" class="headerlink" title="4.1 初识DOM"></a>4.1 初识DOM</h3><h4 id="4-1-1-认识DOM和BOM"><a href="#4-1-1-认识DOM和BOM" class="headerlink" title="4.1.1 认识DOM和BOM"></a>4.1.1 认识DOM和BOM</h4><ul><li>作用<ul><li>前面学习的ECMAScript是JS的基本语法部分，不涉及对网页和浏览器的操作</li><li>DOM和BOM是浏览器提供给开发者去操作页面和浏览器的API</li></ul></li><li>位置：全局Window对象中除了Array、Date等，还有DOM和BOM</li><li>概念<ul><li>DOM<ul><li>文档对象模型（Document Object Model），简称DOM</li><li>将页面所有的内容表示成可以修改的对象</li></ul></li><li>BOM<ul><li>浏览器对象模型（Browser Object Model）</li><li>用于处理文档之外的所有其他内容的对象，如：navigator、location、history</li></ul></li></ul></li><li>深入理解DOM<ul><li>浏览器考虑到我们会通过js操作页面的元素，所以将所有的元素抽象成了对象</li><li>整个文档被抽象到Document对象中 （如：通过Document.head/body就可拿到head/body元素）<ul><li>如：document.body.style.backgroundColor = “red” 就会让整个页面背景变成红色</li></ul></li><li>所以学习DOM，就是学习怎样通过JS对文档进行操作</li></ul></li></ul><h4 id="4-1-2-DOM-Tree"><a href="#4-1-2-DOM-Tree" class="headerlink" title="4.1.2 DOM Tree"></a>4.1.2 DOM Tree</h4><ul><li>html结构中最终会形成一个树结构</li><li>在抽象成DOM对象的时候也会形成一个树结构-DOM Tree</li></ul><h4 id="4-1-3-DOM的学习顺序"><a href="#4-1-3-DOM的学习顺序" class="headerlink" title="4.1.3 DOM的学习顺序"></a>4.1.3 DOM的学习顺序</h4><ul><li>DOM的API非常多，会按照如下顺序学习<ul><li>DOM元素之间的关系</li><li>获取DOM元素</li><li>DOM节点的type、tag、content</li><li>DOM节点的attributes、properies</li><li>DOM节点的创建、插入、克隆、删除</li><li>DOM节点的样式、类</li><li>DOM元素/Window的大小、滚动、坐标</li></ul></li></ul><h4 id="4-1-4-DOM的继承关系"><a href="#4-1-4-DOM的继承关系" class="headerlink" title="4.1.4 DOM的继承关系"></a>4.1.4 DOM的继承关系</h4><ul><li><p>DOM相当于是JavaScript和HTML/CSS之间沟通的桥梁</p><ul><li>通过浏览器提供的DOM API，可以对元素及其内容做任何操作</li></ul></li><li><p>DOM的继承关系图</p><p><img src="../../public/img/DOM%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB%E5%9B%BE.png"></p></li></ul><h4 id="4-1-5-document对象"><a href="#4-1-5-document对象" class="headerlink" title="4.1.5 document对象"></a>4.1.5 document对象</h4><ul><li><p>Document节点表示整个载入的网页，它的实例是全局的document对象</p><ul><li>对DOM的所有操作都是从document对象开始的</li><li>它是DOM的入口点，可以从document开始去访问任何节点元素</li></ul></li><li><p>对于最顶层的html、head、body元素，我们可以直接在document对象中获取到</p><ul><li><p>html元素 - document.documentElement</p></li><li><p>body/head元素 - document.body/head</p></li><li><p>文档声明 - document.doctype</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> htmlEl = <span class="hljs-built_in">document</span>.documentElement<br><span class="hljs-keyword">var</span> headEl = <span class="hljs-built_in">document</span>.head<br><span class="hljs-keyword">var</span> bodyEl = <span class="hljs-built_in">document</span>.body<br><span class="hljs-keyword">var</span> docEl = <span class="hljs-built_in">document</span>.doctype<br><span class="hljs-built_in">console</span>.log(htmlEl, headEl, bodyEl, docEl)  <span class="hljs-comment">//html/head/body/docType</span><br></code></pre></td></tr></table></figure></li></ul></li></ul><h3 id="4-2-导航"><a href="#4-2-导航" class="headerlink" title="4.2 导航"></a>4.2 导航</h3><h4 id="4-2-1-节点之间的导航"><a href="#4-2-1-节点之间的导航" class="headerlink" title="4.2.1 节点之间的导航"></a>4.2.1 节点之间的导航</h4><ul><li><p>什么是节点之间的导航</p><ul><li>当获取到一个节点后，根据这个节点获取其他的结点</li><li>注意：结点包括元素、注释、空行、文本等都属于节点</li></ul></li><li><p>节点之间存在的关系</p><ul><li>父节点：parentNode</li><li>前兄弟节点：previousSibling</li><li>后兄弟节点：nextSibing</li><li>子节点：childNodes</li><li>第一个子节点：firstChild</li><li>最后一个子节点：lastChild</li></ul></li><li><p>代码示例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 我是注释 --&gt;</span><br>  嘿嘿嘿<br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我是段落哈哈哈哈<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">var</span> bodyEl = <span class="hljs-built_in">document</span>.body</span><br><span class="javascript">  <span class="hljs-keyword">var</span> childNodes = bodyEl.childNodes  <span class="hljs-comment">//获取所有子节点</span></span><br><span class="javascript">  <span class="hljs-built_in">console</span>.log(childNodes)  <span class="hljs-comment">//[text, comment, text, div.box, text, script]</span></span><br><span class="javascript">  <span class="hljs-keyword">var</span> boxEl = childNodes[<span class="hljs-number">2</span>].nextSibling</span><br><span class="javascript">  <span class="hljs-keyword">var</span> pEl = boxEl.firstChild</span><br><span class="javascript">  <span class="hljs-keyword">var</span> boxEl1 = pEl.parentNode</span><br><span class="javascript">  <span class="hljs-built_in">console</span>.log(boxEl, boxEl1, pEl)  <span class="hljs-comment">//div.box div.box #text</span></span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="4-2-2-元素之间的导航"><a href="#4-2-2-元素之间的导航" class="headerlink" title="4.2.2 元素之间的导航"></a>4.2.2 元素之间的导航</h4><ul><li><p>什么是元素之间的导航</p><ul><li>同理，通过一个元素获取到其他元素</li></ul></li><li><p>元素之间存在的关系</p><ul><li>父元素：parentElement</li><li>前兄弟元素：previousElementSibling</li><li>后兄弟元素：nextElementSibing</li><li>子元素：children</li><li>第一个子元素：firstElementChild</li><li>最后一个子元素：lastElementChild</li></ul></li><li><p>代码示例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html">哈哈哈哈<br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>我是标题<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我是段落<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">var</span> bodyEl = <span class="hljs-built_in">document</span>.body</span><br><span class="javascript">  childEls = bodyEl.children  <span class="hljs-comment">//获取body中所有子元素</span></span><br><span class="javascript">  <span class="hljs-built_in">console</span>.log(childEls)  <span class="hljs-comment">//[h1, div.box, script]</span></span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">var</span> scriptEl = bodyEl.lastElementChild</span><br><span class="javascript">  <span class="hljs-keyword">var</span> boxEl = scriptEl.previousElementSibling</span><br><span class="javascript">  <span class="hljs-keyword">var</span> boxEl1 = boxEl.lastElementChild.parentElement</span><br><span class="javascript">  <span class="hljs-built_in">console</span>.log(scriptEl, boxEl, boxEl)  <span class="hljs-comment">//&lt;script&gt; &lt;div&gt; &lt;div&gt;</span></span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="4-2-3-table元素之间的导航"><a href="#4-2-3-table元素之间的导航" class="headerlink" title="4.2.3 table元素之间的导航"></a>4.2.3 table元素之间的导航</h4><ul><li><p>table元素支持以下属性（除了上面给出的）</p><ul><li>table.rows    tr元素集合</li><li>table.caption/tHead/tBodies/tFoot    </li></ul></li><li><p>thead/tbody/tfoot元素提供了rows属性</p><ul><li>tbody.rows</li></ul></li><li><p>tr元素</p><ul><li>tr.cells    给定的tr中td和th的集合</li><li>tr.sectionRowIndex/tr.rowIndex    tr在thead/tbody/tfoot中的位置、整个表格中的位置</li></ul></li><li><p>td和th元素</p><ul><li>td.cellIndex    封闭的tr中单元格的编号</li></ul></li><li><p>代码示例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> tableEl = <span class="hljs-built_in">document</span>.body.children[<span class="hljs-number">0</span>] <span class="hljs-comment">//as HTMLTableElement</span><br><span class="hljs-keyword">var</span> rows = tableEl.rows  <span class="hljs-comment">//获取所有tr</span><br><span class="hljs-keyword">var</span> theadEl = tableEl.tHead  <span class="hljs-comment">//获取tHead</span><br><span class="hljs-keyword">var</span> tbodyEl = tableEl.tBody  <span class="hljs-comment">//获取tBody</span><br><span class="hljs-keyword">var</span> thRowEl = theadEl.rows  <span class="hljs-comment">//通过tHead获取其中的row</span><br><span class="hljs-keyword">var</span> thsEl = rows[<span class="hljs-number">0</span>].cells  <span class="hljs-comment">//获取th</span><br><span class="hljs-keyword">var</span> rowIndex = rows[<span class="hljs-number">2</span>].rowIndex  <span class="hljs-comment">//获取row是第几个row</span><br><span class="hljs-keyword">var</span> tdIndex = rows[<span class="hljs-number">2</span>].cells[<span class="hljs-number">1</span>].cellIndex  <span class="hljs-comment">//获取td是第几个</span><br><span class="hljs-comment">//&lt;tbale&gt; [tr,tr,tr] true [th,th,th] 2 1</span><br><span class="hljs-built_in">console</span>.log(tableEl, rows, thRowEl[<span class="hljs-number">0</span>] === rows[<span class="hljs-number">0</span>], thsEl, rowIndex, tdIndex)  <br></code></pre></td></tr></table></figure></li></ul><h4 id="4-2-4-form元素之间的导航"><a href="#4-2-4-form元素之间的导航" class="headerlink" title="4.2.4 form元素之间的导航"></a>4.2.4 form元素之间的导航</h4><ul><li><p>form元素可通过ducument来获取：document.forms</p></li><li><p>form元素中的内容可通过elements来获取：form.elements</p></li><li><p>可以通过表单子元素的name属性来获取：elements.password</p></li><li><p>代码示例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;id&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">var</span> formEl = <span class="hljs-built_in">document</span>.forms[<span class="hljs-number">0</span>]</span><br><span class="javascript">  <span class="hljs-keyword">var</span> formAllEl = formEl.elements</span><br><span class="javascript">  <span class="hljs-keyword">var</span> idInputEl = formAllEl.id</span><br><span class="javascript">  <span class="hljs-keyword">var</span> passwordEl = formAllEl.password</span><br><span class="javascript">  <span class="hljs-comment">//result: [input, input, id:input, password:input] </span></span><br><span class="javascript">  <span class="hljs-comment">//&lt;input name=&quot;id&quot;&gt;&lt;/input&gt; &lt;input name=&quot;password&quot;&gt;&lt;/input&gt;</span></span><br><span class="javascript">  <span class="hljs-built_in">console</span>.log(formAllEl, idInputEl, passwordEl)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="4-3-获取任意元素的方法"><a href="#4-3-获取任意元素的方法" class="headerlink" title="4.3 获取任意元素的方法"></a>4.3 获取任意元素的方法</h3><ul><li><p>DOM导航属性只适用于元素之间相邻或相近时（层级太多写起来不方便）</p></li><li><p>DOM为我们提供了以下可以任意获取元素的方法</p><ul><li>querySelector/querySeletorAll<ul><li>通过选择器查找元素，开发最常用</li></ul></li><li>getElementById/getElementsByClassName<ul><li>通过id/class查找元素，有时候用（适配低版本浏览器）</li></ul></li><li>getElementsByName/getElementsByTagName<ul><li>通过name属性、标签名获取（用得很少，了解）</li></ul></li></ul></li><li><p>是否能在元素上使用，是否实时（了解）</p><ul><li>query、ByClass、TagName可以在元素上使用<ul><li>可以通过元素.的方法调用，在其子元素中查询</li></ul></li><li>ByName、ByTagName、ByClassName支持实时更新<ul><li>元素属性先输出，再修改，也会输出最新的</li></ul></li></ul></li><li><p>代码示例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span>我是box<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">var</span> boxEl = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;.box&quot;</span>)  <span class="hljs-comment">//找到第一个满足条件的就返回</span></span><br><span class="javascript">  <span class="hljs-keyword">var</span> boxEl1 = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">&quot;.box&quot;</span>)[<span class="hljs-number">0</span>]</span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">var</span> boxEl2 = <span class="hljs-built_in">document</span>.getElementsByClassName(<span class="hljs-string">&quot;box&quot;</span>)[<span class="hljs-number">0</span>]</span><br><span class="javascript">  <span class="hljs-keyword">var</span> boxEl3 = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;box&quot;</span>)</span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">var</span> boxEl4 = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&quot;div&quot;</span>)[<span class="hljs-number">0</span>]</span><br><span class="javascript">  <span class="hljs-keyword">var</span> inputEl = <span class="hljs-built_in">document</span>.getElementsByName(<span class="hljs-string">&quot;password&quot;</span>)</span><br><span class="javascript">  <span class="hljs-comment">//以下结果都是true</span></span><br><span class="javascript">  <span class="hljs-built_in">console</span>.log(boxEl === boxEl1)</span><br><span class="javascript">  <span class="hljs-built_in">console</span>.log(boxEl1 === boxEl2)</span><br><span class="javascript">  <span class="hljs-built_in">console</span>.log(boxEl2 === boxEl3)</span><br><span class="javascript">  <span class="hljs-built_in">console</span>.log(boxEl3 ===boxEl4)</span><br><span class="javascript">  <span class="hljs-built_in">console</span>.log(inputEl)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="4-4-node节点常见属性"><a href="#4-4-node节点常见属性" class="headerlink" title="4.4 node节点常见属性"></a>4.4 node节点常见属性</h3><ul><li><p>主要讨论节点共有的属性</p></li><li><p>nodeType属性</p><ul><li>作用：获取节点的类型，返回的是数值类型</li><li>常见结点类型<ul><li>Node.ELEMENT_NODE  1  元素节点</li><li>Node.TEXT_NODE  3  文本节点</li><li>Node.COMMENT_NODE  8  注释节点</li><li>Node.DOCUMENT_NODE  9  文档节点</li><li>Node.DOCUMENT_TYPE_NODE  10  文档类型节点</li></ul></li></ul></li><li><p>nodeName、tagName属性</p><ul><li>作用：用于获取node节点的名字，元素的标签名</li><li>不同<ul><li>tagName只适用于Element元素节点</li><li>nodeName使用于任意节点</li></ul></li></ul></li><li><p>innerHTML、textContent属性</p><ul><li>innerHTML属性<ul><li>可以获取元素中的所有内容，包括HTML，以字符串形式返回</li><li>可以设置元素的内容（如果有HTML会解析）</li></ul></li><li>textContent属性<ul><li>仅仅获取元素中的文本内容（设置内容时不会解析HTML）</li></ul></li><li>outerHTML属性<ul><li>包含了元素本身的完整HTML</li></ul></li></ul></li><li><p>data/nodeValue</p><ul><li>用于获取非元素节点的文本内容（如：注释、文本）</li></ul></li><li><p>其他属性</p><ul><li>hidden属性：全局属性，设置元素的显示隐藏</li><li>value（表单元素）、href（a）、id（所有元素的attribute值）</li></ul></li><li><p>代码示例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 注释 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><br>  我是box<br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我是段落<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span>显示/隐藏<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="handlebars"><span class="xml"></span></span><br><span class="xml"><span class="handlebars">  var bodyEl = document.body</span></span><br><span class="xml"><span class="handlebars">  //节点类型nodeType</span></span><br><span class="xml"><span class="handlebars">  var allNodeEl = bodyEl.childNodes</span></span><br><span class="xml"><span class="handlebars">  //3#text 8<span class="hljs-comment">&lt;!--注释--&gt;</span> 3#text 1<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span> 3#text 1<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="javascript"><span class="xml"><span class="handlebars">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> item <span class="hljs-keyword">of</span> allNodeEl)&#123;</span></span></span><br><span class="javascript"><span class="xml"><span class="handlebars">    <span class="hljs-built_in">console</span>.log(item.nodeType, item)</span></span></span><br><span class="javascript"><span class="xml"><span class="handlebars">  &#125;</span></span></span><br><span class="javascript"><span class="xml"><span class="handlebars"></span></span></span><br><span class="javascript"><span class="xml"><span class="handlebars">  <span class="hljs-comment">//nodeName/tagName</span></span></span></span><br><span class="javascript"><span class="xml"><span class="handlebars">  <span class="hljs-built_in">console</span>.log(bodyEl.childNodes[<span class="hljs-number">0</span>].nodeName)  <span class="hljs-comment">//#text</span></span></span></span><br><span class="javascript"><span class="xml"><span class="handlebars">  <span class="hljs-built_in">console</span>.log(bodyEl.childNodes[<span class="hljs-number">0</span>].tagName)  <span class="hljs-comment">//undefined</span></span></span></span><br><span class="javascript"><span class="xml"><span class="handlebars"></span></span></span><br><span class="javascript"><span class="xml"><span class="handlebars">  <span class="hljs-built_in">console</span>.log(bodyEl.childNodes[<span class="hljs-number">3</span>].nodeName)  <span class="hljs-comment">//DIV</span></span></span></span><br><span class="javascript"><span class="xml"><span class="handlebars">  <span class="hljs-built_in">console</span>.log(bodyEl.childNodes[<span class="hljs-number">3</span>].tagName)  <span class="hljs-comment">//DIV</span></span></span></span><br><span class="javascript"><span class="xml"><span class="handlebars"></span></span></span><br><span class="javascript"><span class="xml"><span class="handlebars">  <span class="hljs-comment">//innerHTML/textContent/outerHTML</span></span></span></span><br><span class="javascript"><span class="xml"><span class="handlebars">  <span class="hljs-keyword">var</span> boxEl = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;.box&quot;</span>)</span></span></span><br><span class="javascript"><span class="xml"><span class="handlebars">  <span class="hljs-built_in">console</span>.log(boxEl.innerHTML)  <span class="hljs-comment">//我是box&lt;p&gt;我是段落&lt;p&gt;</span></span></span></span><br><span class="javascript"><span class="xml"><span class="handlebars">  <span class="hljs-comment">//&lt;div class=&quot;box&quot;&gt;我是box&lt;p&gt;我是段落&lt;p&gt;&lt;div&gt;</span></span></span></span><br><span class="javascript"><span class="xml"><span class="handlebars">  <span class="hljs-built_in">console</span>.log(boxEl.outerHTML)  </span></span></span><br><span class="javascript"><span class="xml"><span class="handlebars">  <span class="hljs-built_in">console</span>.log(boxEl.textContent)  <span class="hljs-comment">//我是box 我是段落</span></span></span></span><br><span class="javascript"><span class="xml"><span class="handlebars">  boxEl.innerHTML=<span class="hljs-string">&quot;&lt;h1&gt;我是box中的h1&lt;/h1&gt;&quot;</span></span></span></span><br><span class="javascript"><span class="xml"><span class="handlebars"></span></span></span><br><span class="javascript"><span class="xml"><span class="handlebars"></span></span></span><br><span class="javascript"><span class="xml"><span class="handlebars">  <span class="hljs-comment">//data/nodeValue</span></span></span></span><br><span class="javascript"><span class="xml"><span class="handlebars">  <span class="hljs-built_in">console</span>.log(allNodeEl[<span class="hljs-number">1</span>].nodeValue)  <span class="hljs-comment">//注释</span></span></span></span><br><span class="javascript"><span class="xml"><span class="handlebars">  <span class="hljs-built_in">console</span>.log(allNodeEl[<span class="hljs-number">1</span>].data)  <span class="hljs-comment">//注释</span></span></span></span><br><span class="javascript"><span class="xml"><span class="handlebars"></span></span></span><br><span class="javascript"><span class="xml"><span class="handlebars">  <span class="hljs-comment">//显示和隐藏box</span></span></span></span><br><span class="javascript"><span class="xml"><span class="handlebars">  <span class="hljs-keyword">var</span> btnEl = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;.btn&quot;</span>)</span></span></span><br><span class="javascript"><span class="xml"><span class="handlebars">  btnEl.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span></span></span><br><span class="javascript"><span class="xml"><span class="handlebars">    boxEl.hidden = !boxEl.hidden </span></span></span><br><span class="javascript"><span class="xml"><span class="handlebars">  &#125;</span></span></span><br><span class="javascript"><span class="xml"><span class="handlebars"></span></span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="4-5-元素"><a href="#4-5-元素" class="headerlink" title="4.5 元素"></a>4.5 元素</h3><h4 id="4-5-0-元素属性和特征的基本认识"><a href="#4-5-0-元素属性和特征的基本认识" class="headerlink" title="4.5.0 元素属性和特征的基本认识"></a>4.5.0 元素属性和特征的基本认识</h4><ul><li>一个元素除了有开始标签、结束标签、内容，还有很多的属性（attribute）</li><li>浏览器在解析HTML元素时，会将对应的attribute也创建出来放到元素上<ul><li>如元素的id、class就是全局的attribute，对象上有对应的id、class属性</li><li>href属性是针对于a元素的，value和type是针对于input元素的</li></ul></li><li>属性和特征的区分<ul><li>通常我们将html元素上加的属性叫做特征-attribute</li><li>在元素对象中封装的属性叫做-property</li></ul></li></ul><h4 id="4-5-1-元素的特征attribute"><a href="#4-5-1-元素的特征attribute" class="headerlink" title="4.5.1 元素的特征attribute"></a>4.5.1 元素的特征attribute</h4><ul><li><p>分类</p><ul><li>标准attribute<ul><li>原本存在的浏览器提供的元素attribute，如：id、class、style</li></ul></li><li>非标准attribute<ul><li>自定义的attribute，如age、height</li></ul></li></ul></li><li><p>attribute的操作</p><ul><li>elem.hasAttribute(name)  检查特征是否存在</li><li>elem.getAttribute(name)  获取特征值</li><li>elem.setAttribute(name, value)  设置特征值</li><li>elem.removeAttribute(name)  移除特征</li><li>attributes  元素的所有属性的集合</li></ul></li><li><p>attribute特征</p><ul><li>名字的大小写不敏感（id和ID获取是一样的）</li><li>获取到的值总是字符串类型（如checked获取到的是空字符串）</li></ul></li><li><p>代码示例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- class就是标准attribute, height/name就是非标准attribute --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;1.88&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;kygo&quot;</span>&gt;</span><br>  我是box<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">checked</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-comment">//所有attribute都支持的操作</span></span><br><span class="javascript">  <span class="hljs-keyword">var</span> boxEl = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;.box&quot;</span>)</span><br><span class="javascript">  <span class="hljs-keyword">var</span> hasAttr = boxEl.hasAttribute(<span class="hljs-string">&quot;class&quot;</span>)</span><br><span class="javascript">  <span class="hljs-keyword">var</span> attrName = boxEl.getAttribute(<span class="hljs-string">&quot;name&quot;</span>)</span><br><span class="javascript">  <span class="hljs-keyword">var</span> attrs = boxEl.attributes</span><br><span class="javascript">  <span class="hljs-comment">//class box   height 1.88   name kygo</span></span><br><span class="javascript">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> attr <span class="hljs-keyword">of</span> attrs)&#123;</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(attr.name, attr.value)</span><br><span class="javascript">  &#125;</span><br><span class="javascript">  boxEl.removeAttribute(<span class="hljs-string">&quot;height&quot;</span>)</span><br><span class="javascript">  <span class="hljs-comment">//有就修改,没有就增加</span></span><br><span class="javascript">  boxEl.setAttribute(<span class="hljs-string">&quot;height1&quot;</span>, <span class="hljs-number">1.98</span>) </span><br><span class="javascript">  <span class="hljs-comment">//Result: true kygo  &#123;0: class, 1: name, 2: height1...&#125;</span></span><br><span class="javascript">  <span class="hljs-built_in">console</span>.log(hasAttr, attrName, attrs) </span><br><span class="javascript">  <span class="hljs-comment">//输出空字符串，getAttribute获取到的都是字符串类型</span></span><br><span class="javascript">  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;input&quot;</span>).getAttribute(<span class="hljs-string">&quot;checked&quot;</span>))</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="4-5-2-元素的属性property"><a href="#4-5-2-元素的属性property" class="headerlink" title="4.5.2 元素的属性property"></a>4.5.2 元素的属性property</h4><ul><li><p>对于标准的attribute，会在DOM对象上创建对应的property属性</p></li><li><p>attribute和property相互作用</p><ul><li>改变property，通过attribute获取到的值也会改变</li><li>通过attribute修改，property的值也会改变</li></ul></li><li><p>推荐使用property来设置、获取元素的attribute</p><ul><li>因为通过property获取的值是有类型的，而attribute获取的都是字符串</li></ul></li><li><p>自定义属性data的获取</p><ul><li>html中可以通过data-*自定义属性，这些attribute可以通过dataset属性获取到</li></ul></li><li><p>代码示例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;标题&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;kygo&quot;</span> <span class="hljs-attr">data-age</span>=<span class="hljs-string">&quot;18&quot;</span>&gt;</span><br>  我是box<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">checked</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">var</span> boxEl = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;.box&quot;</span>)</span><br><span class="javascript">  <span class="hljs-keyword">var</span> inputEl = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;input&quot;</span>)</span><br><span class="javascript">  boxEl.className = <span class="hljs-string">&quot;box1&quot;</span></span><br><span class="javascript">  boxEl.setAttribute(<span class="hljs-string">&quot;class&quot;</span>, <span class="hljs-string">&quot;box2&quot;</span>)</span><br><span class="javascript">  <span class="hljs-comment">//通过property获取属性(只能获取非自定义属性)</span></span><br><span class="javascript">  <span class="hljs-built_in">console</span>.log(boxEl.name)  <span class="hljs-comment">//undefined</span></span><br><span class="javascript">  <span class="hljs-built_in">console</span>.log(boxEl.title)  <span class="hljs-comment">//标题</span></span><br><span class="javascript">  <span class="hljs-built_in">console</span>.log(boxEl.className)  <span class="hljs-comment">//  box2</span></span><br><span class="javascript">  <span class="hljs-comment">//获取的属性值有类型  Result: true &#x27;boolean&#x27; radio&#x27;</span></span><br><span class="javascript">  <span class="hljs-built_in">console</span>.log(inputEl.checked, <span class="hljs-keyword">typeof</span> inputEl.checked, inputEl.type) </span><br><span class="javascript">  <span class="hljs-comment">//自定义属性的获取</span></span><br><span class="javascript">  <span class="hljs-built_in">console</span>.log(boxEl.dataset.age)  <span class="hljs-comment">//18</span></span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="4-5-3-元素的class和style"><a href="#4-5-3-元素的class和style" class="headerlink" title="4.5.3 元素的class和style"></a>4.5.3 元素的class和style</h4><ul><li><p>JavaScript动态修改样式</p><ul><li>方法一：在css中写好样式，动态添加class</li><li>方法二：动态修改style属性</li><li>方法的选择<ul><li>大多数情况下，更推荐使用动态的class</li><li>某些情况不能动态修改class（如精准修改某个css属性值），就可以修改style属性</li></ul></li></ul></li><li><p>元素的className和classList</p><ul><li>元素的className<ul><li>元素的class attribute，对应的property叫做className，而不是class（class是关键字）</li><li>可以对className赋值，它会替换整个class中的字符串</li></ul></li><li>元素的classList<ul><li>当需要添加或移除单个的class，可以使用classList属性</li><li>elem.classList是特殊的对象<ul><li>elem.classList.add(class)  添加一个类</li><li>elem.classList.remove(class)  移除类</li><li>elem.classList.toggle(class)  不存在添加，存在移除类</li><li>elem.classList.contains(class)  检查类，返回true/false</li></ul></li><li>classList是可迭代对象，可以通过for…of遍历</li></ul></li></ul></li><li><p>元素的style属性</p><ul><li>单独修改某一个css属性，可以通过style来操作</li><li>多个样式的写法，需要使用cssText属性（不推荐）</li><li>注意<ul><li>对于多词属性，使用驼峰：boxEl.style.backgroundColor = “red”</li><li>如果将值设置为空字符串，会使用默认的css样式（如：boxEl.style.display=””）</li></ul></li></ul></li><li><p>元素style的读取-getComputedStyle</p><ul><li>对于内联样式，可以通过style.*的方式读取到</li><li>对于style标签、css文件中的样式是读取不到的<ul><li>可以通过getComputedStyle的全局函数来读取：getComputedStyle(“boxEl”).width</li></ul></li></ul></li><li><p>代码示例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">  <span class="hljs-selector-class">.box</span>&#123;</span><br><span class="css">    <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;</span><br><span class="css">    <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;</span><br><span class="css">  &#125;</span><br><span class="css">  <span class="hljs-selector-class">.active</span>&#123;</span><br><span class="css">    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">30px</span>;</span><br><span class="css">    <span class="hljs-attribute">background</span>: purple;</span><br><span class="css">    <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;</span><br><span class="css">  &#125;</span><br><span class="css">  <span class="hljs-selector-class">.active1</span>&#123;</span><br><span class="css">    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">10px</span>;</span><br><span class="css">  &#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span>我是box<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">var</span> boxEl = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;.box&quot;</span>)</span><br><span class="javascript">  <span class="hljs-comment">//通过style属性来修改样式</span></span><br><span class="javascript">  boxEl.style.color = <span class="hljs-string">&quot;red&quot;</span></span><br><span class="javascript">  boxEl.style.backgroundColor = <span class="hljs-string">&quot;pink&quot;</span></span><br><span class="javascript">  <span class="hljs-comment">//style的读取</span></span><br><span class="javascript">  <span class="hljs-built_in">console</span>.log(boxEl.style.color)  <span class="hljs-comment">//red</span></span><br><span class="javascript">  <span class="hljs-comment">//如果不是内联样式必须这样读取才行</span></span><br><span class="javascript">  <span class="hljs-built_in">console</span>.log(getComputedStyle(boxEl).width)  <span class="hljs-comment">//300px</span></span><br><span class="javascript"></span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-comment">//通过动态添加className来修改样式(会覆盖所有之前的class)</span></span><br><span class="javascript">  boxEl.className = <span class="hljs-string">&quot;active&quot;</span></span><br><span class="javascript">  <span class="hljs-comment">//通过classList来修改样式</span></span><br><span class="javascript">  boxEl.classList.remove(<span class="hljs-string">&quot;active&quot;</span>)</span><br><span class="javascript">  boxEl.classList.add(<span class="hljs-string">&quot;active1&quot;</span>)</span><br><span class="javascript">  <span class="hljs-built_in">console</span>.log(boxEl.classList.contains(<span class="hljs-string">&quot;active&quot;</span>))  <span class="hljs-comment">//false</span></span><br><span class="javascript"></span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="4-5-4-元素的常见操作"><a href="#4-5-4-元素的常见操作" class="headerlink" title="4.5.4 元素的常见操作"></a>4.5.4 元素的常见操作</h4><ul><li><p>创建元素</p><ul><li>以前写入元素的方式：document.write（拼接不方便）</li><li>创建元素语法<ul><li>document.createElement(tag)</li></ul></li></ul></li><li><p>插入元素</p><ul><li>node.append(…nodes or strings)  node末尾插入节点或字符串</li><li>node.prepend  node开头插入</li><li>node.before      node前面插入</li><li>node.after         node后面插入</li><li>node.replaceWith  将node替换成指定节点或字符串</li></ul></li><li><p>移除元素和克隆元素</p><ul><li>移除<ul><li>node.remove  node移除自己</li></ul></li><li>克隆<ul><li>语法：node.cloneNode([true])  </li><li>解释：传入true表示深度克隆（包含子元素），返回克隆出来的node</li></ul></li></ul></li><li><p>旧的元素操作方法（了解-基本不用了）</p><ul><li>parentEl.appendChild(node)</li><li>parentEl.insertBefore(node,nextSibling)</li><li>paretEl.replaceChild(node, oldChild)</li><li>parentEl.removeChild(node)</li></ul></li><li><p>代码示例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我是段落1<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span>我是box<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我是段落2<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-comment">//以前的做法(不推荐)</span></span><br><span class="javascript">  <span class="hljs-built_in">document</span>.write(<span class="hljs-string">&quot;&lt;h1&gt;我是write写入的标题&lt;h1&gt;&quot;</span>)</span><br><span class="javascript">  <span class="hljs-comment">//新增元素</span></span><br><span class="javascript">  <span class="hljs-keyword">var</span> h1El = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&quot;h1&quot;</span>)</span><br><span class="javascript">  <span class="hljs-keyword">var</span> h2El = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&quot;h2&quot;</span>)</span><br><span class="javascript">  h1El.textContent = <span class="hljs-string">&quot;我是插入的标题h1&quot;</span></span><br><span class="javascript">  h2El.textContent = <span class="hljs-string">&quot;我是插入的标题h2&quot;</span></span><br><span class="javascript">  <span class="hljs-comment">//插入元素</span></span><br><span class="javascript">  <span class="hljs-keyword">var</span> boxEl = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;.box&quot;</span>)</span><br><span class="javascript">  <span class="hljs-comment">// boxEl.append(h2El)</span></span><br><span class="javascript">  <span class="hljs-comment">// boxEl.prepend(h1El)</span></span><br><span class="javascript">  <span class="hljs-comment">// boxEl.before(h1El)</span></span><br><span class="javascript">  <span class="hljs-comment">// boxEl.after(h1El)</span></span><br><span class="javascript">  <span class="hljs-comment">// boxEl.replaceWith(h2El)</span></span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-comment">//移除元素</span></span><br><span class="javascript">  <span class="hljs-comment">// boxEl.remove()</span></span><br><span class="javascript">  <span class="hljs-comment">//克隆元素</span></span><br><span class="javascript">  <span class="hljs-keyword">var</span> boxEl1 = boxEl.cloneNode(<span class="hljs-literal">true</span>)</span><br><span class="javascript">  boxEl.append(boxEl1)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="4-5-5-元素的大小和滚动"><a href="#4-5-5-元素的大小和滚动" class="headerlink" title="4.5.5 元素的大小和滚动"></a>4.5.5 元素的大小和滚动</h4><ul><li><p>client相关（元素内部）</p><ul><li>clientWidth/clientHeight<ul><li>contentWith/Height+padding (不包含滚动条)</li></ul></li><li>clientTop/clientLeft<ul><li>border-top的宽度、border-left的宽度</li></ul></li></ul></li><li><p>offset相关</p><ul><li>offsetWidth/offsetHeight：元素完整的宽度/高度</li><li>offsetLeft/offsetHeight：距离父元素的X/Y</li></ul></li><li><p>scroll相关</p><ul><li>scrollHeight：整个可滚动的区域高度</li><li>scrollTop：滚动部分的高度</li></ul></li><li><p>代码示例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">  <span class="hljs-selector-class">.box</span>&#123;</span><br><span class="css">    <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">    <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">    <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>;</span><br><span class="css">    <span class="hljs-attribute">overflow</span>: auto;</span><br><span class="css">    <span class="hljs-attribute">background-color</span>: pink;</span><br><span class="css">    <span class="hljs-attribute">border</span>: <span class="hljs-number">10px</span> solid red;</span><br><span class="css">  &#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>  <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>  123<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">var</span> boxEl = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;.box&quot;</span>)</span><br><span class="javascript">  <span class="hljs-comment">//滚动条占据了宽度,所以元素的宽度只有185+10*2</span></span><br><span class="javascript">  <span class="hljs-built_in">console</span>.log(boxEl.clientHeight, boxEl.clientWidth)<span class="hljs-comment">//220 205</span></span><br><span class="javascript">  <span class="hljs-built_in">console</span>.log(boxEl.clientTop, boxEl.clientLeft)<span class="hljs-comment">// 10 10</span></span><br><span class="javascript">  <span class="hljs-comment">//元素整体所占宽高:加上border</span></span><br><span class="javascript">  <span class="hljs-built_in">console</span>.log(boxEl.offsetWidth, boxEl.offsetHeight)<span class="hljs-comment">//240 240</span></span><br><span class="javascript">  <span class="hljs-comment">//元素距离父元素的X/Y,这里是自带的外边距</span></span><br><span class="javascript">  <span class="hljs-built_in">console</span>.log(boxEl.offsetLeft, boxEl.offsetTop)<span class="hljs-comment">//8 8</span></span><br><span class="javascript">  <span class="hljs-comment">//可滚动的高度/滚动了多少高度</span></span><br><span class="javascript">  <span class="hljs-built_in">console</span>.log(boxEl.scrollHeight, boxEl.scrollTop)<span class="hljs-comment">//583 0</span></span><br><span class="javascript">  <span class="hljs-comment">//监听滚动事件,打印滚动的距离</span></span><br><span class="javascript">  boxEl.addEventListener(<span class="hljs-string">&quot;scroll&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(boxEl.scrollTop)</span><br><span class="javascript">  &#125;)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="4-5-6-window的大小和滚动"><a href="#4-5-6-window的大小和滚动" class="headerlink" title="4.5.6 window的大小和滚动"></a>4.5.6 window的大小和滚动</h4><ul><li><p>window的宽高</p><ul><li>innerWidth/innerHeight：获取window窗口的宽度和高度（包含滚动条）</li><li>outerWidth/outerHeight：获取window窗口的整个宽高（包括调试工具、工具栏）</li><li>documentElement.clientHeight/documentElement.clientWidth</li></ul></li><li><p>window的滚动位置</p><ul><li>scrollX：X轴滚动的位置（别名pageXOffset）</li><li>scrollY：Y轴滚动的位置（别名pageYOffset）</li></ul></li><li><p>滚动方法</p><ul><li>scrollBy(x, y)：将页面滚动至相对当前位置的x,y的位置</li><li>scrollTo(pageX, pageY)：滚动至绝对坐标</li></ul></li><li><p>代码示例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span>scrollTo<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn1&quot;</span>&gt;</span>scrollBy<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">  <span class="hljs-comment">//681 1319 整个页面的宽高(不包含工具栏)</span></span><br><span class="javascript">  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">window</span>.innerHeight, <span class="hljs-built_in">window</span>.innerWidth)</span><br><span class="javascript">  <span class="hljs-comment">//760 1319 整个浏览器宽高(包含工具栏)</span></span><br><span class="javascript">  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">window</span>.outerHeight, <span class="hljs-built_in">window</span>.outerWidth)</span><br><span class="javascript">  <span class="hljs-comment">//681 1304  整个页面宽高(不包含滚动条)</span></span><br><span class="javascript">  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">document</span>.documentElement.clientHeight, <span class="hljs-built_in">document</span>.documentElement.clientWidth)</span><br><span class="javascript">  <span class="hljs-comment">//监听滚动事件,打印滚动位置</span></span><br><span class="javascript">  <span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">&quot;scroll&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">window</span>.scrollX, <span class="hljs-built_in">window</span>.screenY)</span><br><span class="javascript">  &#125;)</span><br><span class="javascript">  <span class="hljs-comment">//滚动到绝对位置</span></span><br><span class="javascript">  <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;.btn&quot;</span>).addEventListener(<span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">    <span class="hljs-built_in">window</span>.scrollTo(<span class="hljs-number">100</span>, <span class="hljs-number">100</span>)</span><br><span class="javascript">  &#125;)</span><br><span class="javascript">  <span class="hljs-comment">//以当前滚动位置为参考点</span></span><br><span class="javascript">  <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;.btn1&quot;</span>).addEventListener(<span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">    <span class="hljs-built_in">window</span>.scrollBy(<span class="hljs-number">100</span>, <span class="hljs-number">100</span>)</span><br><span class="javascript">  &#125;)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="3-1-简介"><a href="#3-1-简介" class="headerlink" title="3.1 简介"></a>3.1 简介</h3><p>​    属于宿主对象,包含了window和document  (浏览器提供)</p><p>​      window: 全局对象，代表浏览器打开的一个窗口</p><p>每个窗口都是一个window对象 </p><p>​      document: window的一个属性，这个属性是一个对象</p><p>​           代表当前窗口的整个网页，可以操作整个网页的所有内容</p><p>​      DOM：一套操作HTML标签的API(接口/方法/属性)</p><p>​         文档模型对象(document Object Model)</p><p>​         学习DOM就是学习通过document对象操作网页内容</p><h3 id="3-2-Dom元素获取"><a href="#3-2-Dom元素获取" class="headerlink" title="3.2 Dom元素获取"></a>3.2 Dom元素获取</h3><p>​    HTML标签也称DOM元素/使用document不用加window</p><p>​      通过id获取    document.getElementById(“box”)</p><p>​               (id只有一个，会将其包装为对象返回)</p><p>​      通过class获取   document.getElementsByCalssName(“”)</p><p>​               (返回伪数组)</p><p>​      通过name获取  document.getElementsByName(“test”)</p><p>​               (表单中的name,返回伪数组)</p><p>​      通过标签名获取  document.getElementsByTagName(“div”) 多个</p><p>​      <em><strong>*重点：*</strong></em></p><p>​      通过选择器获取  document.querySelector(“#box”) //所有选择器都可</p><p>​               (只会返回根据指定选择器找到的第一个元素)</p><p>​      通过选择器获取  document.querySelectorAll(“”)  //返回数组(多个)</p><p>​      ****其他方式****：(以下皆是属性)</p><p>​          *获取所有子元素：对象.children  (返回伪数组)</p><p>​                   对象.childNodes </p><p>​           区别：children获取所有子元素/childNodes获取所有节点</p><p>​              节点中包含了文本结点和元素(标签)  </p><p>​          *获取第一个子节点/子元素：.firstChild/.firstElementChild</p><p>​            最后一个子节点/子元素：.lastChild/.lastElementChild</p><p>​          *通过子元素获取父元素/父节点</p><p>​            子元素.parentElement  子元素.parentNode</p><p>​          *获取相邻上一个节点/元素 .previousSibling/.previousElementSibling  </p><p>​           获取相邻下一个节点/元素 .nextSibling/.nextElementSibling</p><p>​          *获取html根标签、body标签、所有标签</p><p>​           document.body  document.documentElement</p><p>​           document.all</p><h3 id="3-3-节点增删改查"><a href="#3-3-节点增删改查" class="headerlink" title="3.3 节点增删改查"></a>3.3 节点增删改查</h3><p>​      创建节点  document.createElement(“span”) 创建并返回节点对象</p><p>​           createTextNode(“text”) //创建文本结点并返回</p><p>​      添加节点  父元素.appendChild(obj)  将元素obj添加到父元素最后</p><p>​      插入节点  父元素.insertBefore(obj1,obj2) 将obj1添加到父元素中obj2前面</p><p>​      替换结点  父元素.replaceChild()(obj1,obj2)  obj1替换obj2</p><p>​      删除节点  节点.parentNode.removeChild(节点) //通过父元素删除指定子元素</p><p>​           //只能通过父元素删除，不能自己删除自己</p><p>​      克隆节点  obj.cloneNode()  //克隆节点obj,默认不会克隆子元素</p><p>克隆其包含所有子元素(指定参数true)</p><h3 id="3-4-属性增删改查"><a href="#3-4-属性增删改查" class="headerlink" title="3.4 属性增删改查"></a>3.4 属性增删改查</h3><p>​     无论通过document创建还是查询的标签，系统都会将元素包装成一个对象返回给我们，系统包装这个对象时，会自动将元素的属性都包装到这个对象中</p><p>​      所以只要拿到对象就可以拿到标签属性，操作标签属性。</p><p>​      获取元素属性  obj.属性名  obj.getAttribute(“属性名”)-可以获取自定义属性</p><p>​             //区别：通过obj.属性名无法获取到自定义属性的取值</p><p>​      修改元素属性  obj.属性名= ”新值” obj.setAttribute(“属性名”,”新值”) </p><p>//区别和获取元素属性一样</p><p>​      新增元素属性  obj.setAttribute(“属性名”,”新值”) </p><p>​             //只有一个方法新增，属性不存在就新增，存在就修改</p><p>​      删除元素属性  obj.属性名=”” (空)  obj.removeArribute(“属性名”) </p><p>​             //removeArribute不仅可以清空自带属性，还可以清空自定义</p><h3 id="3-5-操作元素内容和样式"><a href="#3-5-操作元素内容和样式" class="headerlink" title="3.5 操作元素内容和样式"></a>3.5 操作元素内容和样式</h3><ul><li><strong>操作元素内容</strong></li></ul><p>​    获取元素内容：.innerHTML  .innerText  .textContent (三个属性都可获取)</p><p>​            区别：innerHTML包含标签，其他两个不包含标签</p><p>​               innerHTML和textContent不会去除两端空格(innerText会)</p><p>​      设置元素内容：通过上面三个属性设置 如：obj.innerHTML=””…</p><p>​             通过三种方式设置新的内容都会覆盖原有内容</p><p>​            区别：通过innerHTML设置，如果包含标签，会转换为标签添加</p><p>​               另外两种方式不会转换，会当成字符串直接设置</p><ul><li><strong>操作元素样式</strong></li></ul><p>​    设置元素样式  obj.className=”” //动态设置class属性内容，从而修改样式</p><p>​             通过style属性：obj.style.backgroundColor=”pink”</p><p>​             //注意：css中通过-连接的都改为驼峰命名</p><p>​                 通过style添加的样式都是行内样式</p><p>​    获取元素样式  obj.style //只能获取行内样式值，css设置的值获取不到</p><p>​             let obj1= window.getComputedStyle(obj);  obj1.width</p><p>​             //返回一个对象，保存了css设置的样式和属性值</p><h3 id="3-6-事件和事件绑定"><a href="#3-6-事件和事件绑定" class="headerlink" title="3.6 事件和事件绑定"></a>3.6 事件和事件绑定</h3><p>用户和浏览器的交互行为-事件  如：点击 移入/移出</p><p>所有HTML标签都可以添加事件</p><p>​      元素.事件名称=function(){};  //事件触发时自动执行函数</p><p>​      单击事件：btn.onclick=function(){alert(…);}</p><p>​      注意：如果给元素添加了和系统同名事件，不会覆盖系统添加的事件</p><p>​         如果想覆盖，在function(){return false;}</p><p> <em><strong>*事件*</strong></em></p><p>​      *添加事件的三种方式   </p><p>​       Way1：oBtn.onclick=function(){…}  </p><p>//注意点：给同一元素多次添加相同事件后面的会覆盖前面的</p><p>​       Way2：oBtn.addEventListener(“click”,function(){…})  </p><p> //事件名称不加on,事件不会覆盖,IE9以上</p><p>​       Way3：oBtn.attachEvent(“onclick”,function(){…});</p><p>//事件名称加on,不会覆盖,只支持低级浏览器</p><p>​      *事件对象event</p><p>​       当注册事件被触发时，系统就会自动创建事件对象</p><p>​       oBtn.onclick=function(event){…}  //回调函数里传递的形参就是事件对象</p><p>​       注意点：低级浏览器不支持 兼容：event=event||window.event;</p><p>​       event.preventDefault()  //阻止默认行为(以前的return false 企业开发推荐)</p><p>​      *事件冒泡和捕获</p><p>​       事件执行的三个阶段：</p><p>​       First：捕获阶段(从外向内的传递事件)</p><p>​          父元素捕获到事件-&gt;子元素捕获到事件</p><p>​       Second：当前目标阶段(执行回调函数)  -&gt;触发回调函数</p><p>​       Third：冒泡的阶段(从内向外的传递事件)</p><p>​          子元素抛出事件-&gt;父元素抛出事件</p><p>​       注意：三个阶段只有两个会被同时执行</p><p>​          要么捕获和当前,要么当前和冒泡</p><p>​       Why: JS处理事件的历史问题,W3C将两种方式都纳入标准</p><p>​      How设置事件到底是捕获还是冒泡?</p><p>​         只能通过addEventlistener方法,接收三个参数</p><p>​         (事件名称,回调函数,false冒泡/true捕获)</p><p>​         注意：通过onXXX和attachEvent 方式添加的事件都是冒泡</p><p>​      事件冒泡的阻止：event.stopPropagation() //只支持高级浏览器IE9以上</p><p>​              event.cancelBubble=true;  //支持低浏览器</p><p>  <em><strong>*移入移出事件*</strong></em></p><p>​      移入：onmouseover/onmouseenter  例:odiv.onmouseover=function(){…}</p><p>​         (初学者为了避免位置的bug，建议使用onmouseenter)</p><p>​      移出：onmouseout/onmouseleave  (建议leave)</p><p>​      移动：onmousemove</p><p>​      两种移入移除事件的区别：</p><p>​        onmouseover和onmouseenter</p><p>​          over移入到子元素,父元素移入事件也会被触发/enter不会</p><p>​        onmouseout和onmouseleave</p><p>​          out移出子元素,父元素移出事件也会被触发/leave不会</p><p>​      </p><p>​      事件对象的属性：</p><p>​        event.offsetX/offsetY clientX/clientY pageX/pageY screenX/screenY</p><p>​        offsetX/offsetY  事件触发相对于当前元素自身的位置</p><p>​        clientX/clientY  事件触发相对于浏览器可视区域的位置</p><p>​               (可视区域是不包括滚动条滚动出去的范围)</p><p>​        pageX/pageY  事件触发相对于整个网页的位置(包括滚动出去的范围)</p><p>​        (注意: 没有滚动条时,client和page一样,但page不兼容IE9以下)</p><p>​        screenX/screenY 事件触发相对于显示器的位置(用不上,了解即可)</p><p>表单事件</p><p>​     表单验证-value属性拿到input值</p><p>​     如果想要不触发默认事件，如a链接/表单提交,那么return false即可</p><p>​     表单事件：</p><p>​         监听input获取焦点  oInput.onfocus()=function(){}</p><p>​         监听input失去焦点  onblur</p><p>​         监听input内容改变  onchange  //只有表单失去焦点才会监听改变</p><p>​                   oninput  //实时获取数据,IE9及以上才能使用</p><p>(通过代码oText.value=””给input数据，不会触发oninput事件)</p><p>​     补充：默认不可用-添加disabled属性</p><p>​        在JS中如果HTML标签的属性名和取值一样,那么JS会返回false/true</p><p>​        例：oSubmit.disable=true  //使按钮不可用</p><h3 id="3-7-定时器"><a href="#3-7-定时器" class="headerlink" title="3.7 定时器"></a>3.7 定时器</h3><p>​    *重复执行的定时器(window可省略)</p><p>​      创建：window.setInterval(function(){…},1000); </p><p>//参数：一个函数，一个毫秒值</p><p>​              每隔一段时间(第二个参数)，执行函数(第一个参数)</p><p>​      销毁：let id=window.setInterval(…);  clearInterval(id);</p><p>​         //创建定时器时会返回一个标识，用于销毁使用</p><p>​      *只执行一次的定时器  </p><p>​       创建：window.setTimeout(function(){…},1000) </p><p>//1000毫秒执行一次函数</p><p>​       销毁：let id=window.setTimeout(…);  clearTimeout(id);</p><p>​                              2021.4.10  </p><p>注意：谷歌浏览器默认情况下不允许自动播放音乐，</p><p>只有用户和网页交互后才可以播放音乐。</p><p>​    解决方案：让用户和网页交互后再播放  调用audio的play方法</p><p>​                              2021.4.13</p><h3 id="3-8-闭包"><a href="#3-8-闭包" class="headerlink" title="3.8 闭包"></a>3.8 闭包</h3><p>​      *什么是闭包：闭包是一种特殊的函数</p><p>​      *如何生成一个闭包：</p><p>​        当一个内部函数引用了外部函数的数据(变量/函数)时,内部函数就是闭包</p><p>​        所以只要满足”是函数嵌套”、”内部函数引用外部函数数据”</p><p>​      *闭包特点：</p><p>​        只要闭包还在使用外部函数的数据, 那么外部的数据就一直不会被释放</p><p>​        也就是说可以延长外部函数数据的生命周期</p><p>​      *闭包注意点</p><p>​    当不需要使用闭包时,要手动将闭包设置为null,否则会出现内存泄漏                         </p><p>​    <em><strong>*循环索引同步*</strong></em></p><p>​      默认情况下,代码从上至下执行,var定义的变量(除函数中)都是全局变量</p><p>​      循环索引同步和闭包的结合使用：利用立即执行函数+闭包</p><p>for( var i=0;i&lt;bun.length;i++){</p><p> let btn=btn[i]; </p><p> (function(index){  //立即执行函数和闭包实现循环索引同步</p><p> btn.onclick()=function(){ console.log(index);}</p><p>})(i);</p><p>}  //正常直接绑定事件，每个按钮输出的都是最后一个i</p><p>循环()里面var是全局变量，let定义是局部变量</p><p>let定义时每次执行完循环体都会重新定义一个i</p><p>​      ES6中由于{}是块级作用域(let),在块级作用域中定义了函数</p><p>​      且在函数中使用了块级作用域let定义的变量(数据)，那么这个函数就是闭包</p><p>​                                                                  2021.4.19</p><h3 id="3-10-正则表达式"><a href="#3-10-正则表达式" class="headerlink" title="3.10 正则表达式"></a>3.10 正则表达式</h3><p>​      *正则表达式是对字符串操作的一种逻辑公式</p><p>​      *作用：在字符串”查找”是否包含指定子串</p><p>​         从字符串中”提取”指定子串</p><p>​         对字符串中指定的内容进行”替换”</p><p>​      字符串查找: indexOf/lastIndexOf/includes </p><p>​      提取: substr/substring  替换: replace</p><p>​      *first 利用正则表达式匹配(查找)</p><p>​       创建正则表达式对象-&gt;指定匹配规则(构造函数中指定规则)</p><p>​        let reg=new RegExp(“a”);  //RegExp(“a”,”i”);不区分大小写</p><p>​       -&gt;利用test方法进行匹配</p><p>​        reg.test(str)  //包含a返回true,发展false</p><p>​        注意：正则表达式严格区分大小写(不区分大小写传递参数”i”)</p><p>​      通过字面量创建正则：let reg=/规则/</p><p>​         </p><p>​      *second 通过正则表达式提取符合规则的字符串</p><p>​       let res=str.match(reg);  //默认情况一旦匹配就停止查找</p><p>​       通过修饰符g-全局查找  let reg=/规则/g</p><p>​      *third  通过正则表达式替换符合规则的字符串</p><p>​       let newstr=str.replace(reg,”替换内容”);</p><p>//第一个参数除了字符串还可以接收正则对象</p><h2 id="5-BOM"><a href="#5-BOM" class="headerlink" title="5. BOM"></a>5. BOM</h2><p>BOM就是提供了一套操作浏览器的API(接口/方法/属性)</p><h3 id="4-1-BOM常见对象"><a href="#4-1-BOM常见对象" class="headerlink" title="4.1 BOM常见对象"></a>4.1 BOM常见对象</h3><p>​     window 代表整个浏览器窗口(BOM中的一个顶级对象(全局))</p><p>​     Navigator 浏览器信息-判断是什么浏览器</p><p>​     Location  浏览器地址栏信息-设置/获取地址信息</p><p>​     History  浏览器历史信息-实现刷新/上一步/下一步</p><p>​         (由于隐私,只能拿到用户当前历史记录,不能拿到所有历史记录)</p><p>​     Screen  用户的屏幕信息(了解即可)-显示器宽高</p><p>*Navigator对象</p><p>  userAgent属性：包含了浏览器信息的字符串</p><p>  应用：if(/chrome/i.test(Navigator.userAgent)){alert(“谷歌浏览器”)}</p><p>*Location对象</p><p>​    获取/设置当前地址栏url  location.href/location.href=””</p><p>​    重新加载网页(刷新)  location.reload();  </p><p>​    强制刷新(更新缓存)  location.reload(true);</p><p>*History对象</p><p>  前进(下一步)  history.forward()  history.go()//go可以传入一个整数-前进几步</p><p>  后退   history.back()   history.go()//go可以接受一个负数,代表后退几步</p><p>  刷新   history.go(0)  //传入0代表刷新</p><h3 id="4-2-JS三大家族"><a href="#4-2-JS三大家族" class="headerlink" title="4.2 JS三大家族"></a>4.2 JS三大家族</h3><p>(offset/client/scroll)</p><p><em><strong>*获取元素宽高方式：*</strong></em></p><p>   (以下方法都是将元素属性封装到对象中返回)</p><p>​    getComputedStyle(oDiv)  </p><p>获取的宽高不包括边框和内边距</p><p>​      不仅能获取css属性也可以获取style(行内)</p><p>​      只读方法(不能设置),只支持IE9及以上</p><p>​     oDiv.currentStyle属性   </p><p>​      只支持IE9以下,其他和computed一样</p><p>​     oDiv.style属性</p><p>​       只能获取行内样式,可以设置行内样式</p><p>​       不包括边框和内边距,支持IE9以下</p><p>​    <em><strong>*offset家族*</strong></em>    (三大家族-不带单位-只读)</p><p>​     oDiv.offsetWidth/offsetHeight</p><p>​       包括边框和内边距,支持IE9以下</p><p>​       只读,行内/css都能获取</p><p>​     oDiv.offsetLeft/offsetTop</p><p>​      获取元素到第一个定位祖先元素的偏移位(没有定位,就是距离body)</p><p>​     oDiv.offsetparent</p><p>​      获取元素第一个定位的祖先元素(没有定位就是body)</p><p>​    <em><strong>*client家族*</strong></em></p><p>​     oDiv.clientWidth/Height  元素自身+内边距</p><p>​     oDiv.clientLeft/Top  左边框,顶部边框</p><p>​    <em><strong>*scroll家族*</strong></em></p><p>​     oDiv.scrollWidth/Height  </p><p>​      内容没有超出元素范围时=元素+内边距=clientWidth/Height</p><p>​      超出元素范围时=元素+内边距+超出宽度</p><p>​     oDiv.scrollLeft/Top</p><p>​      滚动时(onscroll事件),内容移出去的距离(从内边距外部开始计算)</p><p>​      </p><h3 id="4-3-获取网页宽高"><a href="#4-3-获取网页宽高" class="headerlink" title="4.3 获取网页宽高"></a>4.3 获取网页宽高</h3><p>​    获取网页可视区域宽高    </p><p>window.innerWidth/innerHeight  //只能在IE9及以上</p><p>document.documentElement.clientWidth/clientHeight  标准模式</p><p>注意：可用于IE9以下浏览器的标准模式中获取</p><p>浏览器渲染网页模式：标准(默认)/混杂/怪异模式</p><p>如果网页没有书写文档声明<!DOCTYPE html>-混杂/怪异模式渲染</p><p>可通过document.compatMode获取是什么模式</p><p>​       混杂模式通过: document.body.clientWidth/clientHeight 获取</p><p>​    兼容性写法自己封装…略</p><h3 id="4-4-网页滚动距离"><a href="#4-4-网页滚动距离" class="headerlink" title="4.4 网页滚动距离"></a>4.4 网页滚动距离</h3><p>​    IE9及以上浏览器</p><p>​     window.pageXOffset/pageYOffset</p><p>​    标准模式下浏览器</p><p>​     document.documentElement.scrollTop/scrollLeft</p><p>​    混杂(怪异)模式下浏览器</p><p>​     document.body.scrollTop/scrollLeft</p><h3 id="4-5-函数防抖和函数节流"><a href="#4-5-函数防抖和函数节流" class="headerlink" title="4.5 函数防抖和函数节流"></a>4.5 函数防抖和函数节流</h3><ul><li><strong>函数防抖</strong></li></ul><p>函数防抖是优化高频率执行js代码的一种手段</p><p>​    可以让被调用的函数在一次连续的高频操作过程中只被调用一次</p><p>​    作用：减少代码执行次数,提升网页性能</p><p>​    应用场景：oninput/onmousemove/onscroll/onresize等事件</p><ul><li><strong>函数节流</strong></li></ul><p>​    作用和函数防抖一样</p><p>​     区别：函数节流是减少连续的高频操作函数执行次数</p><p>(例如连续调用10次,可能只执行3-4次)</p><p>​        函数防抖是让连续的高频操作时函数只执行一次</p><p>(例如连续调用10次,但只会执行1次)</p><p>​                                                                                                                2021/4/22</p><h2 id="6-JSON"><a href="#6-JSON" class="headerlink" title="6. JSON"></a>6. JSON</h2><p>JSON是一种轻量级的数据交换格式(本质上是字符串)</p><p>​    采用完全独立于编程语言的文本格式来存储和表示数据</p><p>​    JSON其实就是字符串版本的JS对象  ‘{“name”: “cth”}’</p><p>​    注意点：JSON的key只能是字符串,value可以是任意数据类型</p><p>​    转换：json=JSON.stringify(obj);  obj=JSON.parse(json);</p><h1 id="JS高级"><a href="#JS高级" class="headerlink" title="JS高级"></a>JS高级</h1><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h2><ul><li>js的重要性</li></ul><p>​        所有框架都是在js的基础上编写的</p><ul><li>js应用场景</li></ul><p>​        web端 移动端 小程序 桌面应用(如vs code) 后端Node</p><ul><li><p>js让人疑惑的地方</p><p>函数、闭包 、作用域、面向对象(继承、原型链等)、ES新特征(ES6-12) </p><p>其他一系列知识(事件循环、宏任务、微任务、内存管理、Promise、await、asnyc、防抖节流等)</p></li><li><p>TypeScript会取代JavaScript吗</p></li></ul><p>​        TS致力于为JS提供类型检查，而不是取代JS(TS官方文档：源于JS，归于JS)</p><p>​        TS只是JS的一个超集，在它的基础上进行了扩展</p><p>​        并且最终TS还是需要转换为JS代码才能真正的运行        </p><ul><li><p>js是一门编程语言(高级的编程语言)</p><div class="code-wrapper"><pre><code class="hljs">机器语言(01) -&gt; 汇编语言(汇编指令) -&gt; 高级语言(c、c++、java、js、python)-编译型/解释型</code></pre></div></li></ul><p>​        (计算机不认识高级语言，代码最终需要转换成机器指令)</p><h2 id="2-浏览器工作原理和V8引擎"><a href="#2-浏览器工作原理和V8引擎" class="headerlink" title="2. 浏览器工作原理和V8引擎"></a>2. 浏览器工作原理和V8引擎</h2><ul><li><strong>浏览器工作原理</strong></li></ul><p>​        域名 (DNS解析)-&gt; ip地址 -&gt;服务器地址-&gt; 返回index.html(解析)</p><p>​        解析过程中有link标签和script标签 -&gt; 到服务器再次下载对应css和js文件 </p><ul><li><p>浏览器内核</p><p>不同浏览器有不同内核组成</p><p>Gecko-早期Netscape和Firefox浏览器使用</p><p>Trident-IE4-11浏览器，Edge浏览器已转向Blik</p><p>Webkit-苹果开发的，基于Safari，Google之前也在使用</p><p>Blik-Webkit的一个分支，Google开发，目前应用于Google、Edge、Opera</p><p>浏览器内核-浏览器排版引擎/页面渲染引擎</p></li><li><p>浏览器渲染过程</p><p>html遇到js标签-&gt;停止解析html-&gt;加载执行js代码(js执行是在DOM-&gt;DOM Tree过程改变dom)</p><p>html、css解析(Parser) -&gt; DOM Tree+Style Rules -&gt; Render Tree(渲染树) -&gt; Display</p><p>如图：</p><p> <img src="C:\Users\Administrator\Desktop\2022\img\js高级_浏览器渲染过程.png"></p><p>js代码是如何执行呢？</p></li><li><p>js引擎</p><p>定义：JavaScript引擎是一个专门处理JavaScript脚本的虚拟机，一般会附带在网页浏览器之中</p><p>浏览器/Node执行js代码  -&gt; 需要js引擎将js代码转换成CPU指令(机器代码)</p><p>引擎举例：</p><p>SpiderMonkey：第一款js引擎，由Brendan Eich开发(js作者)</p><p>Chakra：微软开发</p><p>JavaScriptCore：WebKit中的js引擎，Apple开发(小程序开发常用)</p><p>V8：Google开发的js引擎</p></li></ul><ul><li><p>浏览器内核和JS引擎的关系</p><ul><li><p>以Webkit为例，Webkit由两部分组成</p></li><li><p>WebCore ：负责HTML解析、布局、渲染等工作</p></li><li><p>JavaScriptCore：解析、执行js代码(小程序中编写的js就是被JSCore执行的)</p></li></ul></li><li><p>V8引擎的原理</p><p>V8是用c++编写的Goole开源高性能JavaScript和WebAssembly引擎，它用于Chrome和Node.js等  </p><p>V8可以独立运行，也可以嵌入到任何C++应用程序中</p><p>解析过程：</p><p>源码 -&gt; parse(词法分析、语法分析) -&gt;AST抽象语法树-&gt;由Ignition库转换为字节码bytecode</p><p>-&gt;V8将字节码转换成机器指令-CPU代码(不同平台CPU不一样所以需要先转换字节码)运行</p><p>TurboFan库/模块 将多次执行的代码变成优化的机器指令，下次可直接执行</p><p>如图：    </p><p><img src="C:\Users\Administrator\Desktop\2022\img\js高级_V8引擎的原理.png">        </p></li><li><p>代码执行流程分析</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> 1. 代码解析，V8引擎内部会给我们创建一个对象(GlobalObject -&gt; go)</span><br><span class="hljs-comment"> 2. 运行代码</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure></li></ul><ul><li><strong>扩展运算符</strong></li></ul><p>扩展运算符在函数形参列表中的作用</p><p>将传递给函数的所有实参打包到一个数组中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fun</span>(<span class="hljs-params">...arr</span>) </span>&#123;   <span class="hljs-comment">//将参数打包到arr数组</span><br>  <span class="hljs-built_in">console</span>.log(arr); <br>&#125;<br>fun(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><p>注意：和在等号左边一样，也只能写在形参列表最后 </p><ul><li><strong>形参默认值</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//ES6: 直接在形参指定默认值</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fun</span>(<span class="hljs-params">a = <span class="hljs-number">6</span>, b = <span class="hljs-number">6</span></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(a, b);  <span class="hljs-comment">//Result: 6 6</span><br>&#125;<br>fun()<br></code></pre></td></tr></table></figure><p>可以将函数作为其他函数的参数和返回值</p><p>JS中函数可以嵌套定义(函数中可以定义函数)</p><p>​          </p><ul><li><strong>箭头函数</strong></li></ul><p>ES6新增定义函数的格式，为了简化定义函数代码 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//let 函数名称=(形参列表)=&gt;&#123;...&#125;</span><br><span class="hljs-keyword">let</span> fun=<span class="hljs-function">(<span class="hljs-params">a</span>)=&gt;</span>&#123;<br>  <span class="hljs-built_in">console</span>.log(a);<br>&#125;<br></code></pre></td></tr></table></figure><p>注意点：</p><p>​    如果()只有一个形参，括号可以省略 </p><p>​    如果大括号中只有一句代码，那么{}也可以省略</p><p>箭头函数和普通函数的区别</p><p>​    普通函数/方法，谁调用this就是谁</p><p>​    箭头函数的this，是父作用域的this，不是调用者  </p><p>​    注意：箭头函数中的this永远都只看它所属的作用域的this,不能通过bind/call/apply来修改   </p><ul><li><strong>作用域链</strong></li></ul><p>ES6之前作用域链：</p><p>​    全局作用域是0级作用域</p><p>​    定义函数开启的作用域是1/2/3…级</p><p>​    JS会将这些作用域连接起来形成作用域链</p><p>​    0-&gt;1-&gt;2-&gt;3-&gt;4… (0级作用域里定义的函数就是1级)</p><p>变量在作用域链查找规则：</p><p>​    先在当前找，找到就使用当前作用域的</p><p>​    当前没有就去上一级作用域查找</p><p>​    以此类推直到0级为止，0级没有找到就报错</p><p>ES6作用域链：</p><p>​    除了定义函数会开启作用域外，代码块也会开启作用域</p><p>​    注意点：要用ES6就全部用ES6如：let、箭头函数(不然容易混淆)</p><p>​    函数预解析：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//ES6之前这种定义函数方式，可以提前调用(会将函数的声明提升到当前作用域最前面)</span><br>say()  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">say</span>(<span class="hljs-params"></span>)</span>&#123;&#125;  <br><span class="hljs-comment">//报错，这样只有变量才会预解析</span><br>say()  <span class="hljs-keyword">var</span> say=<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;&#125;  <br><span class="hljs-comment">//不会被预解析,let定义的</span><br>say()  <span class="hljs-keyword">let</span> say = <span class="hljs-function">() =&gt;</span> &#123;&#125;  <br></code></pre></td></tr></table></figure><ul><li>对象的属性方法分类</li></ul><p>实例属性/实例方法:</p><p>​    通过构造函数创建的对象 - 实例对象</p><p>​    通过实例对象访问的属性 - 实例属性</p><p>​    通过实例对象调用的方法 - 实例方法</p><p>静态属性/静态方法:</p><p>​    通过构造函数访问/调用的属性/方法就是静态属性和静态方法</p><p>​    构造函数也是对象：构造函数.属性=…</p><p><strong>prototype对象</strong> </p><p>可以将构造函数中公共的方法存储到prototype对象中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">Person.prototype=&#123;<span class="hljs-attr">say</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;&#125;&#125;  <span class="hljs-comment">//里面放构造函数公共方法 </span><br></code></pre></td></tr></table></figure><p>prototype对象特点：</p><p>​    存储在prototype中的方法可以被对应构造函数创建的所有对象共享(也可存储属性)</p><p>​    prototype中出现和构造函数重名属性或方法，访问到的是构造函数中的</p><p>应用场景：</p><p>​    prototype中一般用于存储所有对象都相同的属性及方法 </p><ul><li>对象三角恋关系</li></ul><p>每个构造函数都有一个默认属性-prototype</p><p>prototype中保存着一个对象-原型对象</p><p>每个原型对象都有一个默认属性-constructor</p><p>constructor指向当前原型对象对应的那个构造函数</p><p>通过构造函数创建的对象-实例对象</p><p>每个实例对象都有一个默认属性 <strong>proto</strong> (两下划线)</p><p><strong>proto</strong> 指向创建它的那个构造函数的原型对象</p><ul><li>Function构造函数</li></ul><p>​    函数是引用类型(对象)，所有函数都是通过Function构造函数创建的对象</p><p>​    构造函数的__proto__比较特殊，指向它自己的原型对象(和prototype一样)</p><p>​    Object构造函数  Object原型对象的__proto__为null</p><p>​      </p><ul><li>函数关系完整关系</li></ul><p>​      Function函数是所有函数的祖先函数</p><p>​      所有构造函数都有一个prototype属性</p><p>​      所有原型对象都有一个constructor属性</p><p>​      所有函数都是对象</p><p>​      所有对象都有一个__proto__属性                 </p><p> <img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\ksohtml2868\wps1.png" alt="img"><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\ksohtml2868\wps2.png" alt="img"></p><p>​     <img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\ksohtml2868\wps3.png" alt="img"></p><p>​                            -2021.4.3</p><ul><li><p><strong>原型链</strong></p><p>当给构造函数的(.prototype={})赋值时，为了不破坏原有关系</p><p>需要在自定义的对象中手动添加constructor属性，手动指定指向谁(构造函数)</p><p>通过 __proto__ 连接在一起的链叫做原型链</p><p>当使用对象的属性和方法时，自己有用自己的，自己没有去原型中找</p><p>原型没有，就去原型的原型找，一直找到Object的__proto__为NULL为止</p><p>注意：给对象不存在的属性设置值时，不会去原型中查找，会给当前对象新增</p></li><li><p><strong>封装/继承/多态</strong></p></li></ul><p>JS面向对象的三大特性：封装、继承、多态</p><p><strong>封装性</strong></p><p>默认情况对象属性和方法都是公开的，拿到对象就可以操作对象的属性方法</p><p>构造函数中let/var设置私有属性，通过this.设置公有方法修改和访问私有属性</p><p><strong>继承</strong></p><p>bind-call-apply三个方法</p><p>作用：都是用于修改函数或方法中的this的</p><p>obj是新this的指向对象</p><p>bind方法：函数.bind(obj ,参数…);  会返回一个修改后的新函数</p><p>​     也可以函数传参，只不过参数要写在this对象后面</p><p>call方法： 函数.call(obj ,参数…);  会立即调用新函数  可传参</p><p>apply方法：也是立即调用，但传递参数格式不一样，通过数组传参</p><p>​      函数.apply(obj ,[参数…]);  </p><p>修改方法的this：方法.bind() 一样的做法…</p><p>JS继承的终极方法：</p><p>  在子类的构造函数中通过call借助父类的构造函数</p><p>  将子类的原型对象修改为父类的实例对象\</p><p><strong>多态</strong></p><p>强类型语言-变量使用严格符合定义：int就存储整型</p><p>弱类型-不要求变量使用严格符合-JS就是弱类型</p><p>弱类型语言不关注多态</p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><ul><li>数组解构赋值 </li></ul><p>ES6新增赋值方法，左边右边格式必须相同，才能完全解构</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//左右边个数可以不一样，会赋值undefined或者多余值丢弃</span><br><span class="hljs-keyword">let</span> [a,b,c]=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br><span class="hljs-keyword">let</span> [a,b=<span class="hljs-number">666</span>,c=<span class="hljs-number">1</span>]=[<span class="hljs-number">1</span>] <span class="hljs-comment">//可以给左边的值指定默认值 </span><br><br><span class="hljs-comment">//ES6扩展运算符：在最后一个字母前加... 可以将多余数据打包</span><br><span class="hljs-keyword">let</span> [a,...b]=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>] <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>2. JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo博客搭建和部署</title>
    <link href="/2022/03/24/0.%20%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    <url>/2022/03/24/0.%20%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="博客搭建和部署-Hexo"><a href="#博客搭建和部署-Hexo" class="headerlink" title="博客搭建和部署-Hexo"></a>博客搭建和部署-Hexo</h1><h2 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1. 环境准备"></a>1. 环境准备</h2><p>前提条件：Nodejs  Git 安装</p><h2 id="2-开始搭建"><a href="#2-开始搭建" class="headerlink" title="2. 开始搭建"></a>2. 开始搭建</h2><h3 id="2-1-安装Hexo"><a href="#2-1-安装Hexo" class="headerlink" title="2.1 安装Hexo"></a>2.1 安装Hexo</h3><p>建立MyBlog文件夹，管理员身份运行cmd</p><figure class="highlight awk"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>Win系统：安装cnpm，利用cnpm安装hexo-cli  (npm install hexo-cli -g)<br>npm install cnpm<br>cnpm install hexo-cli -g<br><br><span class="hljs-regexp">//</span>Mac系统：可以直接安装Hexo<br>npm install hexo-cli -g<br>(安装时报错解决：sudo npm install -g hexo --unsafe-perm=true --allow-root)<br><br><span class="hljs-regexp">//</span>进入MyBlog，并初始化文件夹<br>-&gt; hexo init<br>(以上步骤有问题可以使用 git config --global --unset http.proxy)<br>出现 INFO Start blogging with Hexo! 说明成功<br><span class="hljs-regexp">//</span>安装 hexo 依赖包<br>-&gt; npm install<br><br></code></pre></td></tr></table></figure><h3 id="2-2-启动本地博客"><a href="#2-2-启动本地博客" class="headerlink" title="2.2 启动本地博客"></a>2.2 启动本地博客</h3><p>本地博客效果(以下三个命令每次都会用到)</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>清除页面相关东西<br>hexo clear <br><span class="hljs-regexp">//</span>生成静态网站<br>-&gt; hexo g<br><span class="hljs-regexp">//</span>启动服务器<br>-&gt; hexo s<br></code></pre></td></tr></table></figure><p>Ctrl+C 停止运行</p><h2 id="3-使用主题-fluid"><a href="#3-使用主题-fluid" class="headerlink" title="3. 使用主题-fluid"></a>3. 使用主题-fluid</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>进入themes文件夹下载主题<br>cd themes<br>git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/fluid-dev/</span>hexo-theme-fluid.git<br></code></pre></td></tr></table></figure><p>修改默认主题(进入MyBlog/_config.yml)</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk">theme: hexo-theme-fluid   <span class="hljs-regexp">//</span>这里的名字是themes文件夹中下载主题的文件夹名<br>language: zh-CN           <span class="hljs-regexp">//</span>指定语言，会影响主题显示的语言，按需修改<br><br><span class="hljs-regexp">//</span>刷新重启服务<br>hexo clear<br>hexo g<br>hexo s<br></code></pre></td></tr></table></figure><p>生成About页面 - 首次使用主题的「关于页」需要手动创建：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">hexo</span> <span class="hljs-string">new</span> <span class="hljs-string">page</span> <span class="hljs-string">about</span><br><span class="hljs-string">//创建成功后，编辑博客目录下</span> <span class="hljs-string">/source/about/index.md，添加</span> <span class="hljs-string">layout</span> <span class="hljs-string">属性</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">about</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2020-02-23 19:20:33</span><br><span class="hljs-attr">layout:</span> <span class="hljs-string">about</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><h2 id="4-配置修改"><a href="#4-配置修改" class="headerlink" title="4. 配置修改"></a>4. 配置修改</h2><p><strong>参见fluid文档：</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>hexo.fluid-dev.com/docs<br></code></pre></td></tr></table></figure><h3 id="4-1-修改页面标题和小Icon"><a href="#4-1-修改页面标题和小Icon" class="headerlink" title="4.1 修改页面标题和小Icon"></a>4.1 修改页面标题和小Icon</h3><p>除了页面的Title和language在Blog下的_config.yml设置</p><p>其他的大多配置在主题下的_config.yml设置(包括所有图片)</p><h3 id="4-2-友链添加"><a href="#4-2-友链添加" class="headerlink" title="4.2 友链添加"></a>4.2 友链添加</h3><h3 id="4-3-添加2d宠物和点击效果"><a href="#4-3-添加2d宠物和点击效果" class="headerlink" title="4.3 添加2d宠物和点击效果"></a>4.3 添加2d宠物和点击效果</h3><p>(这两个百度即可有很多方案)</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>首先进入Hexo博客根目录安装live2d插件<br>npm install --save hexo-helper-live2d<br></code></pre></td></tr></table></figure><p>接着，修改根目录下的 <em>_config.yml</em> 文件</p><p>添加自定义配置(下面提供我的配置做参考)：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">## live2d</span><br><span class="hljs-attr">live2d:</span><br>   <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>   <span class="hljs-attr">scriptFrom:</span> <span class="hljs-string">local</span><br>   <span class="hljs-attr">pluginRootPath:</span> <span class="hljs-string">live2dw/</span><br>   <span class="hljs-attr">pluginJsPath:</span> <span class="hljs-string">lib/</span><br>   <span class="hljs-attr">pluginModelPath:</span> <span class="hljs-string">assets/</span><br>   <span class="hljs-attr">tagMode:</span> <span class="hljs-literal">false</span><br>   <span class="hljs-attr">debug:</span> <span class="hljs-literal">false</span><br>   <span class="hljs-attr">model:</span><br>       <span class="hljs-attr">use:</span> <span class="hljs-string">live2d-widget-model-z16</span><br>       <span class="hljs-attr">scale:</span> <span class="hljs-number">1</span><br>       <span class="hljs-attr">hHeadPos:</span> <span class="hljs-number">0.5</span><br>       <span class="hljs-attr">vHeadPos:</span> <span class="hljs-number">0.618</span><br>   <span class="hljs-attr">display:</span><br>       <span class="hljs-attr">superSample:</span> <span class="hljs-number">2</span><br>       <span class="hljs-attr">width:</span> <span class="hljs-number">150</span><br>       <span class="hljs-attr">height:</span> <span class="hljs-number">300</span><br>       <span class="hljs-attr">position:</span> <span class="hljs-string">right</span><br>       <span class="hljs-attr">hOffset:</span> <span class="hljs-number">0</span><br>       <span class="hljs-attr">vOffset:</span> <span class="hljs-number">-20</span><br>   <span class="hljs-attr">mobile:</span><br>       <span class="hljs-attr">show:</span> <span class="hljs-literal">true</span><br>       <span class="hljs-attr">scale:</span> <span class="hljs-number">0.5</span><br>  <span class="hljs-attr">react:</span><br>      <span class="hljs-attr">opacityDefault:</span> <span class="hljs-number">0.7</span><br>      <span class="hljs-attr">opacityOnHover:</span> <span class="hljs-number">0.2</span><br></code></pre></td></tr></table></figure><p>注意：model.use 后的字符串就是看板娘模型的名字</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>进入博客根目录输入以下命令-让宠物住进你的博客-后面跟板娘模型的名字<br>npm install live2d-widget-model-z16<br></code></pre></td></tr></table></figure><p>模型的GitHub地址：<a href="https://github.com/xiazeyu/live2d-widget-models">https://github.com/xiazeyu/live2d-widget-models</a></p><p>效果参考博客：<a href="https://blog.csdn.net/wang_123_zy/article/details/87181892">https://blog.csdn.net/wang_123_zy/article/details/87181892</a></p><h2 id="5-博客上传到本地"><a href="#5-博客上传到本地" class="headerlink" title="5. 博客上传到本地"></a>5. 博客上传到本地</h2><p>直接移动md文件到Myblog\source_posts，重新启动即可</p><h3 id="5-1-博客标题-标签-分类的添加"><a href="#5-1-博客标题-标签-分类的添加" class="headerlink" title="5.1 博客标题/标签/分类的添加"></a>5.1 博客标题/标签/分类的添加</h3><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs subunit">title: 前端学习路线<br><span class="hljs-keyword">tags:</span> [学习路线]<br>categories:<br>- [前端, 路线]<br></code></pre></td></tr></table></figure><p>注意：标签和分类不一样，标签没有层级和顺序性，而分类有</p><h2 id="6-Gitee-GitHub上部署博客"><a href="#6-Gitee-GitHub上部署博客" class="headerlink" title="6. Gitee/GitHub上部署博客"></a>6. Gitee/GitHub上部署博客</h2><p>参考链接：<a href="https://blog.csdn.net/yushuaigee/article/details/111825925">https://blog.csdn.net/yushuaigee/article/details/111825925</a></p><p>在Gitee、Github上建立仓库(仓库名必须和用户名一致) 用户名.gitee/github.io</p><p>配置git参数-用户名和邮箱</p><p>生成并配置SSH公钥</p><p>安装Hexo发布插件</p><p>修改MyBlog\_config.yml的配置文件</p><p>执行命令</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo g</span><br><span class="hljs-attribute">hexo d</span><br></code></pre></td></tr></table></figure><p>注意：Gitee需要手动点击更新部署</p><h2 id="7-自定义域名和CDN加速"><a href="#7-自定义域名和CDN加速" class="headerlink" title="7. 自定义域名和CDN加速"></a>7. 自定义域名和CDN加速</h2><p>域名：在namesilo上面购买（国外无需备案）</p><ul><li>在腾讯云进行域名解析（因为在namesilo解析生效非常慢…）<ul><li>需要在namesilo设置NameServer Manager为腾讯云的两个值，这样才能在腾讯云解析DNS</li></ul></li><li>配置CDN加速<ul><li>参考：<a href="https://blog.csdn.net/m0_47520749/article/details/124768311">https://blog.csdn.net/m0_47520749/article/details/124768311</a></li></ul></li><li>注意：需要手动在Myblog/Source根目录下手动增加一个无后缀的CNAME文件，内容是域名：kygo.top<ul><li>否则下次重新上新版本，github上的自定义域名配置就会被覆盖掉</li></ul></li></ul><h2 id="8-常用配置"><a href="#8-常用配置" class="headerlink" title="8. 常用配置"></a>8. 常用配置</h2><h3 id="8-1-博客上传-更新时间配置"><a href="#8-1-博客上传-更新时间配置" class="headerlink" title="8.1 博客上传/更新时间配置"></a>8.1 博客上传/更新时间配置</h3><ul><li>更改 themes/hexo-theme-fluid/_config.yml</li></ul><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment">#博客上传时间date配置</span><br><span class="hljs-attribute">date</span>:<br>      <span class="hljs-attribute">enable</span>: true<br>      <span class="hljs-attribute">format</span>: <span class="hljs-string">&quot;YYYY-MM-DD HH:mm:ss&quot;</span><br><span class="hljs-comment">#博客更新updated配置</span><br><span class="hljs-attribute">updated</span>:<br>    <span class="hljs-attribute">enable</span>: true<br>    <span class="hljs-attribute">format</span>: <span class="hljs-string">&quot;YYYY-MM-DD HH:mm:ss&quot;</span><br>    <br><span class="hljs-comment">#在博客开头即可</span><br><span class="hljs-attribute">Date</span>: <span class="hljs-number">2022</span>-<span class="hljs-number">12</span>-<span class="hljs-number">23</span>T<span class="hljs-number">14</span>:<span class="hljs-number">05</span>:<span class="hljs-number">00</span><br><span class="hljs-attribute">Updated</span>: <span class="hljs-number">2022</span>-<span class="hljs-number">12</span>-<span class="hljs-number">26</span>T<span class="hljs-number">13</span>:<span class="hljs-number">45</span>:<span class="hljs-number">00</span><br></code></pre></td></tr></table></figure><h3 id="8-2-博客图片设置"><a href="#8-2-博客图片设置" class="headerlink" title="8.2 博客图片设置"></a>8.2 博客图片设置</h3><ul><li>博客中使用到的图片都放在public/img即可 </li><li>使用的时候路径：/img/图片名称</li></ul>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客搭建</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
